#+title: ac1965's Emacs literate configuration =.emacs.d=
#+startup: content
#+author: YAMASHITA Takao
#+options: auto-id:t H:6
#+property: header-args:emacs-lisp :tangle README.el :results silent

[[file:demo.png]]

* Installation

This section documents the steps to build and install Emacs from source safely and effectively.

** Step 1: Clone the Configuration Repository
Run the following command to clone the configuration files from GitHub:

#+begin_src shell :eval never
  git clone --depth 1 https://github.com/ac1965/.emacs.d ~/.emacs.d
#+end_src

Make sure that the =~/.emacs.d= directory does not already exist, or back it up if necessary.

** Step 2: Build Emacs

To build Emacs, use the provided =build-emacs.sh= script. You must set the =GITHUB_REPOS= environment variable to the location of your source repositories:
[[https://github.com/ac1965/dotfiles/blob/master/.local/bin/build-emacs.sh][ build-emacs.sh]]

#+begin_src shell :eval never
  export GITHUB_REPOS=/Users/ac1965/devel/src
  build-emacs.sh --native-compilation
#+end_src

** Requirements and Troubleshooting

- *Dependencies*: Ensure you have the following installed before running the script:
  - `gcc` (Version 10 or newer)
  - `libgccjit`
  - `make`

- *Permissions*: If you encounter permission issues, try running the script with `sudo`, but only after verifying its contents.

- *Error Handling*:
  - If native compilation fails, check that `libgccjit` is installed and properly linked.
  - Verify that the `GITHUB_REPOS` directory exists and contains the necessary source files.

** System Information

Below are the system details and Emacs build configurations for two machines.

*New Machine*

#+begin_src shell :eval never
  uname -a
  Darwin pooh.local 24.4.0 Darwin Kernel Version 24.4.0: Fri Apr 11 18:32:05 PDT 2025; root:xnu-11417.101.15~117/RELEASE_ARM64_T8132 arm64
#+end_src

- GNU Emacs 31.0.50

|Commit|1410bfb7ca5a3497fbbf36a9d31f9a1dce8fd63a|
|Branch|master|
|System|aarch64-apple-darwin24.4.0|
|Date|2025-05-10 21:13:14 (JST)|
|Patch|without ns-inline.patch|
|Features|ACL DBUS GLIB GNUTLS LCMS2 LIBXML2 MODULES NATIVE_COMP NOTIFY KQUEUE NS PDUMPER PNG RSVG SQLITE3 THREADS TOOLKIT_SCROLL_BARS TREE_SITTER WEBP XIM XWIDGETS ZLIB|
|Options|--with-native-compilation --with-gnutls=ifavailable --with-json --with-modules --with-tree-sitter --with-xml2 --with-xwidgets --with-librsvg CFLAGS=-I/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include CPPFLAGS=-I/opt/homebrew/opt/llvm/include 'LDFLAGS=-L/opt/homebrew/opt/llvm/lib -L/opt/homebrew/opt/llvm/lib/c++ -Wl,-rpath,/opt/homebrew/opt/llvm/lib/c++'|

*OLD Machine*

#+begin_src shell :eval never
  uname -a
  Darwin alice.local 24.3.0 Darwin Kernel Version 24.3.0: Fri Dec  9 19:45:54 PST 2024; root:xnu-11215.80.501.2~1/RELEASE_x86_64 x86_64
#+end_src

- GNU Emacs 31.0.50

|Commit|aa12cebaa684d7b3ea7e131666d33bcc71b45625|
|Branch|master|
|System|x86_64-apple-darwin24.4.0|
|Date|2025-03-23 10:35:38 (JST)|
|Patch|without ns-inline.patch|
|Features|ACL DBUS GIF GLIB GMP GNUTLS JPEG LCMS2 LIBXML2 MODULES NATIVE_COMP NOTIFY KQUEUE NS PDUMPER PNG RSVG SQLITE3 THREADS TIFF TOOLKIT_SCROLL_BARS TREE_SITTER WEBP XIM XWIDGETS ZLIB|
|Options|--with-native-compilation --with-gnutls=ifavailable --with-json --with-modules --with-tree-sitter --with-xml2 --with-xwidgets --with-librsvg CFLAGS=-I/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include CPPFLAGS=-I/usr/local/opt/llvm/include 'LDFLAGS=-L/usr/local/opt/llvm/lib -L/usr/local/opt/llvm/lib/c++ -Wl,-rpath,/usr/local/opt/llvm/lib/c++'|

* Emacs Configuration
** Header

#+begin_src emacs-lisp
  ;;; README.el --- Emacs Configuration -*- lexical-binding: t; -*-

  ;; Copyright (c) 2021-2025 YAMASHITA Takao <ac1965@ty07.net>
  ;; Licensed under the GNU General Public License version 3 or later.

  ;; $Lastupdate: 2025/05/11 13:41:40 $

  ;;; Commentary:
  ;; This file provides a structured Emacs configuration setup using `straight`.
  ;; It includes package management, user-specific settings, and modular design.

  ;;; Code:
#+end_src

** UI/Fonts/Keybind
*** UI

#+begin_src emacs-lisp
  ;; Enable fullscreen mode only in graphical environments.
  (when (display-graphic-p)
    (set-frame-parameter nil 'fullscreen 'fullboth))

  ;; Automatically resize windows according to golden-ratio layout.
  (use-package golden-ratio
    :hook (after-init . golden-ratio-mode)
    :custom
    (golden-ratio-adjust-factor 1.1)
    (golden-ratio-auto-scale t)
    (golden-ratio-exclude-modes '("ediff-mode" "dired-mode")))

  ;; Load ef-themes for consistent and elegant UI aesthetics.
  (use-package ef-themes
    :config
    (if (display-graphic-p)
        (load-theme 'ef-frost t)
      (load-theme 'deeper-blue t)))

  ;; Add internal padding to improve UI spacing and readability.
  (use-package spacious-padding
    :custom
    (spacious-padding-subtle-mode-line '(:mode-line-active default
  							 :mode-line-inactive vertical-border))
    (spacious-padding-widths '(:internal-border-width 10))
    :config
    (spacious-padding-mode 1))

  ;; Replace minor modes in mode-line with a compact icon.
  (use-package minions
    :custom
    (minions-mode-line-lighter "âš™")
    :config
    (minions-mode 1))

  ;; Show current time and battery level in the mode-line.
  (setq display-time-interval 30
        display-time-day-and-date t
        display-time-24hr-format t)
  (setq battery-mode-line-format "[ðŸ”‹ %p%%]")
  (display-time-mode 1)
  (display-battery-mode 1)

  ;; Enable tab-bar for buffer groups and tab-line for visual navigation.
  (use-package tab-bar
    :custom
    (tab-bar-show 1)
    (tab-bar-new-tab-choice "*scratch*")
    :config
    (tab-bar-mode 1)
    (global-tab-line-mode 1))

  ;; Display project tree view using Treemacs with custom UI and behavior.
  (use-package treemacs
    :bind (:map treemacs-mode-map
                ([mouse-1] . treemacs-single-click-expand-action))
    :custom
    (treemacs-no-png-images nil)
    (treemacs-filewatch-mode t)
    (treemacs-follow-mode t)
    (treemacs-indentation 2)
    (treemacs-missing-project-action 'remove)
    :config
    (setq treemacs-width 30)
    :hook
    (treemacs-mode . (lambda ()
                       (setq mode-line-format nil)
                       (display-line-numbers-mode 0))))
#+end_src

*** Fonts

#+begin_src emacs-lisp
  ;; Define a utility function to check if a font exists on the system.
  (defun font-exists-p (font-name)
    "Check if FONT-NAME is available in the system."
    (if (find-font (font-spec :family font-name))
        t
      nil))

  ;; Configure the default font and emoji font, adjusting for display or daemon mode.
  (defun font-setup (&optional frame)
    "Apply font settings to FRAME or the current frame."
    (when (font-exists-p my:font-family)
      (set-face-attribute 'default frame :family my:font-family
                          :height (* my:font-size 10))
      (set-fontset-font t 'unicode
                        (font-spec :family "Noto Color Emoji") nil 'prepend)))

  ;; Define default font fallback and scaling depending on resolution.
  (defvar my:font-family nil "Default font family for Emacs.")
  (unless my:font-family
    (setq my:font-family
          (cond
           ((eq system-type 'windows-nt) "Consolas")
           ((eq system-type 'darwin) "SF Mono") ; macOS
           (t "Monospace"))))                   ; Linux, other

  (unless (font-exists-p my:font-family)
    (setq my:font-family (face-attribute 'default :family)))

  (defvar my:font-size 16 "Default font size for Emacs.")
  (unless (boundp 'my:font-size)
    (setq my:font-size (if (> (or (display-pixel-width) 1920)) 18 16)))

  ;; Hook font setup appropriately based on GUI or daemon mode.
  (if (daemonp)
      (add-hook 'after-make-frame-functions #'font-setup)
    (font-setup))

  ;; Load Nerd Icons if graphics are supported and font is available.
  (use-package nerd-icons
    :if (display-graphic-p)
    :config
    (setq nerd-icons-color-icons t)
    (unless (font-exists-p "Symbols Nerd Font Mono")
      (setq nerd-icons-color-icons nil)))

  ;; Enable Nerd Icons in Dired mode for enhanced visuals.
  (use-package nerd-icons-dired
    :if (display-graphic-p)
    :hook (dired-mode . nerd-icons-dired-mode))

  ;; Enable programming ligatures such as "->" and "==>" in coding buffers.
  (use-package ligature
    :config
    (ligature-set-ligatures 'prog-mode
                            '("->" "=>" "::" "===" "!=" "&&" "||" "|||"
                              ":::" "!!" "??" "-->" "<--" "->>" "<<-"))
    (global-ligature-mode 1))
#+end_src

*** Key Bindings

#+begin_src emacs-lisp
  ;; Display possible keybindings after partial input for easier discovery.
  (use-package which-key
    :demand t
    :config
    (setq which-key-idle-delay 0.5)
    (which-key-mode 1))

  ;; Use undo-fu for more reliable and intuitive undo/redo behavior.
  (use-package undo-fu
    :config
    (setq undo-fu-allow-undo-in-region t))

  ;; Use hydra for transient menus, such as text scaling.
  (use-package hydra
    :config
    (defhydra hydra-text-scale (:hint nil :color red)
      "
  ^Text Scaling^
  ----------------------------
  [_+_] Increase   [_-_] Decrease   [_0_] Reset
  "
      ("+" text-scale-increase)
      ("-" text-scale-decrease)
      ("0" (text-scale-set 0) :color blue)
      ("q" nil "quit" :color blue)))

  ;; Define global keybindings using `global-set-key` for various workflows.
  (global-set-key (kbd "<f1>") 'help)
  (global-set-key (kbd "<f8>") 'treemacs)
  (global-set-key (kbd "C-?") 'help)
  (global-set-key (kbd "C-h") 'backward-delete-char)

  (global-set-key (kbd "C-/") 'undo-fu-only-undo)
  (global-set-key (kbd "C-z") 'undo-fu-only-redo)

  (global-set-key (kbd "C-+") 'text-scale-increase)
  (global-set-key (kbd "C--") 'text-scale-decrease)
  (global-set-key (kbd "C-c z") 'hydra-text-scale/body)

  (global-set-key (kbd "s-n") 'next-buffer)
  (global-set-key (kbd "s-p") 'previous-buffer)
  (global-set-key (kbd "s-<up>") 'beginning-of-buffer)
  (global-set-key (kbd "s-<down>") 'end-of-buffer)
  (global-set-key (kbd "C-c b") 'consult-buffer)

  (global-set-key (kbd "C-.") 'other-window)
  (global-set-key (kbd "C-c 2") 'my/toggle-window-split)
  (global-set-key (kbd "M-o") 'ace-window)
  (global-set-key (kbd "s-.") 'ace-swap-window)
  (global-set-key (kbd "s-d") 'delete-frame)
  (global-set-key (kbd "s-m")
                  (lambda () (interactive)
                    (let ((frame (make-frame)))
                      (with-selected-frame frame
                        (switch-to-buffer (generate-new-buffer "untitled"))))))

  (global-set-key (kbd "s-j") 'find-file-other-window)
  (global-set-key (kbd "s-o") 'find-file-other-frame)
  (global-set-key (kbd "C-c o") 'find-file)
  (global-set-key (kbd "C-c v") 'find-file-read-only)
  (global-set-key (kbd "C-c V") 'view-file-other-window)
  (global-set-key (kbd "C-c k") 'kill-buffer-and-window)

  (global-set-key (kbd "C-s") 'consult-line)
  (global-set-key (kbd "C-c r") 'consult-ripgrep)

  (global-set-key (kbd "C-=") 'er/expand-region)
  (global-set-key (kbd "C-c M-a") 'align-regexp)
  (global-set-key (kbd "C-c ;") 'comment-region)
  (global-set-key (kbd "C-c :") 'uncomment-region)

  (global-set-key (kbd "C-c d a") 'org-agenda)
  (global-set-key (kbd "C-c d c") 'org-capture)
  (global-set-key (kbd "C-c d i") 'org-roam-node-insert)
  (global-set-key (kbd "C-c d f") 'org-roam-node-find)

  (global-set-key (kbd "M-x") 'execute-extended-command)
  (global-set-key (kbd "C-x g") 'magit-status)
  (global-set-key (kbd "s-r") 'restart-emacs)

  ;; Enable Shift + Arrow for directional window movement.
  (windmove-default-keybindings)

  ;; Set a custom keybinding in Dired mode for viewing files in another window.
  (add-hook 'dired-mode-hook
            (lambda ()
              (define-key dired-mode-map (kbd "z")
  			'my/dired-view-file-other-window)))
#+end_src

** Basic Configuration
*** Save and Backup

#+begin_src emacs-lisp
  ;; Automatically insert a timestamp at the top before saving.
  (defun my/save-buffer-wrapper ()
    "Insert a timestamp at the top of the buffer before saving."
    (interactive)
    (let ((tostr (concat "$Lastupdate: " (format-time-string "%Y/%m/%d %H:%M:%S") " $")))
      (save-excursion
        (goto-char (point-min))
        (while (re-search-forward "\\$Lastupdate\\([0-9/: ]*\\)?\\$" nil t)
          (replace-match tostr t nil)))))

  (add-hook 'before-save-hook #'my/save-buffer-wrapper)

  ;; Configure backup and auto-save behavior
  (setq backup-directory-alist `(("." . ,(concat no-littering-var-directory "backup/")))
        auto-save-file-name-transforms `((".*" ,(concat no-littering-var-directory "backup/") t))
        delete-old-versions t
        version-control t    ;; Enable versioning for backups
        kept-new-versions 6  ;; Keep up to 6 new backups
        kept-old-versions 2  ;; Keep up to 2 old backups
        auto-save-visited-interval 5  ;; Auto-save interval in seconds
        auto-save-visited-mode t)     ;; Enable auto-save for visited files

  (auto-save-visited-mode 1)
#+end_src

*** Session Management

#+begin_src emacs-lisp
  ;; Restore previous sessions and enable window layout history
  (setq desktop-dirname (concat no-littering-var-directory "desktop")
        desktop-save 'if-exists
        desktop-auto-save-timeout 180
        desktop-restore-eager 10)

  (desktop-save-mode 1)
  (winner-mode 1)
#+end_src

*** Editing Enhancements

#+begin_src emacs-lisp
  ;; Restore cursor position in files
  (use-package saveplace
    :init (save-place-mode 1))

  ;; Keep track of recently opened files
  (use-package recentf
    :init
    (setq recentf-max-saved-items 100)
    (recentf-mode 1))

  ;; Preserve minibuffer history across sessions
  (use-package savehist
    :init
    (setq savehist-file (concat no-littering-var-directory "savehist"))
    (savehist-mode 1))

  ;; Automatically revert files changed externally
  (use-package autorevert
    :init (global-auto-revert-mode 1))

  ;; Enable automatic insertion of matching delimiters
  (use-package elec-pair
    :init (electric-pair-mode 1))

  ;; Highlight matching parentheses immediately
  (use-package paren
    :init (show-paren-mode 1)
    :custom
    (show-paren-delay 0)
    (show-paren-style 'expression))

  ;; Structural editing support for parentheses (alternative to smartparens)
  (use-package puni
    :straight t
    :init (puni-global-mode 1))
#+end_src

*** System Utilities

#+begin_src emacs-lisp
  ;; Smarter garbage collection for better performance
  (use-package gcmh
    :straight t
    :init (gcmh-mode 1))

  ;; Load environment variables from the shell (macOS only)
  (defvar my/shell-env-vars
    '("PATH" "MANPATH" "PASSWORD_STORE_DIR" "GPG_KEY_ID" "OPENROUTER_API_KEY")
    "Environment variables to import from the shell.")

  (use-package exec-path-from-shell
    :if (memq window-system '(mac ns))
    :straight t
    :config
    (setq exec-path-from-shell-check-startup-files nil
          exec-path-from-shell-variables my/shell-env-vars)
    (exec-path-from-shell-initialize))
#+end_src

*** Tree-Sitter

#+begin_src emacs-lisp
  ;; Enable global Tree-sitter support (if Emacs has treesit)
  (when (featurep 'treesit)
    (use-package tree-sitter
      :straight t
      :config
      (global-tree-sitter-mode)
      (add-hook 'tree-sitter-after-on-hook #'tree-sitter-hl-mode)))

  (use-package tree-sitter-langs
    :straight t
    :config
    (condition-case err
        (tree-sitter-langs-install-grammars)
      (error (message "Failed to install Tree-sitter grammars: %s" err))))
#+end_src

*** Miscellaneous

#+begin_src emacs-lisp
  ;; Configure TRAMP to avoid clutter and use more verbose output
  (use-package tramp
    :init
    (setq tramp-default-method "scp")
    :custom
    (tramp-persistency-file-name (concat no-littering-var-directory "tramp"))
    (tramp-auto-save-directory (concat no-littering-var-directory "tramp-autosave"))
    (tramp-verbose 10))

  ;; Set custom location for auto-save list files
  (use-package emacs
    :custom
    (auto-save-list-file-prefix (concat no-littering-var-directory "backup/" (format-time-string "%Y-%m-%d-%H%M%S") "-.saves-")))
#+end_src

** Utilities Package
*** Extra Utilities

#+begin_src emacs-lisp
  ;; Enable visual-line-mode in text-mode buffers
  (add-hook 'text-mode-hook #'visual-line-mode)

  ;; macOS clipboard integration
  (use-package pbcopy
    :if (memq window-system '(mac ns))
    :straight t
    :config
    (turn-on-pbcopy))

  ;; Dired enhancements
  (use-package dired-filter
    :straight t)

  (use-package dired-subtree
    :straight t
    :after dired
    :bind (:map dired-mode-map
                ("i" . dired-subtree-insert)
                ("TAB" . dired-subtree-toggle)))

  ;; Text editing enhancements
  (use-package expand-region
    :straight t)

  (use-package aggressive-indent
    :straight t
    :init (global-aggressive-indent-mode 1))

  (use-package delsel
    :init (delete-selection-mode 1))

  ;; Use ripgrep for grep
  (setq grep-program "rg")

  (use-package rg
    :straight t)

  ;; Dumb Jump for code navigation
  (use-package dumb-jump
    :straight t
    :hook (xref-backend-functions . dumb-jump-xref-activate)
    :custom
    ((dumb-jump-force-searcher . 'rg)
     (dumb-jump-prefer-searcher . 'rg)))

  ;; Multiple cursors
  (use-package multiple-cursors
    :straight t)

  ;; Version control with Magit
  (use-package magit
    :straight t)

  ;; Syntax and spell checking
  (use-package flycheck
    :straight t
    :hook (prog-mode . flycheck-mode))

  (use-package flyspell
    :straight t
    :custom
    (flyspell-default-dictionary "aspell")
    (ispell-program-name "aspell")
    (ispell-extra-args '("--sug-mode=ultra")))

  ;; Project management
  (use-package projectile
    :straight t
    :init (projectile-mode 1))

  ;; Snippet support
  (use-package yasnippet
    :straight t
    :init (yas-global-mode 1))

  (use-package yasnippet-snippets
    :straight t
    :after yasnippet)

#+end_src

*** AI Configuration

#+begin_src emacs-lisp
  (use-package ellama
    :straight t
    :after llm-ollama
    :init
    (setq ellama-language "Japanese"
          ellama-sessions-directory (concat no-littering-var-directory "ellama-sessions")
          ellama-naming-scheme 'ellama-generate-name-by-llm
          ellama-provider
          (make-llm-ollama
           :chat-model "codestral:22b-v0.1-q4_K_S"
           :embedding-model "codestral:22b-v0.1-q4_K_S")
          ellama-translation-provider
          (make-llm-ollama
           :chat-model "llama3:8b-instruct-q8_0"
           :embedding-model "llama3:8b-instruct-q8_0")
          ellama-providers
          '(("codestral" . (make-llm-ollama
                            :chat-model "codestral:22b-v0.1-q4_K_S"
                            :embedding-model "codestral:22b-v0.1-q4_K_S"))
            ("gemma2" . (make-llm-ollama
                         :chat-model "gemma2:27b-instruct-q4_K_S"
                         :embedding-model "gemma2:27b-instruct-q4_K_S"))
            ("llama3.2-vision" . (make-llm-ollama
                                  :chat-model "llama3:8b-instruct-q8_0"
                                  :embedding-model "llama3:8b-instruct-q8_0"))))

    ;; Interactive command to change provider
    (defun ellama-set-provider (provider-name)
      "Set the active provider for Ellama by PROVIDER-NAME."
      (interactive
       (list (completing-read "Select provider: " (mapcar #'car ellama-providers))))
      (if-let* ((provider (cdr (assoc provider-name ellama-providers))))
          (progn
            (setq ellama-provider provider)
            (message "Ellama provider set to: %s" provider-name))
        (progn
          (message "Provider '%s' not found. Using default provider." provider-name)
          (setq ellama-provider (cdr (assoc "codestral" ellama-providers))))))

    :config
    (unless (and ellama-provider ellama-translation-provider)
      (message "Ellama configuration is incomplete. Verify providers.")))
#+end_src

*** Programming Utilities

#+begin_src emacs-lisp
  (defvar my/use-lsp 'eglot) ;; Change to 'lsp if you prefer lsp-mode

  ;; Eglot LSP client
  (when (eq my/use-lsp 'eglot)
    (use-package eglot
      :straight t
      :config
      (add-to-list 'eglot-server-programs '(python-mode . ("pylsp")))
      :hook ((python-mode . eglot-ensure))))

  ;; lsp-mode alternative
  (when (eq my/use-lsp 'lsp)
    (use-package lsp-mode
      :straight t
      :commands lsp
      :custom
      (lsp-keymap-prefix "C-c l")
      :hook ((python-mode . lsp)
             (go-mode . lsp)
             (js-mode . lsp))))

  ;; lsp-ui (UI enhancements for lsp-mode)
  (use-package lsp-ui
    :straight t
    :commands lsp-ui-mode
    :custom
    (lsp-ui-doc-enable t)
    (lsp-ui-doc-delay 0.5)
    (lsp-ui-sideline-enable t))
#+end_src

*** Completion Framework

#+begin_src emacs-lisp
  ;;; Completion Settings (straight + use-package)

  ;; Prescient: Sort and filter candidates based on usage history
  (use-package prescient
    :straight t
    :custom
    (prescient-aggressive-file-save t)  ;; Automatically save history
    :config
    (prescient-persist-mode 1))

  ;; Vertico: Vertical completion menu
  (use-package vertico
    :straight t
    :init
    (vertico-mode 1)
    :custom
    (vertico-count 15))  ;; Show up to 15 candidates in the menu

  ;; Vertico-Posframe: Cleaner UI with floating window
  (use-package vertico-posframe
    :straight t
    :if (display-graphic-p)
    :after vertico
    :custom
    (vertico-posframe-border-width 2)
    (vertico-posframe-parameters '((left-fringe . 4) (right-fringe . 4)))
    :config
    (vertico-posframe-mode 1))

  ;; Vertico + Prescient Integration
  (use-package vertico-prescient
    :straight t
    :after (vertico prescient)
    :config
    (vertico-prescient-mode 1))

  ;; Marginalia: Annotate candidates with additional context
  (use-package marginalia
    :straight t
    :init
    (marginalia-mode 1))

  ;; Embark + Consult Integration
  (use-package embark-consult
    :straight t
    :after (embark consult)
    :hook (embark-collect-mode . consult-preview-at-point-mode)
    :custom
    (consult-preview-key "M-."))

  ;; Consult: Enhanced search and navigation commands
  (use-package consult
    :straight t
    :custom
    (xref-show-xrefs-function #'consult-xref)
    (xref-show-definitions-function #'consult-xref))

  ;; Embark: Context-aware actions for completion candidates
  (use-package embark
    :straight t
    :custom
    (prefix-help-command #'embark-prefix-help-command)
    (embark-collect-live-update t)
    :config
    (add-hook 'embark-collect-mode-hook #'embark-collect-live-mode)

    ;; Setup Embark keybindings in Vertico
    (defun my/setup-embark-vertico-directory ()
      "Integrate embark-act inside vertico-directory minibuffer."
      (when (and (boundp 'vertico-map) (require 'embark nil t))
        (define-key vertico-map (kbd "C-.") #'embark-act)
        (define-key vertico-map (kbd "C-;") #'embark-dwim)))
    (add-hook 'vertico-mode-hook #'my/setup-embark-vertico-directory))

  ;; Corfu: Popup-based completion for `completion-at-point`
  (use-package corfu
    :straight t
    :init
    (global-corfu-mode 1)
    :custom
    (corfu-auto t)            ;; Enable auto-completion
    (corfu-auto-delay 0)      ;; No delay before showing candidates
    (corfu-auto-prefix 2)     ;; Trigger completion after 2 characters
    (corfu-cycle t)           ;; Cycle through candidates
    (corfu-scroll-margin 4))  ;; Margin for scrolling

  ;; Kind-Icon: Icons for Corfu
  (use-package kind-icon
    :straight t
    :after corfu
    :custom
    (kind-icon-default-face 'corfu-default)
    :config
    (add-to-list 'corfu-margin-formatters #'kind-icon-margin-formatter))

  ;; Cape: Additional completion sources for Corfu
  (use-package cape
    :straight t
    :init
    (add-to-list 'completion-at-point-functions #'cape-file)
    (add-to-list 'completion-at-point-functions #'cape-dabbrev)
    (add-to-list 'completion-at-point-functions #'cape-keyword))

  ;; Orderless: Fuzzy matching for completion
  (use-package orderless
    :straight t
    :custom
    (completion-styles '(orderless basic))
    (completion-category-overrides '((file (styles . (partial-completion))))))
#+end_src

*** Org-kmode
**** Org-mode Core Setup

#+begin_src emacs-lisp
  ;; Org-mode Core Setup
  (use-package org
    :defer t
    :preface
    ;; Set up cloud directory if not already defined
    (defvar warning-suppress-types nil)
    (unless (boundp 'my:d:cloud)
      (setq my:d:cloud (concat no-littering-var-directory "./")))

    ;; Return list of opened Org mode buffer files
    (defun org-buffer-files ()
      "Return a list of opened Org mode buffer files."
      (delq nil
            (mapcar (lambda (buf) (buffer-file-name buf))
                    (org-buffer-list 'files))))

    ;; Show Org buffer file in current window
    (defun show-org-buffer (file)
      "Show an org FILE in the current buffer."
      (interactive (list (read-file-name "Org file: " org-directory nil t)))
      (let ((filepath (expand-file-name file org-directory)))
        (if (get-file-buffer filepath)
            (switch-to-buffer (get-file-buffer filepath))
          (find-file filepath))))

    :custom
    ((org-support-shift-select . t))
    :init
    ;; Set Org directory and ensure it exists
    (setq org-directory (expand-file-name "org/" my:d:cloud))
    (my:ensure-directory-exists org-directory)
    (setq org-return-follows-link t
          org-mouse-1-follows-link t)
    (setq warning-suppress-types (append warning-suppress-types '((org-element-cache))))
    (setq org-element-use-cache nil)

    ;; Bind custom keybindings for Org files
    :bind (:map org-mode-map
                ("C-c a" . org-agenda)
                ("C-c c" . org-capture)
                ("C-c l" . org-store-link)
                ("C-c b" . org-switchb)
    :config
    ;; Configure Org-mode settings
    (setq org-agenda-files (list org-directory)
          org-cycle-emulate-tab 'white-space
          org-default-notes-file "notes.org"
          org-enforce-todo-dependencies t
          org-idle-time 0.3
          org-log-done 'time
          org-startup-folded 'content
          org-startup-truncated nil
          org-use-speed-commands t)

    ;; Set up Org file links and agenda files
    (setq org-link-frame-setup '((file . find-file)))
    (setq org-agenda-files
          (seq-filter (lambda (file) (not (string-match-p "archives" file)))
                      (directory-files-recursively org-directory "\\.org$")))

    ;; Configure Org TODO keywords and refile targets
    (setq org-todo-keywords
          '((sequence "TODO(t)" "SOMEDAY(s)" "WAITING(w)" "|" "DONE(d)" "CANCELED(c@)")))
    (setq org-refile-targets
          '((nil :maxlevel . 3)
            (org-buffer-files :maxlevel . 1)
            (org-agenda-files :maxlevel . 3)))

    ;; Set up Org capture templates
    (setq org-capture-templates
          `(("t" "Todo" entry (file+headline ,(expand-file-name "gtd.org" org-directory) "Inbox")
             "* TODO %?\n %i\n %a")
            ("n" "Note" entry (file+headline ,(expand-file-name "notes.org" org-directory) "Notes")
             "* %?\nEntered on %U\n %i\n %a")
            ("j" "Journal" entry (function org-journal-find-location)
             "* %(format-time-string org-journal-time-format)%^{Title}\n%i%?")
            ("m" "Meeting" entry (file ,(expand-file-name "meetings.org" org-directory))
             "* MEETING with %? :meeting:\n  %U\n  %a"))))
#+end_src

**** Additional Org-related packages

#+begin_src emacs-lisp

  ;; Org-mode Visual Enhancements (e.g., Org Superstar)
  (use-package org-superstar
    :after org
    :custom
    (org-superstar-headline-bullets-list . '("â—‰" "â˜…" "â—‹" "â–·"))
    (org-superstar-remove-leading-stars . nil)
    :hook (org-mode . org-superstar-mode))

  (use-package org-journal
    :straight t
    :after org
    :config
    (setq org-journal-dir (concat org-directory "/journal")
          org-journal-enable-agenda-integration t)
    (defun org-journal-find-location ()
      "Open today's journal entry."
      (org-journal-new-entry t)))

  (use-package org-roam
    :straight t
    :after org
    :config
    (setq org-roam-directory (concat org-directory "/org-roam"))
    (unless (file-directory-p org-roam-directory)
      (make-directory org-roam-directory t))
    (org-roam-db-autosync-mode))

  (use-package org-download
    :straight t
    :after org
    :config
    (setq org-download-image-dir (expand-file-name "pictures" org-directory))
    (unless (file-directory-p org-download-image-dir)
      (make-directory org-download-image-dir t)))

  (use-package toc-org
    :straight t
    :after org markdown-mode
    :config
    (add-hook 'org-mode-hook 'toc-org-enable)
    (add-hook 'markdown-mode-hook 'toc-org-mode))

  (use-package org-cliplink
    :straight t
    :after org
    :bind ("C-x p i" . org-cliplink))

  (use-package ox-hugo
    :straight t
    :after ox
    :custom
    (org-hugo-front-matter-format "toml"))

  (use-package markdown-mode
    :straight t
    :mode ("\\.md\\'" . markdown-mode))
#+end_src

*** Miscellaneous Helper Functions

#+begin_src emacs-lisp
  ;; `*scratch*` buffer utility
  (defun my/create-scratch-buffer ()
    "Ensure that a `*scratch*` buffer exists."
    (let ((scratch-buffer (get-buffer "*scratch*")))
      (unless scratch-buffer
        (with-current-buffer (get-buffer-create "*scratch*")
          (funcall initial-major-mode)
          (when (and initial-scratch-message
                     (not (string-empty-p initial-scratch-message)))
            (insert initial-scratch-message))
          (current-buffer)))))

  (defun my/recreate-scratch-buffer ()
    "Kill the current `*scratch*` buffer and create a new one."
    (interactive)
    (when (get-buffer "*scratch*")
      (kill-buffer "*scratch*"))
    (my/create-scratch-buffer)
    (switch-to-buffer "*scratch*"))

  (defun my/after-kill-buffer-advice (&rest _)
    "Ensure `*scratch*` buffer exists after killing it."
    (run-at-time 0.1 nil #'my/create-scratch-buffer))

  (advice-add 'kill-buffer :after #'my/after-kill-buffer-advice)

  (defun my:directory-access-safe-p (dir)
    "Return t if DIR is not a protected directory."
    (not (member dir my:excluded-directories)))

  (advice-add 'dired :before
              (lambda (dir &rest _args)
                (unless (my:directory-access-safe-p dir)
                  (error "Access to directory is not permitted: %s" dir))))

  ;; Window layout management
  (defvar my/saved-window-config nil
    "Stores the current window configuration for later restoration.")

  (defun my/save-window-layout ()
    "Save the current window configuration persistently."
    (interactive)
    (setq my/saved-window-config (window-state-get nil t))
    (message "Window configuration saved."))

  (defun my/restore-window-layout ()
    "Restore the saved window configuration."
    (interactive)
    (if my/saved-window-config
        (progn
          (window-state-put my/saved-window-config)
          (message "Window configuration restored."))
      (message "No saved window configuration found. Please save a layout first.")))

  (defun my/toggle-window-dedication ()
    "Toggle the dedicated status of the currently selected window."
    (interactive)
    (let ((window (selected-window)))
      (set-window-dedicated-p window (not (window-dedicated-p window)))
      (message "Window dedication %s"
               (if (window-dedicated-p window) "enabled" "disabled"))))

  ;; Asynchronous task execution
  (defun my/safe-run-async (task)
    "Run TASK asynchronously and handle any errors gracefully."
    (run-at-time 0 nil
                 (lambda ()
                   (condition-case err
                       (funcall task)
                     (error (message "An error occurred during asynchronous execution: %s" err))))))

  ;; Backup file cleanup
  (defun my/delete-old-backups ()
    "Delete backup files older than 7 days asynchronously."
    (interactive)
    (my/safe-run-async
     (lambda ()
       (let ((backup-dir (concat no-littering-var-directory "backup/"))
             (threshold (- (float-time (current-time)) (* 7 24 60 60))))
         (when (file-directory-p backup-dir)
           (dolist (file (directory-files backup-dir t nil t))
             (when (and (file-regular-p file)
                        (> (float-time (file-attribute-modification-time (file-attributes file))) threshold))
               (delete-file file))))))))

  (add-hook 'emacs-startup-hook #'my/delete-old-backups)

  ;; View mode handling
  (defun my/enable-view-mode-on-read-only ()
    "Enable `view-mode` if the buffer is read-only, disable otherwise."
    (if buffer-read-only
        (view-mode 1)
      (view-mode -1)))
  (add-hook 'read-only-mode-hook #'my/enable-view-mode-on-read-only)

  ;; Toggle line number display
  (defun my/toggle-linum-lines ()
    "Toggle line number display using `display-line-numbers-mode`."
    (interactive)
    (display-line-numbers-mode 'toggle))

  ;; Toggle window split orientation
  (defun my/toggle-window-split ()
    "Toggle the window split between horizontal and vertical."
    (interactive)
    (if (= (count-windows) 2)
        (let* ((this-win-buffer (window-buffer))
               (next-win-buffer (window-buffer (next-window)))
               (splitter (if (window-combined-p)
                             'split-window-vertically
                           'split-window-horizontally)))
          (delete-other-windows)
          (let ((first-win (selected-window)))
            (funcall splitter)
            (set-window-buffer (selected-window) this-win-buffer)
            (set-window-buffer (next-window) next-win-buffer)
            (select-window first-win)))
      (message "This function only works when exactly two windows are open.")))

  ;; Find keybinding conflicts
  (defun my/find-keybinding-conflicts ()
    "Detect and display keybinding conflicts across active keymaps."
    (interactive)
    (let ((conflicts (make-hash-table :test 'equal))
          (buffer-name "*Keybinding Conflicts*"))
      (mapatoms (lambda (sym)
                  (when (and (boundp sym) (keymapp (symbol-value sym)))
                    (map-keymap
                     (lambda (key cmd)
                       (when (commandp cmd)
                         (let* ((key-desc (key-description (vector key)))
                                (existing (gethash key-desc conflicts)))
                           (puthash key-desc (delete-dups (cons cmd existing)) conflicts))))
                     (symbol-value sym)))))
      (with-current-buffer (get-buffer-create buffer-name)
        (read-only-mode -1)
        (erase-buffer)
        (insert "* Keybinding Conflicts *\n\n")
        (maphash (lambda (key cmds)
                   (when (> (length cmds) 1)
                     (insert (format "%s => %s\n"
                                     key
                                     (mapconcat #'symbol-name cmds ", ")))))
                 conflicts)
        (read-only-mode 1))
      (switch-to-buffer buffer-name)))

  ;; Dired file and directory viewing
  (defun my/dired-view-file-other-window ()
    "Open the selected file or directory in another window."
    (interactive)
    (let ((file (dired-get-file-for-visit)))
      (if (file-directory-p file)
          (or (and (cdr dired-subdir-alist)
                   (dired-goto-subdir file))
              (dired file))
        (view-file-other-window file))))

  ;; External editor integration
  (defun my/open-by-vscode ()
    "Open the current file in Visual Studio Code at the current line and column."
    (interactive)
    (when (buffer-file-name)
      (async-shell-command
       (format "code -r -g %s:%d:%d"
               (buffer-file-name)
               (line-number-at-pos)
               (current-column)))))

  ;; Displau the value of environment
  (defun my/show-env-variable (var)
    "Display the value of environment variable VAR in the minibuffer."
    (interactive "sEnvironment variable: ")
    (let ((value (getenv var)))
      (if value
          (message "%s = %s" var value)
        (message "Environment variable %s is not set." var))))

  ;; Emacs build information
  (defun my/print-build-info ()
    "Display detailed information about the current Emacs build."
    (interactive)
    (switch-to-buffer (get-buffer-create "*Build info*"))
    (let ((buffer-read-only nil))
      (erase-buffer)
      (insert
       (format "- GNU Emacs %s\n\n|Commit|%s|\n|Branch|%s|\n|System|%s|\n|Date|%s|\n"
               emacs-version
               (emacs-repository-get-version)
               (when (version< "27.0" emacs-version)
                 (emacs-repository-get-branch))
               system-configuration
               (format-time-string "%Y-%m-%d %T (%Z)" emacs-build-time)))
      (insert (format "|Patch|%s ns-inline.patch|\n"
                      (if (boundp 'mac-ime--cursor-type) "with" "without")))
      (insert
       (format "|Features|%s|\n" system-configuration-features))
      (insert
       (format "|Options|%s|\n" system-configuration-options)))
    (view-mode))

  ;; Auto-tangling for Org files
  (defun my/auto-tangle-init-org ()
    "Auto-tangle init.org when saving."
    (when (string= (file-name-nondirectory (buffer-file-name)) "README.org")
      (org-babel-tangle)))

  ;; Hooks for common operations
  (add-hook 'before-save-hook 'delete-trailing-whitespace)
  (add-hook 'prog-mode-hook 'goto-address-prog-mode)
  (add-hook 'text-mode-hook 'goto-address-mode)
  (add-hook 'after-save-hook #'my/auto-tangle-init-org)
#+end_src

** Footer
#+begin_src emacs-lisp
  (provide 'README)
  ;;; README.el ends here
#+end_src

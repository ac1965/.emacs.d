#+title: ac1965's Emacs literate configuration =.emacs.d=
#+startup: content
#+author: YAMASHITA Takao
#+options: auto-id:t H:6

[[file:demo.png]]

* Installation

This section documents the setup required to build and install Emacs from source.

#+begin_src shell :eval never
  git clone https://github.com/ac1965/.emacs.d ~/.emacs.d
#+end_src

You are cloning a GitHub repository (https://github.com/ac1965/.emacs.d) into the =~/.emacs.d= directory on your local machine.

- *Build Emacs*

You build Emacs using a script (=build-emacs.sh=) and want to specify the location of your GitHub repositories.

[[https://github.com/ac1965/dotfiles/blob/master/.local/bin/build-emacs.sh][build-emacs.sh]]

The following script builds Emacs with native compilation enabled. You need to set the `GITHUB_REPOS` environment variable to point to your source repository.

#+begin_src shell :eval never
  GITHUB_REPOS=/Users/ac1965/devel/src build-emacs.sh --native-compilation
#+end_src

- *System Information*

Below are the system details and Emacs build configurations for two machines.

#+begin_src shell :eval never
  uname -a
  Darwin pooh.local 24.2.0 Darwin Kernel Version 24.2.0: Fri Dec  6 19:04:03 PST 2024; root:xnu-11215.61.5~2/RELEASE_ARM64_T8132 arm64
#+end_src

- GNU Emacs 31.0.50

|Commit|a00e6e7143d5ebf7282b5e5b410e1bd882634d57|
|Branch|master|
|System|aarch64-apple-darwin24.2.0|
|Date|2025-01-25 09:11:07 (JST)|
|Patch|without ns-inline.patch|
|Features|ACL DBUS GLIB GNUTLS LCMS2 LIBXML2 MODULES NATIVE_COMP NOTIFY KQUEUE NS PDUMPER PNG RSVG SQLITE3 THREADS TOOLKIT_SCROLL_BARS TREE_SITTER WEBP XIM XWIDGETS ZLIB|
|Options|--with-native-compilation --with-gnutls=ifavailable --with-json --with-modules --with-tree-sitter --with-xml2 --with-xwidgets --with-librsvg CFLAGS=-I/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include CPPFLAGS=-I/opt/homebrew/opt/llvm/include 'LDFLAGS=-L/opt/homebrew/opt/llvm/lib -L/opt/homebrew/opt/llvm/lib/c++ -Wl,-rpath,/opt/homebrew/opt/llvm/lib/c++'|

*OLD Machine*

#+begin_src shell :eval never
  uname -a
  Darwin alice.local 24.3.0 Darwin Kernel Version 24.3.0: Fri Dec  9 19:45:54 PST 2024; root:xnu-11215.80.501.2~1/RELEASE_x86_64 x86_64
#+end_src

- GNU Emacs 31.0.50

|Commit|4021b92403ca184bc0cd52f33ed5c6e27780cede|
|Branch|master|
|System|x86_64-apple-darwin24.3.0|
|Date|2025-01-20 09:29:07 (JST)|
|Patch|without ns-inline.patch|
|Features|ACL DBUS GIF GLIB GMP GNUTLS JPEG LCMS2 LIBXML2 MODULES NATIVE_COMP NOTIFY KQUEUE NS PDUMPER PNG RSVG SQLITE3 THREADS TIFF TOOLKIT_SCROLL_BARS TREE_SITTER WEBP XIM XWIDGETS ZLIB|
|Options|--with-native-compilation --with-gnutls=ifavailable --with-json --with-modules --with-tree-sitter --with-xml2 --with-xwidgets --with-librsvg CFLAGS=-I/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include CPPFLAGS=-I/usr/local/opt/llvm/include 'LDFLAGS=-L/usr/local/opt/llvm/lib -L/usr/local/opt/llvm/lib/c++ -Wl,-rpath,/usr/local/opt/llvm/lib/c++'|

* Emacs Configuration

** Header
#+begin_src emacs-lisp
;;; README.el --- Emacs Configuration -*- lexical-binding: t; -*-

;; Copyright (c) 2021-2025 YAMASHITA Takao <ac1965@ty07.net>
;; Licensed under the GNU General Public License version 3 or later.

;; $Lastupdate: 2025/01/25 13:10:32 $

;;; Commentary:
;; This file provides a structured Emacs configuration setup using `leaf`.
;; It includes package management, user-specific settings, and modular design.

;;; Code:
#+end_src

** Package Management with `leaf`
/This configuration uses `leaf` for package management, ensuring a modular and structured approach./

- **Package Archives**
  Configures both GNU ELPA and MELPA for comprehensive package availability.
- **Leaf Initialization**
  Installs and initializes `leaf` and `leaf-keywords` for extended functionality.

#+begin_src emacs-lisp
(eval-and-compile
  (require 'package)
  (customize-set-variable
   'package-archives
   '(("gnu" . "https://elpa.gnu.org/packages/")
     ("melpa" . "https://melpa.org/packages/")))
  (package-initialize)

  (unless (package-installed-p 'leaf)
    (package-refresh-contents)
    (package-install 'leaf))
  (use-package leaf :ensure t)

  (leaf leaf-keywords
    :ensure t
    :config
    (leaf-keywords-init)))
#+end_src

** User-Specific Configuration
/This setup dynamically loads a user-specific configuration file based on the user's login name./

#+begin_src emacs-lisp
  
  ;; Loading user-specific settings.

  (setq user-specific-config (concat my:d user-login-name ".el"))
  (if (file-exists-p user-specific-config) (load user-specific-config))
#+end_src

** UI/Fonts/Keybind
*** UI
This section customizes the Emacs UI for better usability and aesthetics.

**** Window Management
Enable dynamic resizing and improved window navigation.

#+begin_src emacs-lisp
;; Enable fullscreen mode in graphical environments
(when (display-graphic-p)
  (set-frame-parameter nil 'fullscreen 'fullboth))

;; Dynamic window resizing using golden-ratio
(leaf golden-ratio
  :ensure t
  :global-minor-mode golden-ratio-mode
  :custom ((golden-ratio-adjust-factor . 1.2)
           (golden-ratio-auto-scale . t)))
#+end_src

**** Themes and Padding
Set a modern theme and adjust UI spacing for clarity.

#+begin_src emacs-lisp
;; Use ef-themes for consistent UI aesthetics
(leaf ef-themes
  :ensure t
  :config
  (load-theme 'ef-frost t))

;; Add spacious padding for better readability
(leaf spacious-padding
  :ensure t
  :custom
  ((spacious-padding-subtle-mode-line . '(:mode-line-active default
                                      :mode-line-inactive vertical-border))
   (spacious-padding-widths . '(:internal-border-width 15)))
  :config
  (spacious-padding-mode 1))
#+end_src

**** Modeline Enhancements
Minimize clutter and add useful information to the mode-line.

#+begin_src emacs-lisp
(leaf minions
  :ensure t
  :config
  (minions-mode 1)
  (setq minions-mode-line-lighter "[+]"))

;; Display time and battery status in the mode-line
(setq display-time-interval 30
      display-time-day-and-date t
      display-time-24hr-format t)
(display-time-mode 1)
(display-battery-mode 1)
#+end_src

**** Tab Management
Enable tabs and enhance navigation between buffers.

#+begin_src emacs-lisp
(leaf tab-bar
  :custom ((tab-bar-show . 1)
           (tab-bar-new-tab-choice . "*scratch*"))
  :config
  (tab-bar-mode 1)
  (global-tab-line-mode 1))
#+end_src

**** File Navigation
Configure Treemacs as a file and project explorer.

#+begin_src emacs-lisp
(leaf treemacs
  :ensure t
  :bind (:treemacs-mode-map
         ([mouse-1] . #'treemacs-single-click-expand-action))
  :custom
  ((treemacs-no-png-images . nil)
   (treemacs-filewatch-mode . t)
   (treemacs-follow-mode . t)
   (treemacs-indentation . 2)
   (treemacs-missing-project-action . 'remove))
  :hook
  (treemacs-mode-hook . (lambda ()
                          (setq mode-line-format nil)
                          (display-line-numbers-mode 0))))
#+end_src

*** Fonts
This section sets up fonts, icons, and ligatures for a modern and visually enhanced Emacs experience.

**** Default Font Setup
Defines the default font and applies it to all frames.

#+begin_src emacs-lisp
;; Check if a font exists on the system.
(defun font-exists-p (font)
  "Return t if FONT exists on the system."
  (member font (font-family-list)))

;; Set up the default font and icon fonts for a frame.
(defun font-setup (&optional frame)
  "Apply font settings to the FRAME or the current frame."
  (when (font-exists-p conf:font-family)
    (set-face-attribute 'default frame :family conf:font-family
                        :height (* conf:font-size 10))
    ;; Configure emoji fonts.
    (set-fontset-font t 'unicode
                      (font-spec :family "Noto Color Emoji") nil 'prepend)))

;; Set default font family and size.
(unless (boundp 'conf:font-family)
  (setq conf:font-family "JetBrains Mono"))
(unless (boundp 'conf:font-size)
  (setq conf:font-size 16))

;; Apply font settings in GUI or daemon mode.
(if (daemonp)
    (add-hook 'after-make-frame-functions #'font-setup)
  (font-setup))
#+end_src

**** Nerd Icons
Adds icons to file listings and UI elements using Nerd Fonts.

#+begin_src emacs-lisp
(leaf nerd-icons
  :if (display-graphic-p)
  :ensure t
  :config
  (unless (font-exists-p "Symbols Nerd Font Mono")
    (message "Nerd Font is not installed. Please install it for icon support.")))

;; Enable Nerd Icons in Dired mode.
(leaf nerd-icons-dired
  :if (display-graphic-p)
  :ensure t
  :hook (dired-mode-hook . nerd-icons-dired-mode))
#+end_src

**** Ligatures
Enable ligatures in programming modes for improved code readability.

#+begin_src emacs-lisp
(leaf ligature
  :ensure t
  :config
  ;; Define ligatures for programming modes.
  (ligature-set-ligatures 'prog-mode
                          '("->" "=>" "::" "===" "!=" "&&" "||" "|||"
                            ":::" "!!" "??" "-->" "<--" "->>" "<<-"))
  ;; Enable ligatures globally.
  (global-ligature-mode t))
#+end_src

*Fonts setting*

nerd-icons provides icons in file listings. emojify adds emoji support in Org mode. Font settings are applied across frames.

|abcdef ghijkl|
|ABCDEF GHIJKL|
|'";:-+ =/\~`?|
|∞≤≥∏∑∫ ×±⊆⊇|
|αβγδεζ ηθικλμ|
|ΑΒΓΔΕΖ ΗΘΙΚΛΜ|
|日本語 の美観|
|あいう えおか|
|アイウ エオカ|
|ｱｲｳｴｵｶ ｷｸｹｺｻｼ|


|hoge|hogeghoge|age|
|----------------------+----------+-------------------|
| 今日もいい天気ですね | お、等幅になった 👍 |

*Explanation:*

- **Font Setup:**
  - `font-setup`: Sets up the font family and size, and also configures a Unicode font for emoji support with `Noto Color Emoji`.
  - `font-exists-p`: A utility function to check whether a given font exists in the system.
  - `conf:font-family` and `conf:font-size` are used to define the default font and size.

- **Nerd Icons:**
  - `nerd-icons`: Uses the `nerd-icons` package to display icons in file listings. A warning message appears if the Nerd Font is not installed.
  - `nerd-icons-dired`: Displays icons in `dired-mode` buffers.

- **Ligature (Ligatures):**
  - `ligature`: Defines ligatures for programming modes (e.g., `->`, `=>`, `&&`) and enables ligatures globally.

*Purpose:*

This configuration sets up attractive fonts and visual enhancements in Emacs. It supports file navigation with icons, displays emojis in Org mode, and defines ligatures to improve code readability. The overall user experience is enhanced with a clean and modern look.


#+begin_src emacs-lisp
  ;;; Font Configuration for improved font management and icon support.

  (leaf Fonts
    :preface
    ;; Check if a font exists on the system.
    (defun font-exists-p (font)
      "Check if FONT exists on the system."
      (member font (font-family-list)))

    ;; Set up the default font and icon fonts for a specific frame.
    (defun font-setup (&optional frame)
      "Set up the default font and icon fonts for FRAME."
      (when (font-exists-p conf:font-family)
        (set-face-attribute 'default frame :family conf:font-family
                            :height (* conf:font-size 10))
        ;; Configure Unicode fonts, such as emojis.
        (set-fontset-font t 'unicode
                          (font-spec :family "Noto Color Emoji") nil 'prepend)))

    :config
    ;; Default font family and size.
    (unless (boundp 'conf:font-family)
      (setq conf:font-family "JetBrains Mono")) ;; Default font family
    (unless (boundp 'conf:font-size)
      (setq conf:font-size 16)) ;; Default font size

    ;; Ensure fonts are loaded correctly in daemon mode or GUI startup.
    (if (daemonp)
        (add-hook 'after-make-frame-functions #'font-setup)
      (font-setup))

    ;; Configure Nerd Fonts for icons and UI enhancements.
    (leaf nerd-icons
      :if (display-graphic-p)
      :ensure t
      :config
      (unless (font-exists-p "Symbols Nerd Font Mono")
        (message "Nerd Font is not installed. Some icons may not display correctly.")))

    ;; Enable Nerd Icons in Dired mode for file management.
    (leaf nerd-icons-dired
      :if (display-graphic-p)
      :ensure t
      :hook (dired-mode-hook . nerd-icons-dired-mode))

    ;; Enable ligatures (special character combinations) for programming modes.
    (leaf ligature
      :ensure t
      :config
      (ligature-set-ligatures 'prog-mode '("->" "=>" "::" "===" "!=" "&&" "||" "|||"
                                           ":::" "!!" "??" "-->" "<--" "->>" "<<-"))
      (global-ligature-mode t)))
#+end_src

*** Key Bindings
Custom key bindings for efficient navigation, editing, and window management.

| Key Sequence   | Command                     | Description |
|----------------+-----------------------------+-------------|
| C-c z          | hydra-text-scale/body       |             |
| C-/            | undo-fu-only-undo           |             |
| C-?            | help                        |             |
| C-h            | backward-delete-char        |             |
| C-z            | undo-fu-only-redo           |             |
| s-n            | next-buffer                 |             |
| s-p            | previous-buffer             |             |
| s-k            | kill-buffer-and-window      |             |
| C-.            | other-window                |             |
| M-o            | ace-window                  |             |
| s-.            | ace-swap-window             |             |
| s-j            | find-file-other-window      |             |
| s-o            | find-file-other-frame       |             |
| s-d            | delete-frame                |             |
| s-m            | (lambda () (interactive)    |             |
| s-r            | restart-emacs               |             |
| C-c 2          | my/toggle-window-split      |             |
| C-+            | text-scale-increase         |             |
| C--            | text-scale-decrease         |             |
| s-<up>         | beginning-of-buffer         |             |
| s-<down>       | end-of-buffer               |             |
| C-c ;          | comment-region              |             |
| C-c :          | uncomment-region            |             |
| C-c f o        | find-file                   |             |
| C-c f v        | find-file-read-only         |             |
| C-c C-r        | consult-ripgrep             |             |
| C-s            | consult-line                |             |
| C-c o a        | org-agenda                  |             |
| C-c o c        | org-capture                 |             |
| C-c o i        | org-roam-node-insert        |             |
| C-c o f        | org-roam-node-find          |             |
| C-c M-a        | align-regexp                |             |
| C-=            | er/expand-region            |             |
| M-x            | execute-extended-command    |             |
| C-x g          | magit-status                |             |

**** General Key Bindings
Define shortcuts for undo, help, and text scaling.

#+begin_src emacs-lisp
(leaf which-key
  :ensure t
  :global-minor-mode t)

(leaf undo-fu
  :ensure t)

(leaf hydra
  :ensure t
  :config
  ;; Text scaling hydra
  (defhydra hydra-text-scale (:hint nil :color red)
    "
^Text Scaling^
----------------------------
[_+_] Increase   [_-_] Decrease   [_0_] Reset
"
    ("+" text-scale-increase)
    ("-" text-scale-decrease)
    ("0" (text-scale-set 0) :color blue)
    ("q" nil "quit" :color blue))

  ;; Bind text scaling hydra to a key
  (leaf-keys
   (("C-c z" . hydra-text-scale/body))))
#+end_src

**** Editing and Buffer Operations
Shortcuts for text editing, buffer management, and scrolling.

#+begin_src emacs-lisp
(leaf-keys
 (("C-/"           . undo-fu-only-undo)         ;; Undo
  ("C-?"           . help)                      ;; Help
  ("C-h"           . backward-delete-char)      ;; Delete character
  ("C-z"           . undo-fu-only-redo)         ;; Redo
  ("s-n"           . next-buffer)               ;; Switch to next buffer
  ("s-p"           . previous-buffer)           ;; Switch to previous buffer
  ("s-k"           . kill-buffer-and-window)    ;; Kill buffer and close window
  ("C-+"           . text-scale-increase)       ;; Increase text size
  ("C--"           . text-scale-decrease)       ;; Decrease text size
  ("s-<up>"        . beginning-of-buffer)       ;; Jump to beginning of buffer
  ("s-<down>"      . end-of-buffer)))           ;; Jump to end of buffer
#+end_src

**** Window and Frame Management
Keybindings for managing windows and frames.

#+begin_src emacs-lisp
(leaf-keys
 (("C-."           . other-window)             ;; Switch to another window
  ("C-c 2"         . my/toggle-window-split)   ;; Toggle window split orientation
  ("M-o"           . ace-window)               ;; Switch windows using Ace Window
  ("s-."           . ace-swap-window)          ;; Swap windows
  ("s-d"           . delete-frame)             ;; Delete current frame
  ("s-j"           . find-file-other-window)   ;; Open file in another window
  ("s-o"           . find-file-other-frame)    ;; Open file in another frame
  ("s-m"           . (lambda () (interactive)  ;; Open a blank frame
                       (let ((frame (make-frame)))
                         (with-selected-frame frame
                           (switch-to-buffer (generate-new-buffer "untitled"))))))
  ("s-r"           . restart-emacs)))          ;; Restart Emacs
#+end_src

**** File and Search Operations
Bindings for file management and search tools.

#+begin_src emacs-lisp
(leaf-keys
 (("C-c f o"       . find-file)                ;; Open file
  ("C-c f v"       . find-file-read-only)      ;; Open file in read-only mode
  ("C-c C-r"       . consult-ripgrep)          ;; Search with ripgrep
  ("C-s"           . consult-line)))           ;; Search current buffer
#+end_src

**** Org Mode Shortcuts
Bindings for Org mode and Org-roam functions.

#+begin_src emacs-lisp
(leaf-keys
 (("C-c o a"       . org-agenda)               ;; Open Org agenda
  ("C-c o c"       . org-capture)              ;; Capture an Org entry
  ("C-c o i"       . org-roam-node-insert)     ;; Insert an Org-roam node
  ("C-c o f"       . org-roam-node-find)))     ;; Find an Org-roam node
#+end_src

**** Miscellaneous
Additional useful bindings.

#+begin_src emacs-lisp
(leaf-keys
 (("C-c M-a"       . align-regexp)             ;; Align text by regex
  ("C-="           . er/expand-region)         ;; Expand selection
  ("M-x"           . execute-extended-command) ;; Execute a command
  ("C-x g"         . magit-status)))           ;; Open Magit status
#+end_src

** Basic Configuration
This section includes fundamental settings for auto-saving, backup management, and visual enhancements.

*** Save and Backup
Manage backups, auto-saving, and save-related utilities.

#+begin_src emacs-lisp
;; Insert a timestamp before saving the buffer.
(defun my/save-buffer-wrapper ()
  "Insert a timestamp at the top of the buffer before saving."
  (interactive)
  (let ((tostr (concat "$Lastupdate: " (format-time-string "%Y/%m/%d %H:%M:%S") " $")))
    (save-excursion
      (goto-char (point-min))
      (while (re-search-forward "\\$Lastupdate\\([0-9/: ]*\\)?\\$" nil t)
        (replace-match tostr nil t)))))

(add-hook 'before-save-hook #'my/save-buffer-wrapper)

;; Configure auto-save and backup settings.
(leaf files
  :custom
  `((auto-save-file-name-transforms . '((".*" ,(concat no-littering-var-directory "backup") t)))
    (backup-directory-alist . '(("." . ,(concat no-littering-var-directory "backup"))))
    (delete-old-versions . t)
    (auto-save-visited-interval . 1))
  :global-minor-mode auto-save-visited-mode)
#+end_src

*** Session Management
Save and restore sessions, window configurations, and history.

#+begin_src emacs-lisp
(leaf *desktop
  :config
  (setq desktop-dirname (concat no-littering-var-directory "desktop")
        desktop-save 'if-exists
        desktop-auto-save-timeout 180
        desktop-restore-eager 10)
  (desktop-save-mode 1)  ;; Enable session saving
  (winner-mode 1))       ;; Enable window configuration undo/redo

(leaf savehist
  :custom `((savehist-file . ,(concat no-littering-var-directory "savehist")))
  :global-minor-mode t)
#+end_src

*** Editing Enhancements
Enable features for editing convenience and readability.

#+begin_src emacs-lisp
(leaf elec-pair
  :global-minor-mode electric-pair-mode)

(leaf paren
  :custom ((show-paren-delay . 0)
           (show-paren-style . 'expression))
  :global-minor-mode show-paren-mode)

(leaf puni
  :ensure t
  :global-minor-mode puni-global-mode)
#+end_src

*** System Utilities
Optimize performance and integrate macOS-specific settings.

#+begin_src emacs-lisp
(leaf gcmh
  :ensure t
  :global-minor-mode t)

(leaf exec-path-from-shell
  :ensure t
  :if (memq window-system '(mac ns))
  :custom ((exec-path-from-shell-check-startup-files . nil))
  :config
  (exec-path-from-shell-initialize))
#+end_src

*** Tree-Sitter
Enable syntax highlighting and grammar support using Tree-Sitter.

#+begin_src emacs-lisp
(leaf tree-sitter
  :ensure t
  :global-minor-mode global-tree-sitter-mode
  :hook (tree-sitter-after-on-hook . tree-sitter-hl-mode))

(leaf tree-sitter-langs
  :ensure t
  :config
  (tree-sitter-langs-install-grammars))
#+end_src

*** Miscellaneous
Organize Emacs configuration and handle remote file editing.

#+begin_src emacs-lisp
(leaf no-littering
  :ensure t
  :require t)

(leaf tramp
  :pre-setq
  `((tramp-persistency-file-name . ,(concat no-littering-var-directory "tramp"))
    (tramp-auto-save-directory . ,(concat no-littering-var-directory "tramp-autosave")))
  :custom
  `((tramp-default-method . "scp")
    (tramp-verbose . 10)))

(leaf startup
  :custom `((auto-save-list-file-prefix . ,(concat no-littering-var-directory "backup/.saves-"))))
#+end_src

** Utilties Package
*** Extra Utilities
Additional tools and utilities for editing, navigation, and programming support.

**** General Utilities
Enable clipboard integration, visual-line-mode, and useful extensions.

#+begin_src emacs-lisp
  (leaf visual-line-mode
    :global-minor-mode t)

  (leaf pbcopy
    :if (memq window-system '(mac ns))
    :ensure t)

  (leaf dired-filter :ensure t)
  (leaf expand-region :ensure t)
  (leaf aggressive-indent
    :ensure t
    :global-minor-mode global-aggressive-indent-mode)
  (leaf delsel
    :global-minor-mode delete-selection-mode)
#+end_src

**** Search and Navigation
Enhance search and navigation capabilities.

#+begin_src emacs-lisp
(leaf rg :ensure t)

(leaf dumb-jump
  :ensure t
  :hook ((xref-backend-functions . dumb-jump-xref-activate))
  :custom ((dumb-jump-force-searcher . 'rg)))

(leaf multiple-cursors :ensure t)
#+end_src

**** Version Control
Use Magit for version control and Git management.

#+begin_src emacs-lisp
(leaf magit :ensure t)
#+end_src

**** Syntax Checking and Spell Checking
On-the-fly syntax and spell checking.

#+begin_src emacs-lisp
(leaf flycheck
  :ensure t
  :global-minor-mode t)

(leaf flyspell
  :ensure t
  :hook (text-mode . flyspell-mode)
  :custom ((ispell-program-name . "aspell")))
#+end_src

**** Project Management
Use Projectile for efficient project navigation.

#+begin_src emacs-lisp
(leaf projectile
  :ensure t
  :global-minor-mode t)
#+end_src

**** Snippets
Enable Yasnippet for template-based coding.

#+begin_src emacs-lisp
(leaf yasnippet
  :ensure t
  :global-minor-mode yas-global-mode)

(leaf yasnippet-snippets
  :ensure t
  :after yasnippet)
#+end_src

**** Encryption
Enable encryption with EasyPG.

#+begin_src emacs-lisp
(leaf epa-file
  :config
  (epa-file-enable)
  (setq epa-pinentry-mode 'loopback)
  (custom-set-variables '(epg-gpg-program "gpg")))
#+end_src

**** Ellama Configuration
Integrate advanced AI capabilities with Ellama for language and translation tasks.

#+begin_src emacs-lisp
(leaf ellama
  :ensure t
  :after llm-ollama
  :init
  ;; Set default language to Japanese
  (setopt ellama-language "Japanese")

  ;; Define session directory for Ellama
  (setopt ellama-sessions-directory (concat no-littering-var-directory "ellama-sessions"))

  ;; Configure naming scheme for sessions
  (setopt ellama-naming-scheme 'ellama-generate-name-by-llm)

  ;; Set default provider
  (setopt ellama-provider
          (make-llm-ollama
           :chat-model "codestral:22b-v0.1-q4_K_S"
           :embedding-model "codestral:22b-v0.1-q4_K_S"))

  ;; Define translation provider
  (setopt ellama-translation-provider
          (make-llm-ollama
           :chat-model "llama3:8b-instruct-q8_0"
           :embedding-model "llama3:8b-instruct-q8_0"))

  ;; Define additional providers
  (setopt ellama-providers
          '(("codestral" . (make-llm-ollama
                            :chat-model "codestral:22b-v0.1-q4_K_S"
                            :embedding-model "codestral:22b-v0.1-q4_K_S"))
            ("gemma2" . (make-llm-ollama
                         :chat-model "gemma2:27b-instruct-q4_K_S"
                         :embedding-model "gemma2:27b-instruct-q4_K_S"))
            ("llama3.2-vision" . (make-llm-ollama
                                  :chat-model "llama3:8b-instruct-q8_0"
                                  :embedding-model "llama3:8b-instruct-q8_0"))))

  ;; Add error handling for unsupported providers
  (defun ellama-set-provider (provider-name)
    "Set the active provider for Ellama by PROVIDER-NAME."
    (interactive
     (list (completing-read "Select provider: "
                            (mapcar #'car ellama-providers))))
    (if-let ((provider (cdr (assoc provider-name ellama-providers))))
        (progn
          (setopt ellama-provider provider)
          (message "Ellama provider set to: %s" provider-name))
      (error "Provider '%s' not found in ellama-providers" provider-name)))

  :config
  ;; Ensure that Ellama initializes correctly
  (unless (and ellama-provider ellama-translation-provider)
    (message "Ellama configuration is incomplete. Verify providers.")))
#+end_src

**** Programming Utilities
Enhance programming with LSP support and utilities.

#+begin_src emacs-lisp
(leaf eglot
  :hook (prog-mode . eglot-ensure)
  :custom
  `((eglot-autoshutdown . t)
    (eglot-sync-connect . nil)
    (eglot-events-buffer-size . 200))
  :bind (:eglot-mode-map
         ("C-c h" . eglot-help-at-point)
         ("C-c r" . eglot-rename)
         ("C-c a" . eglot-code-actions)
         ("C-c d" . flymake-show-buffer-diagnostics)))

(leaf lsp-mode
  :ensure t
  :hook ((python-mode . lsp)
         (rust-mode . lsp)
         (go-mode . lsp)
         (js-mode . lsp)
         (typescript-mode . lsp)
         (c-mode . lsp)
         (c++-mode . lsp))
  :custom
  `((lsp-enable-snippet . t)
    (lsp-idle-delay . 0.5)
    (lsp-headerline-breadcrumb-enable . t)
    (lsp-prefer-flymake . nil))
  :config
  (setq lsp-completion-provider :capf))

(leaf lsp-ui
  :ensure t
  :after lsp-mode
  :custom
  `((lsp-ui-doc-enable . t)
    (lsp-ui-sideline-enable . t)
    (lsp-ui-sideline-show-hover . t)
    (lsp-ui-sideline-show-code-actions . t)
    (lsp-ui-sideline-show-diagnostics . t)))
#+end_src

**** Completion Framework
/This configuration script sets up a sophisticated *completion framework* for Emacs, focusing on efficient, flexible, and user-friendly completion across various contexts./

#+begin_src emacs-lisp
;;; Completion Framework Configuration

(leaf completion-settings
  :config

  ;; Prescient: Sort and filter candidates based on usage history
  (leaf prescient
    :ensure t
    :custom
    ((prescient-aggressive-file-save . t))  ;; Automatically save history
    :global-minor-mode prescient-persist-mode)

  ;; Vertico: Vertical completion menu
  ;; Best suited for commands like M-x, file completion, and more.
  (leaf vertico
    :ensure t
    :global-minor-mode vertico-mode
    :custom
    ((vertico-count . 15))  ;; Show up to 15 candidates in the menu
    :config
    ;; Posframe integration for cleaner UI
    (leaf vertico-posframe
      :ensure t
      :custom
      ((vertico-posframe-border-width . 2)
       (vertico-posframe-parameters . '((left-fringe . 4)
                                        (right-fringe . 4))))
      :global-minor-mode vertico-posframe-mode))

  ;; Marginalia: Annotate candidates with additional context
  (leaf marginalia
    :ensure t
    :global-minor-mode marginalia-mode)

  ;; Consult: Enhanced search and navigation commands
  ;; Adds better search capabilities to complement Vertico.
  (leaf consult
    :ensure t
    :custom
    ((xref-show-xrefs-function . #'consult-xref)
     (xref-show-definitions-function . #'consult-xref)))

  ;; Embark: Context-aware actions for completion candidates
  ;; Provides detailed actions for selected candidates in Vertico.
  (leaf embark
    :ensure t
    :custom
    ((prefix-help-command . #'embark-prefix-help-command))
    :config
    ;; Integrate Embark with Consult for richer functionality
    (leaf embark-consult
      :ensure t
      :after (embark consult)
      :hook (embark-collect-mode . consult-preview-at-point-mode)))

  ;; Corfu: Popup-based completion for `completion-at-point`
  ;; Suitable for in-buffer completions, e.g., programming contexts.
  (leaf corfu
    :ensure t
    :init
    (global-corfu-mode)  ;; Enable Corfu globally
    :custom
    ((corfu-auto . t)          ;; Enable auto-completion
     (corfu-auto-delay . 0)    ;; No delay before showing candidates
     (corfu-auto-prefix . 2)   ;; Trigger completion after 2 characters
     (corfu-cycle . t))        ;; Cycle through candidates
    :config
    ;; Add icons to completion candidates for better visualization
    (leaf kind-icon
      :ensure t
      :after corfu
      :custom
      ((kind-icon-default-face . 'corfu-default))
      :config
      (add-to-list 'corfu-margin-formatters #'kind-icon-margin-formatter)))

  ;; Cape: Additional completion sources for Corfu
  ;; Extend completion with extra sources like file and keyword completions.
  (leaf cape
    :ensure t
    :init
    ;; Add sources for file, dabbrev, and keyword completion
    (add-to-list 'completion-at-point-functions #'cape-file)
    (add-to-list 'completion-at-point-functions #'cape-dabbrev)
    (add-to-list 'completion-at-point-functions #'cape-keyword))

  ;; Orderless: Fuzzy matching for completion
  ;; Improve matching logic to handle partial and unordered patterns.
  (leaf orderless
    :ensure t
    :custom
    ((completion-styles . '(orderless basic))  ;; Enable fuzzy matching
     (completion-category-overrides . '((file (styles . (partial-completion))))))))
#+end_src

*** Org-mode
**** Org-mode Core Setup
Core Org-mode Configuration
This section sets up essential Org-mode features, including directories

#+begin_src emacs-lisp
  ;;; Org-mode Setup
  (leaf Org-mode
    :config
    ;; Org-mode document management and editing
    (leaf org
      :leaf-defer t
      :preface
      (defvar warning-suppress-types nil)
      (unless (boundp 'my:d:cloud)
        (setq my:d:cloud (concat no-littering-var-directory "./")))

      ;; Return list of opened Org mode buffer files
      (defun org-buffer-files ()
        "Return list of opened Org mode buffer files."
        (mapcar (function buffer-file-name)
                (org-buffer-list 'files)))

      ;; Show Org buffer file in current window
      (defun show-org-buffer (file)
        "Show an org-file FILE in the current buffer."
        (interactive)
        (if (get-buffer file)
            (let ((buffer (get-buffer file)))
              (switch-to-buffer buffer)
              (message "%s" file))
          (find-file (concat org-directory "/" file))))

      :custom
      (org-support-shift-select . t)

      :init
      (setq org-directory (expand-file-name "Org/" my:d:cloud))
      (unless (file-exists-p org-directory)
        (make-directory org-directory))
      (setq org-startup-indented t
            org-ellipsis " ▾"
            org-hide-leading-stars t)
      (setq warning-suppress-types (append warning-suppress-types '((org-element-cache))))

      :bind
      (("C-M--" . #'(lambda () (interactive)
                      (show-org-buffer "gtd.org")))
       ("C-M-^" . #'(lambda () (interactive)
                      (show-org-buffer "notes.org")))
       ("C-M-~" . #'(lambda () (interactive)
                      (show-org-buffer "kb.org"))))

      :config
      (setq org-agenda-files (list org-directory)
            org-default-notes-file "notes.org"
            org-log-done 'time
            org-startup-truncated nil
            org-startup-folded 'content
            org-use-speed-commands t
            org-enforce-todo-dependencies t)

      (remove (concat org-directory "/archives") org-agenda-files)

      (setq org-todo-keywords
            '((sequence "TODO(t)" "SOMEDAY(s)" "WAITING(w)" "|" "DONE(d)" "CANCELED(c@)")))

      (setq org-refile-targets
            (quote ((nil :maxlevel . 3)
                    (org-buffer-files :maxlevel . 1)
                    (org-agenda-files :maxlevel . 3))))

      (setq org-capture-templates
            '(("t" "Todo" entry (file+headline "gtd.org" "Inbox")
               "* TODO %?\n %i\n %a")
              ("n" "Note" entry (file+headline "notes.org" "Notes")
               "* %?\nEntered on %U\n %i\n %a")
              ("j" "Journal" entry (function org-journal-find-location)
               "* %(format-time-string org-journal-time-format)%^{Title}\n%i%?")
              ("m" "Meeting" entry (file "meetings.org")
               "* MEETING with %? :meeting:\n  %U\n  %a")
              )))
#+end_src

**** Org-mode Visual Enhancements
Visual Customizations for Org-mode
Enhance Org documents with better bullets and headings.

#+begin_src emacs-lisp
  (leaf org-bullets
    :ensure t
    :hook (org-mode . org-bullets-mode))

  (leaf org-superstar
    :after org
    :ensure t
    :custom
    (org-superstar-headline-bullets-list . '("◉" "★" "○" "▷" "" ""))
    :hook
    (org-mode-hook (lambda () (org-superstar-mode 1))))
#+end_src

**** Additional Org-related packages and configuration

#+begin_src emacs-lisp
  (leaf org-latex
    :after org
    :custom
    (org-latex-packages-alist '(("" "graphicx" t)
                                ("" "longtable" nil)
                                ("" "wrapfig" nil)))
    (org-latex-pdf-process '("pdflatex -interaction nonstopmode -output-directory %o %f"
                             "pdflatex -interaction nonstopmode -output-directory %o %f")))

  (leaf ob
    :after org
    :defun org-babel-do-load-languages
    :config
    (org-babel-do-load-languages
     'org-babel-load-languages
     '((emacs-lisp . t)
       (shell . t)
       (python . t)
       (R . t)
       (ditaa . t)
       (plantuml . t))))

  (leaf org-journal
    :after org
    :ensure t
    :config
    (setq org-journal-dir (concat org-directory "/journal")
          org-journal-enable-agenda-integration t)
    (defun org-journal-find-location ()
      ;; Open today's journal and position point at the top-level heading.
      (org-journal-new-entry t)
      (goto-char (point-min))))

  ;; Other Org-related extensions and tools
  (leaf org-cliplink :after org :ensure t :bind ("C-x p i" . org-cliplink))
  (leaf org-download
    :after org
    :ensure t
    :config
    (setq-default org-download-image-dir (concat org-directory "/pictures")))
  (leaf org-web-tools :after org :ensure t)
  (leaf toc-org
    :after org markdown-mode
    :ensure t
    :config
    (add-hook 'org-mode-hook 'toc-org-enable)
    (add-hook 'markdown-mode-hook 'toc-org-mode)
    (define-key markdown-mode-map (kbd "\C-c\C-o") 'toc-org-markdown-follow-thing-at-point))

  ;; Org-roam for knowledge management
  (leaf org-roam
    :ensure t
    :after org
    :config
    (setq org-roam-directory (concat org-directory "/org-roam"))
    (org-roam-db-autosync-mode))

  ;; Export Org files to Hugo markdown format using ox-hugo
  (leaf ox-hugo
    :ensure t
    :require t
    :after ox
    :custom ((org-hugo-front-matter-format . "toml")))
  ;; ox-hugo-capture
  (leaf *ox-hugo--capture
    :require org-capture
    :defvar (org-capture-templates)
    :config
    (add-to-list 'org-capture-templates
                 '("b" "Create new blog post" entry
                   (file+headline my-capture-blog-file "blog")
                   "** TODO %?
    :PROPERTIES:
    :EXPORT_FILE_NAME: %(apply #'format \"%s-%s-%s\"
    (format-time-string \"%Y\")
    (let ((sha1 (sha1 (shell-command-to-string \"head -c 1024 /dev/urandom\"))))
    (cl-loop for (a b c d) on (cdr (split-string sha1 \"\")) by #'cddddr repeat 2 collect (concat a b c d))))
    :EXPORT_DATE:
    :EXPORT_HUGO_TAGS:
    :EXPORT_HUGO_CATEGORIES:
    :EXPORT_HUGO_LASTMOD:
    :EXPORT_HUGO_CUSTOM_FRONT_MATTER: :pin false
    :END:
    \n
    ")))
  (leaf markdown-mode
    :ensure t
    :mode ("\\.md\\'" . markdown-mode)))
#+end_src

*** Miscellaneous Helper Functions
/This section contains a collection of utility functions for managing windows, desktops, buffers, and keybindings in Emacs. These functions are designed to enhance usability, optimize workflows, and handle edge cases gracefully./

#+begin_src emacs-lisp
  ;;; Custom utility functions for window, desktop, and buffer management.

  ;; Run TASK asynchronously and handle any errors gracefully.
  (defun my/safe-run-async (task)
    "Run TASK asynchronously and handle any errors gracefully."
    (run-at-time 0 nil
                 (lambda ()
                   (condition-case err
                       (funcall task)
                     (error (message "An error occurred during asynchronous execution: %s" err))))))

  ;; Save and restore the window layout
  (defvar my/saved-window-config nil
    "Stores the current window configuration for later restoration.")

  (defun my/save-window-layout ()
    "Save the current window configuration to `my/saved-window-config`."
    (interactive)
    (setq my/saved-window-config (current-window-configuration))
    (message "Window configuration saved."))

  (defun my/restore-window-layout ()
    "Restore the saved window configuration.
  If no configuration has been saved, notify the user."
    (interactive)
    (if my/saved-window-config
        (progn
          (set-window-configuration my/saved-window-config)
          (message "Window configuration restored."))
      (message "No saved window configuration found.")))

  ;; Toggle the dedicated status of the selected window
  (defun my/toggle-window-dedication ()
    "Toggle the dedicated status of the currently selected window.
  A dedicated window will not display other buffers."
    (interactive)
    (let ((window (selected-window)))
      (set-window-dedicated-p window (not (window-dedicated-p window)))
      (message "Window dedication %s"
               (if (window-dedicated-p window) "enabled" "disabled"))))

  ;; Save and restore the desktop session asynchronously
  (leaf desktop
    :custom
    `((desktop-dirname . ,(concat no-littering-var-directory "desktop"))
      (desktop-save . 'if-exists)
      (desktop-auto-save-timeout . 180)
      (desktop-restore-eager . 10))
    :hook ((kill-emacs-hook . desktop-save-in-desktop-dir)
           (emacs-startup-hook . desktop-read))
    :config
    (desktop-save-mode 1))

  ;; Delete backup files older than 7 days asynchronously
  (defun my/delete-old-backups ()
    "Delete old backup files asynchronously."
    (interactive)
    (my/safe-run-async
     (lambda ()
       (let ((backup-dir (concat no-littering-var-directory "backup/")))
         (when (file-directory-p backup-dir)
           (dolist (file (directory-files backup-dir t "\\`[^.]"))
             (when (and (file-regular-p file)
                        (> (- (float-time (current-time))
                              (float-time (nth 5 (file-attributes file))))
                           (* 7 24 60 60))) ;; Delete files older than 7 days
               (delete-file file))))))))
  (add-hook 'emacs-startup-hook #'my/delete-old-backups)

  ;; Automatically enable or disable `view-mode` based on buffer's read-only status.
  (defun my/enable-view-mode-on-read-only ()
    "Enable `view-mode` if the buffer is read-only, disable otherwise."
    (if buffer-read-only
        (view-mode 1)
      (view-mode -1)))
  (add-hook 'read-only-mode-hook #'my/enable-view-mode-on-read-only)

  ;; Toggle line number display
  (defun my/toggle-linum-lines ()
    "Toggle line number display using `display-line-numbers-mode`."
    (interactive)
    (display-line-numbers-mode 'toggle))

  ;; Toggle window split between horizontal and vertical
  (defun my/toggle-window-split ()
    "Toggle the window split between horizontal and vertical.
  This function only works when exactly two windows are open."
    (interactive)
    (if (= (count-windows) 2)
        (let* ((this-win-buffer (window-buffer))
               (next-win-buffer (window-buffer (next-window)))
               (splitter (if (window-combined-p)
                             'split-window-vertically
                           'split-window-horizontally)))
          (delete-other-windows)
          (let ((first-win (selected-window)))
            (funcall splitter)
            (set-window-buffer (selected-window) this-win-buffer)
            (set-window-buffer (next-window) next-win-buffer)
            (select-window first-win)))
      (message "This function only works when exactly two windows are open.")))

  ;; Find and display keybinding conflicts
  (defun my/find-keybinding-conflicts ()
    "Detect and display keybinding conflicts across active keymaps."
    (interactive)
    (let ((conflicts (make-hash-table :test 'equal))
          (buffer-name "*Keybinding Conflicts*"))
      (mapatoms (lambda (keymap)
                  (when (and (boundp keymap) (keymapp (symbol-value keymap)))
                    (map-keymap
                     (lambda (key cmd)
                       (when (commandp cmd)
                         (let ((existing (gethash key conflicts)))
                           (if existing
                               (puthash key (cons cmd existing) conflicts)
                             (puthash key (list cmd) conflicts)))))
                     (symbol-value keymap)))))
      (with-current-buffer (get-buffer-create buffer-name)
        (read-only-mode -1)
        (erase-buffer)
        (insert "Keybinding Conflicts:\n\n")
        (maphash (lambda (key cmds)
                   (when (> (length cmds) 1)
                     (insert (format "%s => %s\n"
                                     (key-description key)
                                     (mapconcat #'symbol-name cmds ", ")))))
                 conflicts)
        (read-only-mode 1))
      (switch-to-buffer buffer-name)))

  ;; Open the selected file or directory in another window in Dired mode.
  (defun my/dired-view-file-other-window ()
    "Open the selected file or directory in another window.
  If the target is a directory, navigate to it.
  If the target is a file, open it in read-only mode in another window."
    (interactive)
    (let ((file (dired-get-file-for-visit)))
      (if (file-directory-p file)
          (or (and (cdr dired-subdir-alist)
                   (dired-goto-subdir file))
              (dired file))
        (view-file-other-window file))))

  ;; Open the current buffer in Visual Studio Code at the current line and column.
  (defun my/open-by-vscode ()
    "Open the current file in Visual Studio Code asynchronously."
    (interactive)
    (when (buffer-file-name)
      (async-shell-command
       (format "code -r -g %s:%d:%d"
               (buffer-file-name)
               (line-number-at-pos)
               (current-column)))))

  ;; Display detailed information about the current Emacs build.
  (defun my/print-build-info ()
    "Display detailed information about the current Emacs build."
    (interactive)
    (switch-to-buffer (get-buffer-create "*Build info*"))
    (let ((buffer-read-only nil))
      (erase-buffer)
      (insert
       (format "- GNU Emacs %s\n\n|Commit|%s|\n|Branch|%s|\n|System|%s|\n|Date|%s|\n"
               emacs-version
               (emacs-repository-get-version)
               (when (version< "27.0" emacs-version)
                 (emacs-repository-get-branch))
               system-configuration
               (format-time-string "%Y-%m-%d %T (%Z)" emacs-build-time)))
      (insert (format "|Patch|%s ns-inline.patch|\n"
                      (if (boundp 'mac-ime--cursor-type) "with" "without")))
      (insert
       (format "|Features|%s|\n" system-configuration-features))
      (insert
       (format "|Options|%s|\n"  system-configuration-options))
      )
    (view-mode))
  (defun my/parse-leaf-config (file)
    "Parse the FILE to extract `leaf-keys` and `leaf-bind` data."
    (with-temp-buffer
      ;; Load the content of the file into the temporary buffer.
      (insert-file-contents file)
      (let ((keybinds '())) ;; Initialize an empty list to store keybinding data.
        (condition-case err
            (while t
              ;; Read each S-expression (sexpr) from the buffer.
              (let ((sexpr (read (current-buffer))))
                ;; Check if the expression starts with `leaf-keys` or `leaf-bind`.
                (when (and (listp sexpr)
                           (memq (car sexpr) '(leaf-keys leaf-bind)))
                  ;; Iterate over each keybinding pair in the expression.
                  (dolist (keybind (cdr sexpr))
                    (let ((keyseq (car keybind)) ;; The key sequence (e.g., "C-x C-f").
                          (func (cdr keybind))  ;; The associated command (e.g., `find-file`).
                          (desc ""))           ;; Default description is empty.
                      ;; Add the key sequence, command, and description to the list.
                      (push (list keyseq func desc) keybinds))))))
          ;; Handle the end-of-file (EOF) condition gracefully.
          (end-of-file))
        ;; Return the collected keybinding data.
        keybinds)))

  (defun my/generate-org-keybind-table-from-config (input-file output-file)
    "Generate an Org table of keybinds from INPUT-FILE and write it to OUTPUT-FILE."
    (interactive "fInput File: \nFOutput Org File: ")
    ((keybinds (my/parse-leaf-config input-file))) ;; Parse the input file for keybind data.
    (with-current-buffer (find-file-noselect output-file)
      ;; Clear the buffer before writing the Org table.
      (erase-buffer)
      ;; Write the Org file header and table structure.
      (insert "#+TITLE: Keybinds and Functions\n\n")
      (insert "* Keybind Table\n")
      (insert "| Key Sequence | Command          | Description         |\n")
      (insert "|--------------+------------------+---------------------|\n")
      ;; Populate the Org table with collected keybinding data.
      (dolist (keybind (reverse keybinds)) ;; Reverse the list to maintain the original order.
        (let ((keyseq (nth 0 keybind))  ;; The key sequence.
              (func (nth 1 keybind))   ;; The associated command.
              (desc (nth 2 keybind))) ;; The description (default is empty).
          ;; Write a row for each keybinding.
          (insert (format "| %s | %s | %s |\n" keyseq func desc))))
      ;; Save the Org file to disk.
      (save-buffer))
    ;; Notify the user that the file has been written.
    (message "Org table written to %s" output-file))

  ;; Automatically delete trailing whitespace before saving a file.
  (add-hook 'before-save-hook 'delete-trailing-whitespace)

  ;; Enable clickable URLs in programming and text modes.
  (add-hook 'prog-mode-hook 'goto-address-prog-mode)
  (add-hook 'text-mode-hook 'goto-address-mode)
#+end_src

** Footer
#+begin_src emacs-lisp

  (provide 'README)
  ;;; README.el ends here
#+end_src

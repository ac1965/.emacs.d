# -*- mode: org; coding: utf-8; -*-

#+TITLE: Modern Emacs Configuration
#+AUTHOR: YAMASHITA, Takao
#+EMAIL: tjy1965@gmail.com
#+LANGUAGE: en
#+OPTIONS: toc:3 num:t
#+STARTUP: overview
#+PROPERTY: header-args :results silent :exports code :mkdirp yes :padline no :tangle no
#+PROPERTY: header-args:emacs-lisp :lexical t :noweb no-export

* Introduction
:PROPERTIES:
  :CUSTOM_ID: introduction
  :END:

A modern, literate Emacs configuration using Org Mode's Babel format, emphasizing performance, language server integration, AI assistance, and productivity.

** Features
:PROPERTIES:
:CUSTOM_ID: features
:END:

- *Performance & Native Compilation* - JIT compilation with optimized settings, intelligent GC via GCMH, and async compilation
- *Language Server Protocol* - Configurable LSP backends (Eglot/LSP-Mode) with automatic server management
- *AI Integration* - Aidermacs with vterm backend supporting GPT-4, Claude 3.5 Sonnet, and OpenRouter APIs
- *Modern UI & Editing* - Tree-Sitter syntax highlighting, ef-themes, Nerd Icons, and advanced completion
- *Productivity Tools* - GTD-style Org workflow, Org-roam networked notes, and modern styling

[[file:demo.png]]

** Tangling Policy
:PROPERTIES:
:CUSTOM_ID: tangling-policy
:END:
_For documentation only; block-level :tangle always takes precedence._

*** Top-level init files
- =early-init.el= :: Startup performance & low-level toggles
  (GC, file-name-handler, native-comp, UI tweaks)
- =init.el= :: Package bootstrap + leaf.el initialization
  + =(require 'modules)=

*** Modular configuration under =lisp/=
**** core/ — Core framework and base behavior
- =general.el= :: General settings, hydra, keybindings, Dired, TRAMP, auth
- =tools.el=   :: Navigation helpers, Dired helper, Tree-sitter integration, external tools
- =utils.el=   :: Auto-tangle, scratch buffer, revert, lexical-binding helpers

**** ui/ — Appearance and visual UX
- =ui-font.el=     :: Font setup, ligatures
- =ui-theme.el=    :: Theme management (ef-themes, spacious-padding)
- =ui-modeline.el= :: Doom-modeline, minions, time, battery
- =ui-window.el=   :: Fullscreen, zoom, tab-bar/line, window layouts
- =ui-treemacs.el= :: Sidebar project/file explorer

**** completion/ — Minibuffer and completion stack
- =completion-core.el=     :: prescient, orderless styles
- =completion-vertico.el=  :: vertico, posframe, marginalia
- =completion-consult.el=  :: consult, xref integration
- =completion-embark.el=   :: embark + consult integration
- =completion-corfu.el=    :: corfu, kind-icon, cape
- =completion-icons.el=    :: nerd-icons integration

**** org/ — Org ecosystem
- =org-core.el=       :: GTD workflow, agenda, capture, refiling
- =org-visual.el=     :: org-modern, org-superstar, visual tweaks
- =org-extensions.el= :: org-journal, org-roam, org-download, toc-org, cliplink
- =org-export.el=     :: LaTeX export, Hugo, Markdown

**** dev/ — Development support
- =dev-lsp.el=    :: eglot / lsp-mode integration
- =dev-ai.el=     :: Aidermacs (OpenRouter/OpenAI integration)
- =dev-term.el=   :: vterm integration
- =dev-build.el=  :: Make, compile, ansi-color
- =dev-docker.el= :: Dockerfile, docker.el, tramp-container

**** vcs/ — Version control
- =vcs-magit.el=  :: Magit
- =vcs-gutter.el= :: git-gutter, diff-hl
- =vcs-forge.el=  :: Forge (GitHub/GitLab)

**** utils/ — Cross-cutting helpers
- =utils-functions.el= :: Directory creation, safe-load
- =utils-scratch.el=   :: Scratch buffer management
- =utils-backup.el=    :: Backup/auto-save cleanup
- =utils-async.el=     :: Async task wrapper

**** Other
- =modules.el= :: Centralized module loader (requires everything above in order)

*** Personal overrides
- =personal/= :: Optional per-user, per-machine overrides
  └─ =<username>.el=
- =user.el=  :: Personal entry point (optional, loaded last if present)

** Build pipeline
- =Makefile= :: Reproducible pipeline (=tangle=, =clean=, =compile=)

** Installation
:PROPERTIES:
   :CUSTOM_ID: installation
   :END:

*** Prerequisites
:PROPERTIES:
:CUSTOM_ID: prerequisites
:END:

- **Required**
  - Emacs **30.0+** with native compilation (`--with-native-compilation`)
  - Git
  - GNU Make
  - GCC **10+** with `libgccjit`

- **Optional but Recommended**
  - ripgrep (`rg`) → faster project-wide search
  - aspell or hunspell → spell checking
  - pass + GnuPG → password and auth-source integration
  - Homebrew (macOS only) → for consistent toolchain installation

*** Building Emacs

Use the provided build script:
[[https://github.com/ac1965/dotfiles/blob/master/.local/bin/build-emacs.sh][build-emacs.sh]]

#+begin_src shell
build-emacs.sh --native-compilation
#+end_src

*** Quick Start

1. Clone the repository:
   #+begin_src shell
   git clone --depth 1 https://github.com/ac1965/.emacs.d ~/.emacs.d
   #+end_src

2. Tangle configuration:
   #+begin_src shell
   cd ~/.emacs.d/
   EMACS=/Applications/Emacs.app/Contents/MacOS/Emacs make
   #+end_src

*** Makefile

#+begin_src text :tangle Makefile :comments no
  # Makefile for Emacs config build
  # Emacs 30+, Org Babel (tangle), byte-compilation
  # Safe, minimal, maintainable

  # Variables
  EMACS       ?= emacs
  ORG         ?= README.org
  LISPDIR     ?= lisp
  PERSONALDIR ?= personal
  ELFILES     = $(wildcard $(LISPDIR)/*.el) $(wildcard $(PERSONALDIR)/*.el)
  ELCFILES    = $(ELFILES:.el=.elc)

  # Default target
  all: tangle

  # Tangle all .el files from README.org
  tangle: $(ORG)
  	$(EMACS) --batch -Q \
  		--eval "(require 'org)" \
  		--eval "(org-babel-tangle-file \"$(ORG)\")"

  # Byte-compile all tangled .el files
  compile: tangle $(ELCFILES)

  $(LISPDIR)/%.elc: $(LISPDIR)/%.el
  	$(EMACS) --batch -Q \
  		--eval "(byte-compile-file \"$<\")"

  $(PERSONALDIR)/%.elc: $(PERSONALDIR)/%.el
  	$(EMACS) --batch -Q \
  		--eval "(byte-compile-file \"$<\")"

  # Remove compilation artifacts
  clean:
  	rm -fr $(LISPDIR) $(PERSONALDIR)

  .PHONY: all tangle compile clean
#+end_src

*** System Information

**** Apple Silicon (Primary)
- GNU Emacs *31.0.50*

|Property|Value|
|--------|-----|
|Commit|021b7065bb734ca5e880f2fb74ddd48ffed4185a|
|Branch|master|
|System|aarch64-apple-darwin24.6.0|
|Date|2025-09-28 09:03:05 (JST)|
|Patch|N/A ns-inline.patch|
|Features|ACL DBUS GLIB GNUTLS LCMS2 LIBXML2 MODULES NATIVE_COMP NOTIFY KQUEUE NS PDUMPER PNG RSVG SQLITE3 THREADS TOOLKIT_SCROLL_BARS TREE_SITTER WEBP XIM ZLIB|
|Options|--with-native-compilation --with-gnutls=ifavailable --with-json --with-modules --with-tree-sitter --with-xml2 --with-librsvg --with-mailutils --with-native-image-api --with-ns CPPFLAGS=-I/opt/homebrew/opt/llvm/include 'LDFLAGS=-L/opt/homebrew/opt/llvm/lib -L/opt/homebrew/opt/llvm/lib/c++ -Wl,-rpath,/opt/homebrew/opt/llvm/lib/c++'|

**** Intel (Secondary)
- GNU Emacs *31.0.50*

|Property|Value|
|--------|-----|
|Commit|aa12cebaa684d7b3ea7e131666d33bcc71b45625|
|Branch|master|
|System|x86_64-apple-darwin24.4.0|
|Date|2025-03-23 10:35:38 (JST)|
|Patch|N/A ns-inline.patch|
|Features|ACL DBUS GIF GLIB GMP GNUTLS JPEG LCMS2 LIBXML2 MODULES NATIVE_COMP NOTIFY KQUEUE NS PDUMPER PNG RSVG SQLITE3 THREADS TIFF TOOLKIT_SCROLL_BARS TREE_SITTER WEBP XIM XWIDGETS ZLIB|
|Options|--with-native-compilation --with-gnutls=ifavailable --with-json --with-modules --with-tree-sitter --with-xml2 --with-xwidgets --with-librsvg CFLAGS=-I/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include CPPFLAGS=-I/usr/local/opt/llvm/include 'LDFLAGS=-L/usr/local/opt/llvm/lib -L/usr/local/opt/llvm/lib/c++ -Wl,-rpath,/usr/local/opt/llvm/lib/c++'|
* Configuration Files
:PROPERTIES:
:CUSTOM_ID: structure
:END:

This Emacs configuration is modular and organized for **Emacs 30+**.

- `early-init.el` → startup optimizations & directories
- `init.el` → package bootstrap & base settings
- `lisp/` → modular configs (core, ui, completion, org, dev, vcs, utils)
- `personal/` → user-specific settings

** Core Setup
:PROPERTIES:
:CUSTOM_ID: core
:END:

*** early-init.el
:PROPERTIES:
:CUSTOM_ID: early-init
:END:

*Purpose*
Provide early, minimal startup optimizations and directory scaffolding for a modular setup using `straight.el` + `leaf.el`.

*What it does*
- Disables `package.el` auto-activation.
- Temporarily widens GC and disables file-name handlers; restores later.
- Creates cache/var/etc/eln/treesit directories defensively.
- Configures native-comp warnings and eln path.
- On macOS, adjusts `LIBRARY_PATH` if Homebrew `libgccjit` exists.
- Disables heavy UI toggles after first frame.
- Points `straight` base dir to `.cache/`.

*Notes*
- All originals are restored.
- Brew detection is guarded and safe.
- Directory creation is tolerant of errors.

#+begin_src emacs-lisp :tangle early-init.el
;;; early-init.el --- Early initialization -*- lexical-binding: t; -*-

;; Copyright (c) 2021-2025
;; Author: YAMASHITA, Takao
;; License: GNU GPL v3 or later

;;; Commentary:
;; Early startup optimizations and directory setup for Emacs 30+.
;; Safe, reversible, and compatible with straight.el + leaf.el.

;;; Code:

(setopt package-enable-at-startup nil)

;; Save & widen GC limits during startup, restore later
(defvar my:orig:gc-cons-threshold gc-cons-threshold)
(defvar my:orig:gc-cons-percentage gc-cons-percentage)
(setopt gc-cons-threshold most-positive-fixnum
        gc-cons-percentage 0.6)
(add-hook 'emacs-startup-hook
          (lambda ()
            (setopt gc-cons-threshold my:orig:gc-cons-threshold
                    gc-cons-percentage my:orig:gc-cons-percentage)))

;; Suppress file-name-handler overhead during init
(defvar my:orig:file-name-handler-alist file-name-handler-alist)
(setq file-name-handler-alist nil)
(add-hook 'emacs-startup-hook
          (lambda ()
            (setq file-name-handler-alist my:orig:file-name-handler-alist)))

(defun my/ensure-directory-exists (dir)
  "Ensure DIR exists; create if necessary."
  (unless (file-directory-p dir)
    (condition-case err
        (make-directory dir t)
      (error (warn "Failed to create directory: %s (%s)" dir (error-message-string err))))))

;; Define directory layout
(defvar my:d (or (and load-file-name
                      (file-name-directory (file-chase-links load-file-name)))
                 user-emacs-directory))

(defvar my:d:cache   (expand-file-name ".cache/"       my:d))
(defvar my:d:etc     (expand-file-name ".etc/"         my:d))
(defvar my:d:var     (expand-file-name ".var/"         my:d))
(defvar my:d:lisp    (expand-file-name "lisp/"         my:d))
(defvar my:d:eln     (expand-file-name "eln-cache/"    my:d:cache))
(defvar my:d:treesit (expand-file-name "tree-sitter/"  my:d:var))
(defvar my:d:treesit-build (expand-file-name "treesit-build/" my:d:cache))
(defvar my:f:custom  (expand-file-name "custom.el"     my:d:etc))

(dolist (dir (list my:d:cache my:d:etc my:d:var my:d:lisp
                   my:d:eln my:d:treesit my:d:treesit-build))
  (my/ensure-directory-exists dir))

(add-to-list 'load-path my:d:lisp)

;; Native compilation setup
(when (featurep 'native-compile)
  (setopt native-comp-async-report-warnings-errors 'silent)
  (add-to-list 'native-comp-eln-load-path my:d:eln))

;; macOS + Homebrew libgccjit support
(when (and (eq system-type 'darwin) (executable-find "brew"))
  (condition-case err
      (let* ((prefix (string-trim (shell-command-to-string "brew --prefix")))
             (brew-libgccjit (expand-file-name "lib/gcc/current" prefix)))
        (when (file-directory-p brew-libgccjit)
          (setenv "LIBRARY_PATH"
                  (concat brew-libgccjit
                          (when-let ((orig (getenv "LIBRARY_PATH")))
                            (concat ":" orig))))))
    (error (message "[early-init] brew probe failed: %s" (error-message-string err)))))

;; Disable heavy UI after first frame
(add-hook 'emacs-startup-hook
          (lambda ()
            (dolist (mode '(menu-bar-mode tool-bar-mode scroll-bar-mode))
              (when (fboundp mode) (funcall mode -1)))))

;; straight.el defaults
(setopt straight-base-dir my:d:cache
        straight-use-package-by-default t
        straight-profiles '((nil . "default.el")))

(provide 'early-init)
;;; early-init.el ends here
#+end_src

*** init.el
:PROPERTIES:
:CUSTOM_ID: init
:END:

*Purpose*
Bootstrap packages, configure base behavior, and load modular files.

*What it does*
- Bootstraps `straight.el` (guarded, timeout).
- Installs and initializes `leaf`.
- Defines user customization group (`my`) and LSP selector.
- Temporarily enlarges process I/O buffer; restores later.
- Configures sensible defaults (UI, editing, scrolling).
- Uses `no-littering` to centralize paths.
- On macOS: imports shell env safely; extends PATH; configures `dired`.
- Loads personal and modular configs fault-tolerantly.
- Reports startup time & GC count asynchronously.

*Notes*
- Safe wrappers prevent single-file errors from breaking init.
- `custom.el` is isolated in `.etc`.
- Load-path sanitized (no root dir).

#+begin_src emacs-lisp :tangle init.el
  ;;; init.el --- Main initialization -*- lexical-binding: t; -*-

  ;; Copyright (c) 2021-2025
  ;; Author: YAMASHITA, Takao <tjy1965@gmail.com>
  ;; License: GNU GPL v3 or later

  ;;; Commentary:
  ;; Entry point for Emacs 30+ configuration.
  ;; - Bootstraps package management (straight.el + leaf)
  ;; - Defines customization groups and defaults
  ;; - Configures basic UI and performance
  ;; - Loads modular configuration via lisp/modules.el
  ;; - Optionally loads personal overrides

  ;;; Code:

  ;; ---------------------------------------------------------------------------
  ;;; Bootstrap straight.el
  ;; ---------------------------------------------------------------------------
  (defvar bootstrap-version 7)
  (let* ((base (or (bound-and-true-p straight-base-dir) user-emacs-directory))
         (bootstrap-file (expand-file-name "straight/repos/straight.el/bootstrap.el" base)))
    (unless (file-exists-p bootstrap-file)
      (condition-case err
          (with-current-buffer
              (url-retrieve-synchronously
               "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
               'silent 'inhibit-cookies)
            (goto-char (point-max))
            (eval-print-last-sexp))
        (error (user-error "[straight] bootstrap failed: %s" (error-message-string err)))))
    (load bootstrap-file nil 'nomessage))

  ;; Ensure essential packages
  (dolist (pkg '(leaf leaf-keywords leaf-convert blackout org))
    (straight-use-package pkg))
  (require 'org)

  (eval-when-compile
    (require 'leaf)
    (require 'leaf-keywords))
  (leaf-keywords-init)

  ;; ---------------------------------------------------------------------------
  ;;; Customization group
  ;; ---------------------------------------------------------------------------
  (defgroup my nil
    "User customizations."
    :group 'convenience)

  (defcustom my:use-lsp 'eglot
    "Select which LSP client to use. Valid values: 'eglot or 'lsp."
    :type '(choice (const :tag "Eglot" eglot)
                   (const :tag "lsp-mode" lsp))
    :group 'my)

  ;; ---------------------------------------------------------------------------
  ;;; Performance tweaks
  ;; ---------------------------------------------------------------------------
  (defvar my:orig:read-process-output-max
    (and (boundp 'read-process-output-max) read-process-output-max))
  (when (boundp 'read-process-output-max)
    (setq read-process-output-max (* 4 1024 1024)))
  (add-hook 'emacs-startup-hook
            (lambda ()
              (when (boundp 'read-process-output-max)
                (setq read-process-output-max my:orig:read-process-output-max))))

  (leaf gcmh
    :straight t
    :hook (emacs-startup . gcmh-mode)
    :init
    (setq gcmh-idle-delay 2
          gcmh-high-cons-threshold (* 64 1024 1024)))

  ;; ---------------------------------------------------------------------------
  ;;; Basic UI and editing defaults
  ;; ---------------------------------------------------------------------------
  (leaf emacs
    :straight nil
    :init
    ;; Unset disruptive keys
    (dolist (k '("C-z" "C-x C-z" "M-z" "M-m" "M-/"))
      (keymap-global-unset k))
    (when (fboundp 'cape-dabbrev)
      (keymap-global-set "M-/" #'cape-dabbrev))
    (when (fboundp 'pixel-scroll-precision-mode)
      (pixel-scroll-precision-mode 1))
    (setopt inhibit-startup-screen  t
            initial-scratch-message nil
            use-short-answers       t
            create-lockfiles        nil
            make-backup-files       t
            delete-old-versions     t
            version-control         t
            idle-update-delay       0.2
            ring-bell-function      #'ignore
            display-line-numbers-type 'relative
            auto-save-default       t
            auto-save-visited-interval 2)
    (electric-pair-mode 1)
    (add-hook 'prog-mode-hook #'display-line-numbers-mode)
    (auto-save-visited-mode 1))

  ;; Modifier keys
  (leaf my:modifier
    :straight nil
    :init
    (cond
     ((eq system-type 'darwin)
      (setq mac-option-modifier 'meta
            mac-command-modifier 'super
            mac-control-modifier 'control
            mac-function-modifier 'hyper))
     ((eq system-type 'windows-nt)
      (setq w32-lwindow-modifier 'super
            w32-rwindow-modifier 'super
            w32-apps-modifier   'hyper))
     ((eq system-type 'gnu/linux)
      (setq my:os "linux"))))

  ;; ---------------------------------------------------------------------------
  ;;; Files and environment
  ;; ---------------------------------------------------------------------------
  (leaf no-littering
    :straight t
    :init
    (setq no-littering-etc-directory my:d:etc
          no-littering-var-directory my:d:var))

  (leaf exec-path-from-shell
    :straight t
    :if (memq window-system '(mac ns))
    :custom ((exec-path-from-shell-check-startup-files . nil)
             (exec-path-from-shell-arguments . '("-l" "-i"))
             (exec-path-from-shell-variables
              . '("PATH" "LANG" "PASSWORD_STORE_DIR" "GPG_KEY_ID"
                  "OPENROUTER_API_KEY" "OPENAI_API_KEY")))
    :config
    (ignore-errors (exec-path-from-shell-initialize)))

  (when (eq system-type 'darwin)
    (dolist (p '("/opt/homebrew/bin" "/usr/local/bin"))
      (when (and (file-directory-p p) (not (member p exec-path)))
        (add-to-list 'exec-path p)
        (setenv "PATH" (concat p ":" (getenv "PATH"))))))

  ;; Dired defaults
  (leaf dired
    :custom ((dired-listing-switches . "-aBhl --group-directories-first"))
    :config
    (when (and (eq system-type 'darwin) (executable-find "gls"))
      (setq insert-directory-program "gls"
            dired-use-ls-dired t)))

  ;; ---------------------------------------------------------------------------
  ;;; Misc
  ;; ---------------------------------------------------------------------------
  (leaf hydra :straight t :commands (defhydra))

  (setq custom-file my:f:custom)
  (when (file-readable-p custom-file)
    (ignore-errors (load custom-file nil 'nomessage)))

  ;; Safe file loader
  (defun my/safe-load-file (file &optional noerror)
    "Load FILE safely. If NOERROR is non-nil, log error instead of raising."
    (when (and file (file-exists-p file))
      (condition-case err
          (load file nil 'nomessage)
        (error
         (funcall (if noerror #'message #'user-error)
                  "[load] failed to load %s: %s"
                  file (error-message-string err))))))

  ;; ---------------------------------------------------------------------------
  ;;; User-specific overrides
  ;; ---------------------------------------------------------------------------
  (my/safe-load-file (concat my:d "personal/" user-login-name ".el") t)

  ;; ---------------------------------------------------------------------------
  ;;; Modular configuration
  ;; ---------------------------------------------------------------------------
  (let* ((root (if (and (boundp 'my:d) (stringp my:d) (file-directory-p my:d))
                   (file-name-as-directory my:d)
                 (file-name-as-directory user-emacs-directory)))
         (lisp-dir (expand-file-name "lisp" root)))
    (add-to-list 'load-path lisp-dir)
    (require 'modules nil t))

  ;; ---------------------------------------------------------------------------
  ;;; Startup report
  ;; ---------------------------------------------------------------------------
  (add-hook 'after-init-hook
            (lambda ()
              (run-with-idle-timer
               0 nil
               (lambda ()
                 (message "Emacs ready in %.2f seconds with %d GCs."
                          (float-time (time-subtract after-init-time before-init-time))
                          gcs-done)))))

  (provide 'init)
  ;;; init.el ends here
#+end_src

** Modular Configuration
:PROPERTIES:
:CUSTOM_ID: modules
:END:

*** modules.el
:PROPERTIES:
:CUSTOM_ID: core-modules
:END:

#+begin_src emacs-lisp :tangle lisp/modules.el
  ;;; modules.el --- Modular config loader -*- lexical-binding: t; -*-

  ;; Copyright (c) 2021-2025
  ;; Author: YAMASHITA, Takao
  ;; License: GNU GPL v3 or later

  ;;; Commentary:
  ;; Central entry point to load modular configs.
  ;; Each module is responsible for a single concern and is loaded here in order.
  ;;
  ;; Load order:
  ;;  - core/:  General settings, tools, utils (Emacs-global helpers)
  ;;  - ui/:    Fonts, theme, modeline, window, treemacs
  ;;  - completion/: Vertico, Corfu, Consult, Embark, etc.
  ;;  - org/:   Org ecosystem
  ;;  - dev/:   Development tools
  ;;  - vcs/:   Version control
  ;;  - utils/: General-purpose helpers (scratch, backup, async, etc.)

  ;;; Code:

  (defvar my:modules
    '(
      ;; Core
      core/general
      core/tools
      core/utils

      ;; UI
      ui/ui-font
      ui/ui-theme
      ui/ui-modeline
      ui/ui-window
      ui/ui-treemacs

      ;; Completion stack
      completion/completion-core
      completion/completion-vertico
      completion/completion-consult
      completion/completion-embark
      completion/completion-corfu
      completion/completion-icons

      ;; Org ecosystem
      org/org-core
      org/org-visual
      org/org-extensions
      org/org-export

      ;; Development
      dev/dev-lsp
      dev/dev-ai
      dev/dev-term
      dev/dev-build
      dev/dev-docker

      ;; Version Control
      vcs/vcs-magit
      vcs/vcs-gutter
      vcs/vcs-forge

      ;; Utils (cross-cutting helpers)
      utils/utils-functions
      utils/utils-scratch
      utils/utils-backup
      utils/utils-async)
    "List of modular configuration files to load sequentially.")

  (dolist (mod my:modules)
    (condition-case err
        (require mod)
      (error
       (message "[modules] Failed to load %s: %s"
                mod (error-message-string err)))))

  (provide 'modules)
  ;;; modules.el ends here
#+end_src

*** core/general.el
:PROPERTIES:
:CUSTOM_ID: core-general
:END:

#+begin_src emacs-lisp :tangle lisp/core/general.el
  ;;; core/general.el --- General settings & keybindings -*- lexical-binding: t; -*-

  ;; Copyright (c) 2021-2025
  ;; Author: YAMASHITA, Takao
  ;; License: GNU GPL v3 or later

  ;;; Commentary:
  ;; General-purpose utilities and settings.
  ;; - Hydra menus
  ;; - Global keybindings
  ;; - Dired enhancements
  ;; - Winner mode
  ;; - TRAMP and backup settings
  ;; - Authentication & password store integration

  ;;; Code:

  (eval-when-compile (require 'leaf))

  ;; ---------------------------------------------------------------------------
  ;; Hydra for Text Scaling

  (leaf hydra
    :straight t
    :config
    (defhydra hydra-text-scale (:hint nil :color red)
      "
  ^Text Scaling^
  [_+_] Increase   [_-_] Decrease   [_0_] Reset   [_q_] Quit
  "
      ("+" text-scale-increasek)
      ("-" text-scale-decrease)
      ("0" (text-scale-set 0) :color blue)
      ("q" nil "quit" :color blue)))

  ;; ---------------------------------------------------------------------------
  ;; Common Key Bindings

  (leaf my:key
    :straight nil
    :doc "Centralized keybindings via `leaf-keys`, ordered by map lifetime."
    :emacs>= 30.0
    :bind
    (;; Global key bindings
     ("<f1>"    . help)
     ("<f5>"    . my/revert-buffer-quick)
     ("<f8>"    . treemacs)
     ("C-h"     . backward-delete-char)

     ;; Undo/redo
     ("C-/"     . undo-fu-only-undo)
     ("C-?"     . undo-fu-only-redo)

     ;; Text scaling
     ("C-c z"   . hydra-text-scale/body)

     ;; Buffer navigation
     ("C-c b"   . consult-buffer)
     ("M-n"     . forward-paragraph)
     ("M-p"     . backward-paragraph)
     ("s-<down>". end-of-buffer)
     ("s-<up>"  . beginning-of-buffer)
     ("s-<right>" . next-buffer)
     ("s-<left>"  . previous-buffer)

     ;; Window management
     ("C-."     . other-window)
     ("C-c 2"   . my/toggle-window-split)
     ("s-."     . ace-window)
     ("s-w"     . ace-swap-window)
     ("s-d"     . delete-frame)
     ("s-m"     . (lambda () (interactive)
                    (let ((frame (make-frame)))
                      (with-selected-frame frame
                        (switch-to-buffer (generate-new-buffer "untitled"))))))

     ;; File operations
     ("s-j"     . find-file-other-window)
     ("s-o"     . find-file-other-frame)
     ("C-c o"   . find-file)
     ("C-c v"   . find-file-read-only)
     ("C-c V"   . view-file-other-window)
     ("C-c k"   . kill-buffer-and-window)

     ;; Search
     ("C-s"     . consult-line)
     ("C-c r"   . consult-ripgrep)

     ;; Text manipulation
     ("C-="     . er/expand-region)
     ("C-c M-a" . align-regexp)
     ("C-c ;"   . comment-or-uncomment-region)
     ("C-c l"   . display-line-numbers-mode)

     ;; Org mode & Roam
     ("C-c d a" . org-agenda)
     ("C-c d c" . org-capture)
     ("C-c d i" . org-roam-node-insert)
     ("C-c d f" . org-roam-node-find)

     ;; Aider
     ("C-c a a" . aidermacs-transient-menu)

     ;; EWW
     ("C-c w w" . eww)
     ("C-c w s" . eww-search)
     ("C-c w o" . eww-open-file)
     ("C-c w b" . eww-list-bookmarks)
     ("C-c w r" . eww-readable)
     ("C-c w u" . my/eww-toggle-images)

     ;; Misc
     ("C-x g"   . magit-status)
     ("s-r"     . restart-emacs)
     ("M-x"     . execute-extended-command))
    :init
    ;; Enable directional window navigation with Shift + arrow keys.
    (windmove-default-keybindings))

  ;; ---------------------------------------------------------------------------
  ;; Dired enhancements

  (leaf dired
    :bind (:dired-mode-map
           ("i"   . dired-subtree-insert)
           ("TAB" . dired-subtree-toggle)
           ("z"   . my/dired-view-file-other-window)))

  ;; ---------------------------------------------------------------------------
  ;; Undo/Redo (undo-fu)
  (leaf undo-fu :straight t)

  ;; ---------------------------------------------------------------------------
  ;; Winner mode

  (leaf winner
    :straight t
    :global-minor-mode t
    :bind (("M-[" . winner-undo)
           ("M-]" . winner-redo)))

  ;; ---------------------------------------------------------------------------
  ;; TRAMP setup

  (leaf tramp
    :pre-setq
    `((tramp-persistency-file-name . ,(concat no-littering-var-directory "tramp"))
      (tramp-auto-save-directory . ,(concat no-littering-var-directory "tramp-autosave")))
    :custom
    `((tramp-default-method . "scp")
      (tramp-verbose . 3)))

  ;; ---------------------------------------------------------------------------
  ;; Auto-save and backup configuration

  (leaf files
    :custom
    `((auto-save-file-name-transforms
       . '((".*" ,(concat no-littering-var-directory "backup/") t)))
      (auto-save-list-file-prefix
       . ,(concat no-littering-var-directory "auto-save-list/.saves-"))
      (backup-directory-alist
       . '(("." . ,(concat no-littering-var-directory "backup/"))))
      (delete-old-versions . t)))

  ;; Ensure required directories exist
  (my/ensure-directory-exists (concat no-littering-var-directory "backup/"))
  (my/ensure-directory-exists (concat no-littering-var-directory "auto-save-list/"))

  ;; ---------------------------------------------------------------------------
  ;; Authentication Management

  (defvar my:d:password-store
    (or (getenv "PASSWORD_STORE_DIR")
        (concat no-littering-var-directory "password-store/"))
    "Path to the password store.")

  (defun my/auth-check-env ()
    "Validate authentication environment and warn if misconfigured."
    (unless (getenv "GPG_KEY_ID")
      (display-warning 'auth "GPG_KEY_ID is not set." :level 'debug))
    (unless (file-directory-p my:d:password-store)
      (display-warning 'auth
                       (format "Password store directory does not exist: %s"
                               my:d:password-store)
                       :level 'warning)))

  (leaf *authentication
    :init
    (my/auth-check-env)

    ;; GPG & auth-source
    (leaf epa-file
      :commands (epa-file-enable)
      :init
      (setq epa-pinentry-mode
            (if (getenv "USE_GPG_LOOPBACK") 'loopback 'default))
      (add-hook 'emacs-startup-hook #'epa-file-enable))

    (leaf auth-source
      :init
      (with-eval-after-load 'auth-source
        (let ((key (getenv "GPG_KEY_ID")))
          (if key
              (setq auth-source-gpg-encrypt-to key)
            (display-warning 'auth-source
                             "GPG_KEY_ID is not set. Authentication backends may be limited.")))))

    ;; Password-store and auth-source-pass
    (leaf password-store :straight t)
    (leaf auth-source-pass
      :straight t
      :commands (auth-source-pass-enable)
      :hook (emacs-startup-hook . (lambda ()
                                    (when (executable-find "pass")
                                      (auth-source-pass-enable)))))

    ;; Secure plstore
    (leaf plstore
      :init
      (with-eval-after-load 'plstore
        (setq plstore-secret-keys 'silent
              plstore-encrypt-to (getenv "GPG_KEY_ID")))))

  (provide 'core/general)
  ;;; core/general.el ends here
#+end_src

*** core/tools.el
:PROPERTIES:
:CUSTOM_ID: core-tools
:END:

#+begin_src emacs-lisp :tangle lisp/core/tools.el
;;; core/tools.el --- Developer & UI helper tools -*- lexical-binding: t; -*-

;; Copyright (c) 2021-2025
;; Author: YAMASHITA, Takao
;; License: GNU GPL v3 or later

;;; Commentary:
;; Tools for navigation, editing, external integration, and development.
;; - Line numbers toggle, window split toggle
;; - Keybinding conflict finder
;; - Dired helper
;; - Tree-sitter grammar helpers
;; - External integration (VSCode, env, build info)
;; - Org folding shortcuts

;;; Code:

;; ---------------------------------------------------------------------------
;; UI & Navigation Helpers

(defun my/toggle-linum-lines ()
  "Toggle line numbers using `display-line-numbers-mode`."
  (interactive)
  (display-line-numbers-mode 'toggle))

(defun my/toggle-window-split ()
  "Toggle between horizontal and vertical split for two windows."
  (interactive)
  (when (= (count-windows) 2)
    (let* ((this-buf (window-buffer))
           (next-buf (window-buffer (next-window)))
           (this-edges (window-edges))
           (next-edges (window-edges (next-window)))
           (split-vert (= (car this-edges) (car next-edges)))
           (split-fn (if split-vert
                         #'split-window-horizontally
                       #'split-window-vertically)))
      (delete-other-windows)
      (funcall split-fn)
      (set-window-buffer (selected-window) this-buf)
      (set-window-buffer (next-window) next-buf)
      (select-window (selected-window)))))

(defun my/find-keybinding-conflicts ()
  "Find and display conflicting keybindings in active keymaps."
  (interactive)
  (let ((conflicts (make-hash-table :test 'equal))
        (maps (current-active-maps t))
        (buffer-name "*Keybinding Conflicts*"))
    (dolist (map maps)
      (map-keymap
       (lambda (key cmd)
         (when (commandp cmd)
           (let ((desc (key-description (vector key)))
                 (existing (gethash desc conflicts)))
             (puthash desc (delete-dups (cons cmd existing))
                      conflicts))))
       map))
    (with-current-buffer (get-buffer-create buffer-name)
      (read-only-mode -1)
      (erase-buffer)
      (insert "* Keybinding Conflicts *\n\n")
      (maphash (lambda (key cmds)
                 (when (> (length cmds) 1)
                   (insert (format "%s => %s\n"
                                   key
                                   (mapconcat #'symbol-name cmds ", ")))))
               conflicts)
      (read-only-mode 1))
    (pop-to-buffer buffer-name)))

;; ---------------------------------------------------------------------------
;; Dired Helper

(defun my/dired-view-file-other-window ()
  "Open selected Dired file or directory in another window."
  (interactive)
  (let ((file (dired-get-file-for-visit)))
    (if (file-directory-p file)
        (or (and (cdr dired-subdir-alist)
                 (dired-goto-subdir file))
            (dired file))
      (view-file-other-window file))))

;; ---------------------------------------------------------------------------
;; Tree-sitter Integration

(defun my/treesit--call-with-outdir (orig-fn &rest args)
  "Advice ORIG-FN to force OUT-DIR to `my:d:treesit` when omitted.
Also run the build in `my:d:treesit-build`."
  (let* ((len (length args))
         (have-out-dir (>= len 7))
         (args* (append args (make-list (max 0 (- 7 len)) nil)))
         (out-dir (or (nth 6 args*) my:d:treesit)))
    (setf (nth 6 args*) out-dir)
    (my/ensure-directory-exists out-dir)
    (let ((default-directory my:d:treesit-build))
      (apply orig-fn args*))))

(defun my/treesit-install (lang)
  "Install a tree-sitter grammar for LANG interactively."
  (interactive
   (list (intern (completing-read "Language: "
                                  (mapcar #'car treesit-language-source-alist)))))
  (treesit-install-language-grammar lang))

(with-eval-after-load 'treesit
  (add-to-list 'treesit-extra-load-path my:d:treesit)
  (advice-add 'treesit-install-language-grammar :around #'my/treesit--call-with-outdir))

;; ---------------------------------------------------------------------------
;; External Integration

(defun my/open-by-vscode ()
  "Open current file in Visual Studio Code at line/column."
  (interactive)
  (when (buffer-file-name)
    (async-shell-command
     (format "code -r -g %s:%d:%d"
             (buffer-file-name)
             (line-number-at-pos)
             (current-column)))))

(defun my/show-env-variable (var)
  "Display the value of environment variable VAR."
  (interactive "sEnvironment variable: ")
  (let ((val (getenv var)))
    (message "%s = %s" var (or val "Not set"))))

(defun my/print-build-info ()
  "Display Emacs build details (commit, branch, system, features, options)."
  (interactive)
  (let ((buf (get-buffer-create "*Build Info*")))
    (with-current-buffer buf
      (let ((inhibit-read-only t))
        (erase-buffer)
        ;; Core info
        (insert (format "- GNU Emacs *%s*\n\n" emacs-version))
        (insert "|Property|Value|\n|--------|-----|\n")
        (insert (format "|Commit|%s|\n" (emacs-repository-get-version)))
        (insert (format "|Branch|%s|\n" (emacs-repository-get-branch)))
        (insert (format "|System|%s|\n" system-configuration))
        (insert (format "|Date|%s|\n"
                        (format-time-string "%Y-%m-%d %T (%Z)" emacs-build-time)))
        ;; Patch detection
        (insert (format "|Patch|%s ns-inline.patch|\n"
                        (cond
                         ((boundp 'mac-ime--cursor-type) "with")
                         (t "N/A"))))
        ;; Features & options
        (insert (format "|Features|%s|\n" system-configuration-features))
        (insert (format "|Options|%s|\n" system-configuration-options)))
      (view-mode 1))
    (switch-to-buffer buf)))

;; ---------------------------------------------------------------------------
;; Org Helpers

(with-eval-after-load 'org
  (require 'org-fold)
  (defun my/org-fold-subtree ()   (interactive) (org-fold-subtree t))
  (defun my/org-unfold-subtree () (interactive) (org-show-subtree))
  (defun my/org-toggle-fold ()
    "Toggle fold for current Org subtree."
    (interactive)
    (save-excursion
      (org-back-to-heading t)
      (if (org-fold-folded-p (point))
          (org-show-subtree)
        (org-fold-subtree t))))
  (define-key org-mode-map (kbd "C-c C-f") #'my/org-fold-subtree)
  (define-key org-mode-map (kbd "C-c C-e") #'my/org-unfold-subtree)
  (define-key org-mode-map (kbd "C-c C-t") #'my/org-toggle-fold))

(provide 'core/tools)
;;; core/tools.el ends here
#+end_src

*** core/utils.el
:PROPERTIES:
:CUSTOM_ID: core-utils
:END:

#+begin_src emacs-lisp :tangle lisp/core/utils.el
  ;;; core/utils.el --- Core utility helpers -*- lexical-binding: t; -*-

  ;; Copyright (c) 2021-2025
  ;; Author: YAMASHITA, Takao
  ;; License: GNU GPL v3 or later

  ;;; Commentary:
  ;; Core utility functions tied directly to Emacs workflow.
  ;; - Auto timestamp in files
  ;; - Org auto-tangle
  ;; - Quick revert
  ;; - Lexical-binding auto-insert
  ;; - View-mode on read-only buffers
  ;;
  ;; Other general-purpose utilities (scratch, backup, async, functions)
  ;; are provided in utils/*.el.

  ;;; Code:

  ;; ---------------------------------------------------------------------------
  ;; Auto timestamp

  (defun my/save-buffer-wrapper ()
    "Insert or update a `$Lastupdate` timestamp at the top of the buffer."
    (interactive)
    (let ((timestamp (concat "$Lastupdate: "
                             (format-time-string "%Y/%m/%d %H:%M:%S")
                             " $")))
      (save-excursion
        (goto-char (point-min))
        (while (re-search-forward "\\$Lastupdate: [0-9/: ]*\\$" nil t)
          (replace-match timestamp t nil)))))

  (add-hook 'after-save-hook #'my/save-buffer-wrapper)

  ;; ---------------------------------------------------------------------------
  ;; Org auto-tangle

  (defun my/auto-tangle-updated-src-blocks ()
    "Automatically tangle updated Org source blocks when saving `README.org`."
    (when (and buffer-file-name
               (string= (file-name-nondirectory buffer-file-name) "README.org"))
      (let ((org-confirm-babel-evaluate nil))
        (org-babel-tangle))))

  (add-hook 'org-mode-hook
            (lambda ()
              (add-hook 'after-save-hook #'my/auto-tangle-updated-src-blocks
                        nil 'make-it-local)))

  ;; ---------------------------------------------------------------------------
  ;; Quick revert

  (defun my/revert-buffer-quick ()
    "Revert current buffer without confirmation."
    (interactive)
    (revert-buffer :ignore-auto :noconfirm))

  ;; ---------------------------------------------------------------------------
  ;; Auto insert lexical-binding

  (defun my/auto-insert-lexical-binding ()
    "Insert `lexical-binding: t` in Emacs Lisp files under `no-littering-var-directory`."
    (when (and (stringp buffer-file-name)
               (boundp 'no-littering-var-directory)
               (string-prefix-p (expand-file-name no-littering-var-directory)
                                (expand-file-name buffer-file-name))
               (string-match-p "\\.el\\'" buffer-file-name)
               (not (save-excursion
                      (goto-char (point-min))
                      (re-search-forward "lexical-binding" (line-end-position 5) t))))
      (save-excursion
        (goto-char (point-min))
        (insert ";; -*- lexical-binding: t; -*- \n"))))

  (add-hook 'find-file-hook #'my/auto-insert-lexical-binding)

  ;; ---------------------------------------------------------------------------
  ;; Read-only buffers: auto enable view-mode

  (defun my/enable-view-mode-on-read-only ()
    "Enable `view-mode` when buffer is read-only."
    (if buffer-read-only
        (view-mode 1)
      (view-mode -1)))

  (add-hook 'read-only-mode-hook #'my/enable-view-mode-on-read-only)

  (provide 'core/utils)
  ;;; core/utils.el ends here
#+end_src

*** ui/ui-font.el
:PROPERTIES:
:CUSTOM_ID: ui-font
:END:

#+begin_src emacs-lisp :tangle lisp/ui/ui-font.el
;;; ui/ui-font.el --- Font configuration -*- lexical-binding: t; -*-

;; Copyright (c) 2021-2025
;; Author: YAMASHITA, Takao
;; License: GNU GPL v3 or later

;;; Commentary:
;; Font setup for default, variable-pitch, emoji, and ligatures.

;;; Code:

(defun my/system-default-font ()
  "Return a default monospace font family depending on OS."
  (cond
   ((eq system-type 'darwin)   "Menlo")
   ((eq system-type 'gnu/linux) "Monospace")
   ((eq system-type 'windows-nt) "Consolas")
   (t "Monospace")))

(defun my/system-emoji-font ()
  "Return a default emoji font family depending on OS."
  (cond
   ((eq system-type 'darwin)    "Apple Color Emoji")
   ((eq system-type 'gnu/linux) "Noto Color Emoji")
   ((eq system-type 'windows-nt) "Segoe UI Emoji")
   (t "Noto Color Emoji")))

(defun my/font-setup ()
  "Apply font settings, respecting overrides."
  (when (display-graphic-p)
    (set-face-attribute 'default nil
                        :family (or my:font-default (my/system-default-font))
                        :height (* 10 (or my:font-size 16)))
    (set-face-attribute 'variable-pitch nil
                        :family (or my:font-alt (my/system-default-font)))
    (set-fontset-font t 'emoji
                      (font-spec :family (or my:emoji-font (my/system-emoji-font))))))

(if (daemonp)
    (add-hook 'after-make-frame-functions
              (lambda (frame) (with-selected-frame frame (my/font-setup))))
  (add-hook 'after-init-hook #'my/font-setup))

(leaf ligature
  :straight t
  :config
  (ligature-set-ligatures 'prog-mode '("->" "=>" "::" "===" "!=" "&&" "||"))
  (global-ligature-mode 1))

(provide 'ui/ui-font)
;;; ui/ui-font.el ends here
#+end_src

*** ui/ui-theme.el
:PROPERTIES:
:CUSTOM_ID: ui-theme
:END:

#+begin_src emacs-lisp :tangle lisp/ui/ui-theme.el
;;; ui/ui-theme.el --- Theme configuration -*- lexical-binding: t; -*-

;; Copyright (c) 2021-2025
;; Author: YAMASHITA, Takao
;; License: GNU GPL v3 or later

;;; Commentary:
;; Theme management using ef-themes and spacious-padding.

;;; Code:

(leaf ef-themes
  :straight t
  :custom ((ef-themes-to-toggle . '(ef-frost ef-spring)))
  :config
  (unless custom-enabled-themes
    (load-theme (if (display-graphic-p) 'ef-frost 'deeper-blue) t)))

(leaf spacious-padding
  :straight t
  :if (display-graphic-p)
  :custom ((spacious-padding-widths . '((left . 15) (right . 15)))
           (spacious-padding-subtle-mode-line . t))
  :config (spacious-padding-mode 1))

(provide 'ui/ui-theme)
;;; ui/ui-theme.el ends here
#+end_src

*** ui/ui-modeline.el
:PROPERTIES:
:CUSTOM_ID: ui-modeline
:END:

#+begin_src emacs-lisp :tangle lisp/ui/ui-modeline.el
;;; ui/ui-modeline.el --- Modeline configuration -*- lexical-binding: t; -*-

;; Copyright (c) 2021-2025
;; Author: YAMASHITA, Takao
;; License: GNU GPL v3 or later

;;; Commentary:
;; Doom-modeline, minions, time, and battery display.

;;; Code:

(leaf doom-modeline
  :straight t
  :hook (after-init-hook . doom-modeline-mode))

(leaf minions
  :straight t
  :custom ((minions-mode-line-lighter . "⚙"))
  :hook (after-init-hook . minions-mode))

(setq display-time-interval 30
      display-time-day-and-date t
      display-time-24hr-format t)
(display-time-mode 1)
(when (fboundp 'display-battery-mode)
  (display-battery-mode 1))

(provide 'ui/ui-modeline)
;;; ui/ui-modeline.el ends here
#+end_src

*** ui/ui-window.el
:PROPERTIES:
:CUSTOM_ID: ui-window
:END:

#+begin_src emacs-lisp :tangle lisp/ui/ui-window.el
;;; ui/ui-window.el --- Window management -*- lexical-binding: t; -*-

;; Copyright (c) 2021-2025
;; Author: YAMASHITA, Takao
;; License: GNU GPL v3 or later

;;; Commentary:
;; Window management: fullscreen, zoom, tab-bar, tab-line, custom layouts.

;;; Code:

(defun my/set-frame-fullscreen (&optional frame)
  "Always set FRAME (or current frame if nil) to fullscreen."
  (when (display-graphic-p frame)
    (set-frame-parameter (or frame (selected-frame)) 'fullscreen 'fullboth)))

(if (daemonp)
    (add-hook 'after-make-frame-functions #'my/set-frame-fullscreen)
  (add-hook 'emacs-startup-hook #'my/set-frame-fullscreen))

(leaf zoom
  :straight t
  :hook (after-init-hook . zoom-mode)
  :custom ((zoom-size . '(0.62 . 0.62))
           (zoom-ignored-major-modes . '(dired-mode treemacs-mode))
           (zoom-ignored-buffer-names . '("*Messages*" "*Help*"))))

(leaf tab-bar
  :custom ((tab-bar-show . 1)
           (tab-bar-new-tab-choice . "*scratch*"))
  :hook (after-init-hook . tab-bar-mode))

(leaf tab-line
  :hook (after-init-hook . global-tab-line-mode))

(defvar my:saved-window-config nil)

(defun my/save-window-layout ()
  "Save the current window configuration persistently."
  (interactive)
  (setq my:saved-window-config (window-state-get nil t))
  (message "Window configuration saved."))

(defun my/restore-window-layout ()
  "Restore the previously saved window configuration."
  (interactive)
  (if my:saved-window-config
      (window-state-put my:saved-window-config)
    (message "No saved window configuration found.")))

(provide 'ui/ui-window)
;;; ui/ui-window.el ends here
#+end_src

*** ui/ui-treemacs.el
:PROPERTIES:
:CUSTOM_ID: ui-treemacs
:END:

#+begin_src emacs-lisp :tangle lisp/ui/ui-treemacs.el
;;; ui/ui-treemacs.el --- Treemacs configuration -*- lexical-binding: t; -*-

;; Copyright (c) 2021-2025
;; Author: YAMASHITA, Takao
;; License: GNU GPL v3 or later

;;; Commentary:
;; Sidebar project/file explorer with Nerd Icons.

;;; Code:

(leaf treemacs
  :straight t
  :if (display-graphic-p)
  :custom ((treemacs-filewatch-mode . t)
           (treemacs-follow-mode . t)
           (treemacs-indentation . 2)
           (treemacs-missing-project-action . 'remove)))

(leaf nerd-icons-dired
  :straight t
  :hook (dired-mode . nerd-icons-dired-mode))

(provide 'ui/ui-treemacs)
;;; ui/ui-treemacs.el ends here
#+end_src

*** completion/completion-core.el
:PROPERTIES:
:CUSTOM_ID: completion-core
:END:

#+begin_src emacs-lisp :tangle lisp/completion/completion-core.el
  ;;; completion/completion-core.el --- Completion core settings -*- lexical-binding: t; -*-

  ;; Copyright (c) 2021-2025
  ;; Author: YAMASHITA, Takao
  ;; License: GNU GPL v3 or later

  ;;; Commentary:
  ;; Sets up completion styles and prescient persistence.

  ;;; Code:

  (leaf prescient
    :straight t
    :custom
    ((prescient-aggressive-file-save . t))
    :config
    (setq prescient-save-file
          (expand-file-name "prescient-save.el" my:d:var))
    (with-eval-after-load 'prescient
      (prescient-persist-mode 1)))

  (leaf orderless
    :straight t
    :custom
    ((completion-styles . '(orderless basic flex))
     (completion-category-overrides
      . '((file (styles . (partial-completion)))
          (symbol (styles . (flex)))
          (command (styles . (orderless)))))))

  (provide 'completion/completion-core)
  ;;; completion/completion-core.el ends here
#+end_src

*** completion/completion-vertico.el
:PROPERTIES:
:CUSTOM_ID: completion-vertico
:END:

#+begin_src emacs-lisp :tangle lisp/completion/completion-vertico.el
;;; completion/completion-vertico.el --- Vertico minibuffer UI -*- lexical-binding: t; -*-

;; Copyright (c) 2021-2025
;; Author: YAMASHITA, Takao
;; License: GNU GPL v3 or later

;;; Commentary:
;; Vertico minibuffer completion UI with posframe and marginalia.

;;; Code:

(leaf vertico
  :straight t
  :global-minor-mode vertico-mode
  :custom ((vertico-count . 15)))

(leaf vertico-posframe
  :straight t
  :if (display-graphic-p)
  :after vertico
  :custom ((vertico-posframe-border-width . 2))
  :config (vertico-posframe-mode 1))

(leaf marginalia
  :straight t
  :global-minor-mode marginalia-mode)

(provide 'completion/completion-vertico)
;;; completion/completion-vertico.el ends here
#+end_src

*** completion/completion-consult.el
:PROPERTIES:
:CUSTOM_ID: completion-consult
:END:

#+begin_src emacs-lisp :tangle lisp/completion/completion-consult.el
;;; completion/completion-consult.el --- Consult search/navigation -*- lexical-binding: t; -*-

;; Copyright (c) 2021-2025
;; Author: YAMASHITA, Takao
;; License: GNU GPL v3 or later

;;; Commentary:
;; Consult provides advanced search, navigation, and xref integration.

;;; Code:

(leaf consult
  :straight t
  :custom
  ((xref-show-xrefs-function . #'consult-xref)
   (xref-show-definitions-function . #'consult-xref)))

(provide 'completion/completion-consult)
;;; completion/completion-consult.el ends here
#+end_src

*** completion/completion-embark.el
:PROPERTIES:
:CUSTOM_ID: completion-embark
:END:

#+begin_src emacs-lisp :tangle lisp/completion/completion-embark.el
;;; completion/completion-embark.el --- Embark actions -*- lexical-binding: t; -*-

;; Copyright (c) 2021-2025
;; Author: YAMASHITA, Takao
;; License: GNU GPL v3 or later

;;; Commentary:
;; Embark provides context-sensitive actions, with consult integration.

;;; Code:

(leaf embark
  :straight t
  :custom ((prefix-help-command . #'embark-prefix-help-command)))

(leaf embark-consult
  :straight t
  :after (embark consult)
  :hook (embark-collect-mode . consult-preview-at-point-mode))

(provide 'completion/completion-embark)
;;; completion/completion-embark.el ends here
#+end_src

*** completion/completion-corfu.el
:PROPERTIES:
:CUSTOM_ID: completion-corfu
:END:

#+begin_src emacs-lisp :tangle lisp/completion/completion-corfu.el
;;; completion/completion-corfu.el --- Corfu popup completion -*- lexical-binding: t; -*-

;; Copyright (c) 2021-2025
;; Author: YAMASHITA, Takao
;; License: GNU GPL v3 or later

;;; Commentary:
;; Popup completions with Corfu, icons with kind-icon, and extra capf sources with cape.

;;; Code:

(leaf corfu
  :straight t
  :init (global-corfu-mode)
  :custom ((corfu-auto . t)
           (corfu-cycle . t)))

(leaf kind-icon
  :straight t
  :after corfu
  :custom ((kind-icon-default-face . 'corfu-default))
  :config (add-to-list 'corfu-margin-formatters #'kind-icon-margin-formatter))

(leaf cape
  :straight t
  :init
  (mapc (lambda (fn) (add-to-list 'completion-at-point-functions fn))
        '(cape-file cape-dabbrev cape-keyword)))

(provide 'completion/completion-corfu)
;;; completion/completion-corfu.el ends here
#+end_src

*** completion/completion-icons.el
:PROPERTIES:
:CUSTOM_ID: completion-icons
:END:

#+begin_src emacs-lisp :tangle lisp/completion/completion-icons.el
;;; completion/completion-icons.el --- Nerd icons for completion -*- lexical-binding: t; -*-

;; Copyright (c) 2021-2025
;; Author: YAMASHITA, Takao
;; License: GNU GPL v3 or later

;;; Commentary:
;; Icons for ibuffer and marginalia completions.

;;; Code:

(leaf nerd-icons-ibuffer
  :straight t
  :hook (ibuffer-mode-hook . nerd-icons-ibuffer-mode))

(leaf nerd-icons-completion
  :straight t
  :hook (marginalia-mode-hook . nerd-icons-completion-marginalia-setup)
  :config (nerd-icons-completion-mode))

(provide 'completion/completion-icons)
;;; completion/completion-icons.el ends here
#+end_src

*** org/org-core.el
:PROPERTIES:
:CUSTOM_ID: org-core
:END:

#+begin_src emacs-lisp :tangle lisp/org/org-core.el
  ;;; org/org-core.el --- Org Mode core configuration -*- lexical-binding: t; -*-

  ;; Copyright (c) 2021-2025
  ;; Author: YAMASHITA, Takao
  ;; License: GNU GPL v3 or later

  ;;; Commentary:
  ;; Core Org Mode configuration:
  ;; - GTD workflow
  ;; - Agenda setup
  ;; - Capture templates
  ;; - Refile targets
  ;; - Path variables

  ;;; Code:

  (eval-when-compile (require 'leaf))

  ;; Org directories
  (defvar my:d:org (expand-file-name "org/" my:d:var))
  (defvar my:d:org-journal (expand-file-name "journal" my:d:org))
  (defvar my:d:org-roam (expand-file-name "org-roam" my:d:org))
  (defvar my:d:org-pictures (expand-file-name "pictures" my:d:org))
  (defvar my:f:capture-blog-file (expand-file-name "blog.org" my:d:org))

  (my/ensure-directory-exists my:d:org)
  (my/ensure-directory-exists my:d:org-journal)
  (my/ensure-directory-exists my:d:org-roam)
  (my/ensure-directory-exists my:d:org-pictures)

  ;; Org core setup
  (leaf org
    :straight t
    :custom
    ((org-directory . my:d:org)
     (org-default-notes-file . "notes.org")
     (org-log-done . 'time)
     (org-support-shift-select . t)
     (org-return-follows-link . t))
    :config
    (setq org-agenda-files
          (seq-filter (lambda (file)
                        (not (string-match-p "archives" file)))
                      (directory-files-recursively org-directory "\\.org$")))
    (setq org-todo-keywords
          '((sequence "TODO(t)" "SOMEDAY(s)" "WAITING(w)" "|" "DONE(d)" "CANCELED(c@)")))
    (setq org-refile-targets
          '((nil :maxlevel . 3)
            (my/org-buffer-files :maxlevel . 1)
            (org-agenda-files :maxlevel . 3)))
    (setq org-capture-templates
          `(("t" "Todo" entry (file+headline ,(expand-file-name "gtd.org" org-directory) "Inbox")
             "* TODO %?\n %i\n %a")
            ("n" "Note" entry (file+headline ,(expand-file-name "notes.org" org-directory) "Notes")
             "* %?\nEntered on %U\n %i\n %a")
            ("j" "Journal" entry (function my/org-journal-find-location)
             "* %(format-time-string org-journal-time-format)%^{Title}\n%i%?")
            ("m" "Meeting" entry (file ,(expand-file-name "meetings.org" org-directory))
             "* MEETING with %? :meeting:\n  %U\n  %a"))))

  (provide 'org/org-core)
  ;;; org/org-core.el ends here
#+end_src

*** org/org-visual.el
:PROPERTIES:
:CUSTOM_ID: org-visual
:END:

#+begin_src emacs-lisp :tangle lisp/org/org-visual.el
;;; org/org-visual.el --- Org Mode visual enhancements -*- lexical-binding: t; -*-

;; Copyright (c) 2021-2025
;; Author: YAMASHITA, Takao
;; License: GNU GPL v3 or later

;;; Commentary:
;; Org Mode visual enhancements:
;; - org-modern
;; - org-superstar
;; - pretty entities

;;; Code:

(eval-when-compile (require 'leaf))

(leaf org-modern
  :straight t
  :hook (org-mode . org-modern-mode))

(leaf org-superstar
  :straight t
  :hook (org-mode . org-superstar-mode)
  :custom ((org-superstar-headline-bullets-list . '("◉" "★" "○" "▷"))))

(provide 'org/org-visual)
;;; org/org-visual.el ends here
#+end_src

*** org/org-extensions.el
:PROPERTIES:
:CUSTOM_ID: org-extensions
:END:

#+begin_src emacs-lisp :tangle lisp/org/org-extensions.el
  ;;; org/org-extensions.el --- Org Mode extensions -*- lexical-binding: t; -*-

  ;; Copyright (c) 2021-2025
  ;; Author: YAMASHITA, Takao
  ;; License: GNU GPL v3 or later

  ;;; Commentary:
  ;; Org extensions:
  ;; - org-journal
  ;; - org-roam
  ;; - org-download
  ;; - toc-org
  ;; - org-cliplink

  ;;; Code:

  (eval-when-compile (require 'leaf))

  (leaf org-journal
    :straight t
    :custom ((org-journal-dir . my:d:org-journal)))

  (leaf org-roam
    :straight t
    :custom
    ((org-roam-directory . my:d:org-roam))
    :config
    (setq org-roam-db-location (expand-file-name "org-roam.db" my:d:org-roam))
    (org-roam-db-autosync-mode))

  (leaf org-download
    :straight t
    :custom ((org-download-image-dir . my:d:org-pictures)))

  (leaf toc-org
    :straight t
    :hook ((org-mode . toc-org-enable)
           (markdown-mode . toc-org-mode)))

  (leaf org-cliplink
    :straight t
    :bind ("C-x p i" . org-cliplink))

  (provide 'org/org-extensions)
  ;;; org/org-extensions.el ends here
#+end_src

*** org/org-export.el
:PROPERTIES:
:CUSTOM_ID: org-export
:END:

#+begin_src emacs-lisp :tangle lisp/org/org-export.el
;;; org/org-export.el --- Org export configuration -*- lexical-binding: t; -*-

;; Copyright (c) 2021-2025
;; Author: YAMASHITA, Takao
;; License: GNU GPL v3 or later

;;; Commentary:
;; Org export setup:
;; - LaTeX
;; - Hugo
;; - Markdown
;; - Preview

;;; Code:

(eval-when-compile (require 'leaf))

;; Org LaTeX Export
(leaf org-latex
  :after org
  :custom
  ((org-latex-packages-alist
    '(("" "graphicx" t)
      ("" "longtable" nil)
      ("" "wrapfig" nil)))
   (org-latex-pdf-process
    '("pdflatex -interaction nonstopmode -output-directory %o %f"
      "bibtex %b"
      "pdflatex -interaction nonstopmode -output-directory %o %f"
      "pdflatex -interaction nonstopmode -output-directory %o %f"))))

;; Hugo Export
(leaf ox-hugo
  :straight t
  :after ox
  :custom ((org-hugo-front-matter-format . "toml")))

;; Markdown
(leaf markdown-mode :straight t)
(leaf markdown-preview-mode :straight t)

(provide 'org/org-export)
;;; org/org-export.el ends here
#+end_src

*** dev/dev-lsp.el
:PROPERTIES:
:CUSTOM_ID: dev-lsp
:END:

#+begin_src emacs-lisp :tangle lisp/dev/dev-lsp.el
;;; dev/dev-lsp.el --- LSP support -*- lexical-binding: t; -*-

;; Copyright (c) 2021-2025
;; Author: YAMASHITA, Takao
;; License: GNU GPL v3 or later

;;; Commentary:
;; Language Server Protocol support
;; - eglot (lightweight)
;; - lsp-mode (feature-rich)
;; - Utility: enlarge read-process-output-max temporarily

;;; Code:

(eval-when-compile (require 'leaf))

;; Eglot
(leaf eglot
  :when (eq my:use-lsp 'eglot)
  :commands (eglot eglot-ensure)
  :hook ((prog-mode . (lambda ()
                        (when (eglot--guess-contact) (eglot-ensure)))))
  :custom ((eglot-autoreconnect . t)))

;; lsp-mode
(leaf lsp-mode
  :when (eq my:use-lsp 'lsp)
  :commands (lsp lsp-deferred)
  :custom ((lsp-keymap-prefix . "C-c l"))
  :hook ((prog-mode . lsp-deferred)))

;; Utility: temporarily enlarge read-process-output-max
(defun my/with-larger-rpom (size-bytes fn)
  "Call FN with `read-process-output-max` set to SIZE-BYTES temporarily."
  (let ((sym 'read-process-output-max)
        (orig (and (boundp 'read-process-output-max) read-process-output-max)))
    (when (boundp sym) (set sym size-bytes))
    (unwind-protect (funcall fn)
      (when (boundp sym) (set sym orig)))))

(provide 'dev/dev-lsp)
;;; dev/dev-lsp.el ends here
#+end_src

*** dev/dev-ai.el
:PROPERTIES:
:CUSTOM_ID: dev-ai
:END:

#+begin_src emacs-lisp :tangle lisp/dev/dev-ai.el
;;; dev/dev-ai.el --- AI-assisted development -*- lexical-binding: t; -*-

;; Copyright (c) 2021-2025
;; Author: YAMASHITA, Takao
;; License: GNU GPL v3 or later

;;; Commentary:
;; AI-assisted coding via Aidermacs.
;; - Supports OpenRouter and OpenAI backends.
;; - Configurable default model.

;;; Code:

(eval-when-compile (require 'leaf))

(leaf aidermacs
  :straight t
  :init
  (cond
   ((getenv "OPENROUTER_API_KEY")
    (setenv "OPENAI_API_BASE" "https://openrouter.ai/api/v1")
    (setenv "OPENAI_API_KEY"  (getenv "OPENROUTER_API_KEY"))
    (setopt aidermacs-default-model "openrouter/anthropic/claude-3.5-sonnet"))
   ((getenv "OPENAI_API_KEY")
    (setenv "OPENAI_API_BASE" "https://api.openai.com/v1")
    (setopt aidermacs-default-model "gpt-4o-mini"))
   (t
    (display-warning 'aidermacs
                     "No API keys set. Set OPENROUTER_API_KEY or OPENAI_API_KEY.")))
  (setopt aidermacs-retry-attempts 3
          aidermacs-retry-delay   2.0
          aidermacs-backend       'vterm))

(provide 'dev/dev-ai)
;;; dev/dev-ai.el ends here
#+end_src

*** dev/dev-term.el
:PROPERTIES:
:CUSTOM_ID: dev-term
:END:

#+begin_src emacs-lisp :tangle lisp/dev/dev-term.el
;;; dev/dev-term.el --- Terminal integration -*- lexical-binding: t; -*-

;; Copyright (c) 2021-2025
;; Author: YAMASHITA, Takao
;; License: GNU GPL v3 or later

;;; Commentary:
;; Provides terminal integration with vterm.

;;; Code:

(eval-when-compile (require 'leaf))

(leaf vterm
  :straight t)

(provide 'dev/dev-term)
;;; dev/dev-term.el ends here
#+end_src

*** dev/dev-build.el
:PROPERTIES:
:CUSTOM_ID: dev-build
:END:

#+begin_src emacs-lisp :tangle lisp/dev/dev-build.el
;;; dev/dev-build.el --- Build & Makefile tools -*- lexical-binding: t; -*-

;; Copyright (c) 2021-2025
;; Author: YAMASHITA, Takao
;; License: GNU GPL v3 or later

;;; Commentary:
;; Build system integration:
;; - Makefile strict tabs
;; - compile/recompile commands
;; - ANSI color in compilation buffers

;;; Code:

(eval-when-compile (require 'leaf))

(leaf make-mode
  :mode (("\\`Makefile\\'"    . makefile-gmake-mode)
         ("\\`GNUmakefile\\'" . makefile-gmake-mode)
         ("\\`makefile\\'"    . makefile-gmake-mode))
  :hook ((makefile-mode . (lambda ()
                            (setq-local indent-tabs-mode t
                                        tab-width 8
                                        show-trailing-whitespace t))))
  :config
  (leaf compile
    :bind (("C-c m c" . compile)
           ("C-c m r" . recompile)
           ("C-c m p" . project-compile))
    :custom ((compilation-scroll-output . t)
             (compilation-skip-threshold . 2))
    :init
    (defun my/set-make-compile-command ()
      "Use `make -k` when Makefile is present."
      (when (or (derived-mode-p 'makefile-mode)
                (locate-dominating-file default-directory "Makefile")
                (locate-dominating-file default-directory "GNUmakefile"))
        (setq-local compile-command "make -k")))
    (add-hook 'after-change-major-mode-hook #'my/set-make-compile-command))
  (leaf ansi-color
    :hook (compilation-filter . (lambda ()
                                  (let ((inhibit-read-only t))
                                    (ansi-color-apply-on-region compilation-filter-start (point-max)))))))

(provide 'dev/dev-build)
;;; dev/dev-build.el ends here
#+end_src

*** dev/dev-docker.el
:PROPERTIES:
:CUSTOM_ID: dev-docker
:END:

#+begin_src emacs-lisp :tangle lisp/dev/dev-docker.el
;;; dev/dev-docker.el --- Docker integration -*- lexical-binding: t; -*-

;; Copyright (c) 2021-2025
;; Author: YAMASHITA, Takao
;; License: GNU GPL v3 or later

;;; Commentary:
;; Docker development support:
;; - dockerfile-mode
;; - yaml-mode for compose files
;; - docker.el dashboard
;; - tramp-container
;; - tempel snippets

;;; Code:

(eval-when-compile (require 'leaf))

(leaf dockerfile-mode
  :straight t
  :mode (("Dockerfile\\(\\..*\\)?\\'" . dockerfile-mode)
         ("\\.dockerfile\\'"         . dockerfile-mode))
  :custom ((dockerfile-mode-command . "docker")))

(leaf yaml-mode
  :straight t
  :mode (("\\`docker-compose.*\\.ya?ml\\'" . yaml-mode)
         ("\\.ya?ml\\'"                   . yaml-mode)))

(leaf docker
  :straight t
  :commands (docker docker-containers docker-images docker-volumes docker-networks)
  :bind (("C-c d d" . docker)
         ("C-c d c" . docker-containers)
         ("C-c d i" . docker-images)
         ("C-c d v" . docker-volumes)
         ("C-c d n" . docker-networks)))

(leaf tramp-container
  :after tramp
  :init
  (setq tramp-container-method "docker"))

(leaf tempel
  :straight t
  :commands (tempel-insert)
  :bind (dockerfile-mode-map
         ("C-c d t" . tempel-insert))
  :init
  (with-eval-after-load 'tempel
    (defvar my:tempel-docker-templates
      '((dockerfile "FROM " p n
                    "WORKDIR /app" n
                    "COPY . /app" n
                    "RUN " p n
                    "CMD [" p "]" n)))
    (add-to-list 'tempel-user-elements my:tempel-docker-templates)))

(provide 'dev/dev-docker)
;;; dev/dev-docker.el ends here
#+end_src

*** vcs/vcs-magit.el
:PROPERTIES:
:CUSTOM_ID: vcs-magit
:END:

#+begin_src emacs-lisp :tangle lisp/vcs/vcs-magit.el
;;; vcs/vcs-magit.el --- Git integration with Magit -*- lexical-binding: t; -*-

;; Copyright (c) 2021-2025
;; Author: YAMASHITA, Takao
;; License: GNU GPL v3 or later

;;; Commentary:
;; Provides a user-friendly Git interface with Magit.

;;; Code:

(eval-when-compile (require 'leaf))

(leaf magit
  :straight t
  :bind (("C-x g" . magit-status)))

(provide 'vcs/vcs-magit)
;;; vcs/vcs-magit.el ends here
#+end_src

*** vcs/vcs-gutter.el
:PROPERTIES:
:CUSTOM_ID: vcs-gutter
:END:

#+begin_src emacs-lisp :tangle lisp/vcs/vcs-gutter.el
;;; vcs/vcs-gutter.el --- Show Git changes in fringe -*- lexical-binding: t; -*-

;; Copyright (c) 2021-2025
;; Author: YAMASHITA, Takao
;; License: GNU GPL v3 or later

;;; Commentary:
;; Highlights added/modified/deleted lines with git-gutter or diff-hl.

;;; Code:

(eval-when-compile (require 'leaf))

(leaf git-gutter
  :straight t
  :hook (prog-mode . git-gutter-mode)
  :custom ((git-gutter:update-interval . 2)))

(leaf diff-hl
  :straight t
  :hook ((prog-mode . diff-hl-mode)
         (magit-post-refresh . diff-hl-magit-post-refresh)))

(provide 'vcs/vcs-gutter)
;;; vcs/vcs-gutter.el ends here
#+end_src

*** vcs/vcs-forge.el
:PROPERTIES:
:CUSTOM_ID: vcs-forge
:END:

#+begin_src emacs-lisp :tangle lisp/vcs/vcs-forge.el
;;; vcs/vcs-forge.el --- GitHub/GitLab integration via Forge -*- lexical-binding: t; -*-

;; Copyright (c) 2021-2025
;; Author: YAMASHITA, Takao
;; License: GNU GPL v3 or later

;;; Commentary:
;; Provides issue and pull request management from within Emacs using Forge.
;; Optional; requires Magit.

;;; Code:

(eval-when-compile (require 'leaf))

(leaf forge
  :straight t
  :after magit)

(provide 'vcs/vcs-forge)
;;; vcs/vcs-forge.el ends here
#+end_src

*** utils/utils-functions.el
:PROPERTIES:
:CUSTOM_ID: utils-functions
:END:

#+begin_src emacs-lisp :tangle lisp/utils/utils-functions.el
  ;;; utils/utils-functions.el --- General utility functions -*- lexical-binding: t; -*-

  ;; Copyright (c) 2021-2025
  ;; Author: YAMASHITA, Takao
  ;; License: GNU GPL v3 or later

  ;;; Commentary:
  ;; Provides general-purpose utility functions used across modules.

  ;;; Code:

  (defun my/ensure-directory-exists (dir)
    "Ensure DIR exists; create if necessary."
    (unless (file-directory-p dir)
      (condition-case err
          (make-directory dir t)
        (error (warn "Failed to create directory: %s (%s)" dir (error-message-string err))))))

  (defun my/safe-load-file (file &optional noerror)
    "Load FILE safely. If NOERROR is non-nil, log error instead of raising."
    (when (and file (file-exists-p file))
      (condition-case err
          (load file nil 'nomessage)
        (error
         (funcall (if noerror #'message #'user-error)
                  "[utils] failed to load %s: %s"
                  file (error-message-string err))))))

  (provide 'utils/utils-functions)
  ;;; utils/utils-functions.el ends here
#+end_src

*** utils/utils-scratch.el
:PROPERTIES:
:CUSTOM_ID: utils-scratch
:END:

#+begin_src emacs-lisp :tangle lisp/utils/utils-scratch.el
;;; utils/utils-scratch.el --- Scratch buffer helpers -*- lexical-binding: t; -*-

;; Copyright (c) 2021-2025
;; Author: YAMASHITA, Takao
;; License: GNU GPL v3 or later

;;; Commentary:
;; Ensures `*scratch*` buffer always exists and provides quick restore.

;;; Code:

(defun my/create-scratch-buffer ()
  "Ensure that a `*scratch*` buffer exists."
  (unless (get-buffer "*scratch*")
    (with-current-buffer (get-buffer-create "*scratch*")
      (funcall initial-major-mode)
      (when (and initial-scratch-message
                 (not (string-empty-p initial-scratch-message)))
        (insert initial-scratch-message))
      (current-buffer))))

(defun my/recreate-scratch-buffer ()
  "Kill and recreate the `*scratch*` buffer."
  (interactive)
  (when (get-buffer "*scratch*")
    (kill-buffer "*scratch*"))
  (my/create-scratch-buffer)
  (switch-to-buffer "*scratch*"))

(add-hook 'kill-buffer-hook #'my/create-scratch-buffer)

(provide 'utils/utils-scratch)
;;; utils/utils-scratch.el ends here
#+end_src

*** utils/utils-backup.el
:PROPERTIES:
:CUSTOM_ID: utils-backup
:END:

#+begin_src emacs-lisp :tangle lisp/utils/utils-backup.el
  ;;; utils/utils-backup.el --- Backup and auto-save helpers -*- lexical-binding: t; -*-

  ;; Copyright (c) 2021-2025
  ;; Author: YAMASHITA, Takao
  ;; License: GNU GPL v3 or later

  ;;; Commentary:
  ;; Centralizes backup/auto-save behavior under no-littering directories.

  ;;; Code:

  (defun my/delete-old-backups ()
    "Delete backup files older than 7 days."
    (interactive)
    (let ((backup-dir (concat no-littering-var-directory "backup/"))
          (threshold (- (float-time (current-time)) (* 7 24 60 60))))
      (when (file-directory-p backup-dir)
        (dolist (file (directory-files backup-dir t))
          (when (and (file-regular-p file)
                     (< (float-time (file-attribute-modification-time
                                     (file-attributes file)))
                        threshold))
            (delete-file file))))))

  (add-hook 'emacs-startup-hook #'my/delete-old-backups)

  (provide 'utils/utils-backup)
  ;;; utils/utils-backup.el ends here
#+end_src

*** utils/utils-async.el
:PROPERTIES:
:CUSTOM_ID: utils-async
:END:

#+begin_src emacs-lisp :tangle lisp/utils/utils-async.el
;;; utils/utils-async.el --- Async helpers -*- lexical-binding: t; -*-

;; Copyright (c) 2021-2025
;; Author: YAMASHITA, Takao
;; License: GNU GPL v3 or later

;;; Commentary:
;; Provides wrappers for safe async execution.

;;; Code:

(defun my/safe-run-async (task)
  "Run TASK asynchronously, catching and reporting any errors."
  (run-at-time 0 nil
               (lambda ()
                 (condition-case err
                     (funcall task)
                   (error (message "[async] error: %s" err))))))

(provide 'utils/utils-async)
;;; utils/utils-async.el ends here
#+end_src

* Personal Configuration
:PROPERTIES:
:CUSTOM_ID: personal
:END:

This module defines **personal settings and device-specific configurations**.
It customizes identity, fonts, input sources, device preferences, and Apple Music control.

- **User Identity**: Name, email, encryption, and font overrides.
- **Directories**: Cloud, blog, and excluded paths.
- **Input Source (macOS)**: Automatic IME switching with `sis`.
- **Device Settings**: Logitech MX Ergo S mouse behavior.
- **Apple Music Control (macOS)**: Play, pause, skip, playlist, and track info integration via AppleScript.
- **Hydra Menu**: Quick keybindings for music controls.

#+begin_src emacs-lisp :tangle personal/user.el
  ;;; Personal Configuration -*- lexical-binding: t; -*-

  ;; Copyright (c) 2021-2025 YAMASHITA, Takao
  ;; Licensed under the GNU General Public License version 3 or later.

  ;;; Commentary:
  ;; Personal settings and device-specific configurations
  ;;; Code:

  (eval-when-compile (require 'leaf))

  ;; Personal Settings
  (leaf *personals
    :init
    (setq user-full-name "YAMASHITA, Takao"
  	user-mail-address "tjy1965@gmail.com"
  	inhibit-compacting-font-caches t
  	plstore-cache-passphrase-for-symmetric-encryption t)

    ;; Font overrides (optional; only apply if available)
    (setq my:font-default "JetBrains Mono NL"
  	my:font-alt "Noto Sans JP"
  	my:emoji-font "Apple Color Emoji"
  	my:font-size 16)

    (defvar my:d:cloud
      (expand-file-name "Documents/" (getenv "HOME"))
      "Cloud storage base directory.")
    (defvar my:d:blog
      (concat my:d:cloud "devel/repos/mysite/")
      "Blog directory.")
    (defvar my:f:capture-blog-file
      (expand-file-name "all-posts.org" my:d:blog))
    (defvar my:d:excluded-directories
      (list (expand-file-name "Library/Accounts" (getenv "HOME")))
      "Exclude directory.")

    (mapc #'my/ensure-directory-exists (list my:d:cloud my:d:blog))

    ;; Clean up load-path (exclude unwanted directories)
    (setq load-path (seq-remove (lambda (dir)
                                  (member dir my:d:excluded-directories))
                                load-path)))

  ;; Smart Input Source (auto switch input source, e.g. English <-> Japanese)
  ;; macOS requirement: `brew tap laishulu/homebrew && brew install macism`
  (leaf sis
    :straight t
    :commands (sis-ism-lazyman-config sis-global-cursor-color-mode
                                      sis-global-respect-mode sis-global-inline-mode)
    ;; Use `emacs-startup` (not `emacs-startup-hook`) in leaf's :hook syntax.
    :hook (emacs-startup .
  		       (lambda ()
  			 ;; Defer IME wiring until after startup; avoid blocking init.
  			 (when (fboundp 'sis-ism-lazyman-config)
  			   (sis-ism-lazyman-config
  			    "com.apple.keylayout.ABC"
  			    "com.apple.inputmethod.Kotoeri.RomajiTyping.Japanese"
  			    'macism))
  			 (when (fboundp 'sis-global-cursor-color-mode)
  			   (sis-global-cursor-color-mode t))
  			 (when (fboundp 'sis-global-respect-mode)
  			   (sis-global-respect-mode t))
  			 (when (fboundp 'sis-global-inline-mode)
  			   (sis-global-inline-mode t)))))

  (add-hook 'after-load-theme-hook
            (lambda ()
              (set-face-background 'cursor (frame-parameter nil 'cursor-color))))

  ;; Logitech MX Ergo S Configuration
  (leaf *device/MX_ErgoS
    :init
    (setq mouse-wheel-scroll-amount '(1 ((shift) . 5) ((control) . 10))
          mouse-wheel-progressive-speed nil
          scroll-conservatively 10000
          scroll-margin 2
          scroll-preserve-screen-position t
          mac-mouse-wheel-smooth-scroll t
          mouse-wheel-tilt-scroll t
          mouse-wheel-flip-direction nil)

    (global-set-key [mouse-2] 'yank)
    (global-set-key [mouse-4] 'previous-buffer)
    (global-set-key [mouse-5] 'next-buffer))

  ;; Apple Music Controller (macOS only)
  (when (eq system-type 'darwin)
    ;; Core functions for AppleScript execution
    (defun my/apple-music-osascript-async (script &optional callback)
      "Run AppleScript SCRIPT asynchronously, calling CALLBACK with output."
      (let* ((proc-name "apple-music-async")
             (buffer-name "*Apple Music Async*")
             (osascript-cmd (list "osascript" "-e" script))
             (proc (apply #'start-process proc-name buffer-name osascript-cmd)))
        (when callback
          (set-process-sentinel
           proc
           (lambda (process event)
             (when (string= event "finished\n")
               (with-current-buffer (process-buffer process)
                 (let ((output (string-trim (buffer-string))))
                   (funcall callback output)))
               (kill-buffer (process-buffer process))))))))

    (defun my/apple-music-osascript-sync (script)
      "Run AppleScript SCRIPT synchronously and return trimmed output."
      (string-trim
       (shell-command-to-string
        (format "osascript -e '%s'" script))))

    ;; Player controls
    (defun my/apple-music-play-pause () (interactive)
      (my/apple-music-osascript-async "tell application \"Music\" to playpause"))

    (defun my/apple-music-next-track () (interactive)
      (my/apple-music-osascript-async "tell application \"Music\" to next track"))

    (defun my/apple-music-previous-track () (interactive)
      (my/apple-music-osascript-async "tell application \"Music\" to previous track"))

    ;; Track info
    (defun my/apple-music-current-track-info ()
      "Return current track info: Title — Artist [Album]."
      (interactive)
      (let ((info (my/apple-music-osascript-sync
                   "tell application \"Music\" \
  to (get name of current track) & \" — \" & (get artist of current track) & \" [\" & (get album of current track) & \"]\"")))
        (if (called-interactively-p 'any)
            (message "%s" info)
          info)))

    ;; Playlist support
    (defun my/apple-music-get-playlists ()
      "Return a list of playlist names from Apple Music."
      (split-string
       (my/apple-music-osascript-sync
        "tell application \"Music\" to get name of playlists")
       ", "))

    (defun my/apple-music-play-playlist (playlist)
      "Play the Apple Music playlist named PLAYLIST."
      (interactive
       (list (completing-read "Playlist: " (my/apple-music-get-playlists))))
      (my/apple-music-osascript-async
       (format "tell application \"Music\" to play playlist \"%s\"" playlist)))

    ;; Hydra interface
    (with-eval-after-load 'hydra
      (defhydra hydra-apple-music (:hint nil)
        "
  Apple Music:
  _p_: Play/Pause  _n_: Next  _b_: Back  _l_: Playlist  _i_: Info  _q_: Quit
  "
        ("p" my/apple-music-play-pause)
        ("n" my/apple-music-next-track)
        ("b" my/apple-music-previous-track)
        ("l" my/apple-music-play-playlist)
        ("i" my/apple-music-current-track-info)
        ("q" nil "quit"))

      (global-set-key (kbd "C-c m") #'hydra-apple-music/body)))

  (provide 'user)
  ;;; user.el ends here
#+end_src

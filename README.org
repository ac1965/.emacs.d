# -*- mode: org; coding: utf-8-unix; indent-tabs-mode: nil -*-
#+title: ac1965's Emacs literate configuration =.emacs.d=
#+startup: content
#+author: YAMASHITA Takao
#+options: auto-id:t H:6

[[file:demo.png]]

* Installation

This is the script that will build Emacs.

[[https://github.com/ac1965/dotfiles/blob/master/.bin/build-emacs.sh][build-emacs.sh]]

  #+begin_src shell :eval never
    $ GITHUB_REPOS=/Users/ac1965/devel/src build-emacs.sh --native-compilation
  #+end_src

You build Emacs using a script (=build-emacs.sh=) and want to specify the location of your GitHub repositories.

This sets the environment variable ~GITHUB_REPOS~ to the directory ~/Users/ac1965/devel/src~.
This directory likely contains source code repositories, including the Emacs repository if you're building Emacs from source.
It may refer to the ~GITHUB_REPOS~ variable to know where the Emacs source code is located, or to download dependencies from GitHub repositories.

- *Build Emacs*

  #+begin_src shell :eval never
    uname -a
    Darwin pooh.local 24.2.0 Darwin Kernel Version 24.2.0: Fri Dec  6 19:04:03 PST 2024; root:xnu-11215.61.5~2/RELEASE_ARM64_T8132 arm64
  #+end_src

  - GNU Emacs 31.0.50
  |-+-|
  | Commit | 2f1052d9b0de551dc3a463ed54e21c63517497ab |
  | Branch | master |
  | System | aarch64-apple-darwin24.2.0 |
  | Date | 2024-12-31 08:33:01 (JST) |
  | Patch | without ns-inline.patch |
  | Features | ACL DBUS GLIB GNUTLS LCMS2 LIBXML2 MODULES NATIVE_COMP NOTIFY KQUEUE NS PDUMPER PNG RSVG SQLITE3 THREADS TOOLKIT_SCROLL_BARS TREE_SITTER WEBP XIM XWIDGETS ZLIB |
  |-+-|

  *OLD Machine*

  #+begin_src shell :eval never
    uname -a
    Darwin alice.local 24.3.0 Darwin Kernel Version 24.3.0: Fri Dec  9 19:45:54 PST 2024; root:xnu-11215.80.501.2~1/RELEASE_x86_64 x86_64
  #+end_src

  - GNU Emacs 31.0.50
  |-+-|
  | Commit | 63cc335a524ab5b6fb8e9bc93041382baf1321db |
  | Branch | master |
  | System | x86_64-apple-darwin24.1.0 |
  | Date | 2024-12-28 21:12:21 (JST) |
  | Patch | without ns-inline.patch |
  | Features | ACL DBUS GIF GLIB GMP GNUTLS JPEG LCMS2 LIBXML2 MODULES NATIVE_COMP NOTIFY KQUEUE NS PDUMPER PNG RSVG SQLITE3 THREADS TIFF TOOLKIT_SCROLL_BARS TREE_SITTER WEBP XIM ZLIB |
  |-+-|

- *Configuration files*

You are cloning a GitHub repository (https://github.com/ac1965/.emacs.d) into the =~/.emacs.d= directory on your local machine.

  #+begin_src shell :eval never
    $ git clone https://github.com/ac1965/.emacs.d ~/.emacs.d
  #+end_src

* Configuration
** Eary-init.el
/Here's a summary of what it does:/

- *Purpose*
 - The early-init.el file is intended for customizations that need to take effect before the standard initialization file (init.el) runs. This is particularly useful for settings related to package management and performance optimizations.

   #+begin_src emacs-lisp :tangle no
     ;; early-init.el --- Early Init File for >= Emacs 27.

     ;; Copyright (c) 2021-2024 YAMASHITA Takao <ac1965@ty07.net>
     ;;
     ;; This file is free software: you can redistribute it and/or modify it
     ;; under the terms of the GNU General Public License as published by the
     ;; Free Software Foundation, either version 3 of the License, or (at
     ;; your option) any later version.
     ;;
     ;; This file is distributed in the hope that it will be useful, but
     ;; WITHOUT ANY WARRANTY; without even the implied warranty of
     ;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
     ;; General Public License for more details.
     ;;
     ;; You should have received a copy of the GNU General Public License
     ;; along with this file.  If not, see <http://www.gnu.org/licenses/>.

     ;;; Commentary:

     ;;; Code:

     (when (eq system-type 'darwin)
       ;; Utility function to set environment variables
       (defun my-set-env-paths (env-var paths)
         "Set ENV-VAR to a colon-separated list of PATHS."
         (setenv env-var (string-join paths ":")))

       ;; Configure GCC-related paths
       (let ((gcc-base-paths (list "/opt/homebrew/opt/gcc/lib/gcc/current"
                                   "/opt/homebrew/opt/libgccjit/lib/gcc/current"
                                   "/opt/homebrew/opt/gcc/lib/gcc/current/gcc/aarch64-apple-darwin/14"
                                   "/usr/local/opt/gcc/lib/gcc/current"
                                   "/usr/local/opt/libgccjit/lib/gcc/current"
                                   "/usr/local/opt/gcc/lib/gcc/current/gcc/x86_64-apple-darwin/14"))
             (gcc-paths nil))
         ;; Filter existing directories from the base paths
         (setq gcc-paths (seq-filter #'file-directory-p gcc-base-paths))
         (when gcc-paths
           (my-set-env-paths "LIBRARY_PATH" gcc-paths)))

       ;; Automatically detect and set Homebrew paths
       (let ((brew-paths '("/opt/homebrew/bin" "/usr/local/bin")))
         (dolist (path brew-paths)
           (when (file-directory-p path)
             ;; Prepend the Homebrew path to PATH
             (my-set-env-paths "PATH" (cons path (split-string (getenv "PATH") ":")))
             ;; Add the Homebrew path to exec-path
             (add-to-list 'exec-path path)))))

     (add-hook 'emacs-startup-hook
               (lambda ()
                 (message "Emacs ready in %s with %d garbage collections."
                          (format "%.2f seconds"
                                  (float-time
                                   (time-subtract after-init-time before-init-time)))
                          gcs-done)))

     (add-hook 'focus-out-hook #'garbage-collect)

     (add-hook 'after-init-hook
               (lambda ()
                 (setq gc-cons-threshold (* 16 1024 1024))))

     (when (boundp 'load-prefer-newer)
       (setq load-prefer-newer t))

     (when (featurep 'native-compile)
       (setq native-comp-async-report-warnings-errors 'silent
             native-comp-speed 2
             comp-deferred-compilation t
             native-comp-deferred-compilation-deny-list '("/intero/")))

     (when (string= system-type "darwin")
       (setq dired-use-ls-dired t
             insert-directory-program "gls"
             dired-listing-switches "-aBhl --group-directories-first"))


     ;; custom-set-variables was added by Custom.
     ;; If you edit it by hand, you could mess it up, so be careful.
     ;; Your init file should contain only one such instance.
     ;; If there is more than one, they won't work right.
     (custom-set-variables
      '(byte-compile-warnings '(not cl-functions obsolete))
      '(create-lockfiles nil)
      '(cursor-in-non-selected-windows nil)
      '(debug-on-error nil)
      '(enable-recursive-minibuffers t)
      '(epg-gpg-program "gpg")
      '(file-name-handler-alist nil t)
      '(font-lock-maximum-decoration nil)
      '(font-lock-maximum-size nil)
      '(frame-inhibit-implied-resize t)
      '(frame-resize-pixelwise t)
      '(frame-title-format '("%b") t)
      '(gc-cons-percentage 0.2)
      '(gc-cons-threshold (* 512 1024 1024))
      '(read-process-output-max (* 1024 1024))
      '(large-file-warning-threshold 100000000)
      '(global-prettify-symbols-mode t)
      '(history-delete-duplicates t)
      '(history-length 1000)
      '(indent-tabs-mode nil)
      '(inhibit-startup-echo-area-message t)
      '(inhibit-startup-screen t)
      '(init-file-debug nil t)
      '(initial-buffer-choice t)
      '(initial-major-mode 'emacs-lisp-mode)
      '(initial-scratch-message nil)
      '(menu-bar-mode t)
      '(package-enable-at-startup nil)
      '(package-selected-packages nil)
      '(ring-bell-function 'ignore)
      '(scroll-bar-mode nil)
      '(scroll-conservatively 101)
      '(scroll-preserve-screen-position t)
      '(scroll-margin 8)
      '(tab-bar-mode t)
      '(tab-width 4)
      '(text-quoting-style 'straight)
      '(tool-bar-mode nil)
      '(truncate-lines t)
      '(use-short-answers t)
      '(window-divider-default-places 'right-only)
      '(window-divider-default-right-width 16)
      '(x-underline-at-descent-line t))

     (provide 'early-init)
     ;;; early-init.el ends here
   #+end_src
** init.el
/Here's a summary of what it does:/

- *Org-mode-based Configuration*
   - Using `org-babel-load-file` to load the main configuration from an `org-mode` file is an efficient and well-documented approach. This makes your configuration cleaner and easier to maintain.


   #+begin_src emacs-lisp :tangle no
     ;;; -- Emacs.d -*- lexical-binding: t; -*-

     ;; Copyright (C) 2024 YAMASHITA Takao

     ;; Author: YAMASHITA Takao <ac1965@ty07.net>
     ;; Keywords: emacs.d

     ;; This file is not part of GNU Emacs.

     ;; This program is free software; you can redistribute it and/or modify it under
     ;; the terms of the GNU General Public License as published by the Free Software
     ;; Foundation; either version 3 of the License, or (at your option) any later
     ;; version.

     ;; This program is distributed in the hope that it will be useful, but WITHOUT
     ;; ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
     ;; FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
     ;; details.

     ;; You should have received a copy of the GNU General Public License along with
     ;; GNU Emacs; see the file COPYING. If not, write to the Free Software
     ;; Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,
     ;; USA.

     ;;; Commentary:

     ;; This is the initialisation file for GNU/Emacs.  At the end of this
     ;; file, it will call the proper configuration file written in
     ;; `org-mode'.  Visit that document to see the proper / full
     ;; documentation, code-snippets, and the idea behind it.
     ;;
     ;; The sole purpose of this file is to initialise loading the proper
     ;; configuration file.  Everything else is out-of-scope.
     ;;
     ;; Although you will find some code that SHOULD belong in the
     ;; `README.org', but I have put it here since it is important to be set
     ;; at the beginning.

     ;;; License: GPLv3

     ;;; Code:

     ;;; Initialization
     (defvar my:d (file-name-directory (file-chase-links load-file-name)) "The giant turtle on which the world rests.")
     (defvar my:d:cache (concat my:d ".cache/") "Cache directory.")

     (setq package-user-dir (concat my:d:cache "elpa")
           no-littering-etc-directory (concat my:d ".etc/")
           no-littering-var-directory (concat my:d ".var/"))

     ;; Startup performance optimization.
     (setq gc-cons-threshold (* 50 1000 1000)
           read-process-output-max (* 1024 1024)
           inhibit-default-init t)

     ;; Native Comp
     (when (and (fboundp 'startup-redirect-eln-cache)
                (fboundp 'native-comp-available-p)
                (native-comp-available-p))
       (setq native-comp-eln-load-path
             (list (expand-file-name "eln-cache/" my:d:cache)))
       (make-directory (car native-comp-eln-load-path) t)
       (startup-redirect-eln-cache
        (convert-standard-filename
         (expand-file-name  "eln-cache/" my:d:cache))))

     ;;; Window Management
     (defvar my/saved-window-config nil "Store window layout.")

     ;; Ensure package management and load org-babel
     (require 'package)
     (unless (package-installed-p 'org)
       (package-refresh-contents)
       (package-install 'org))

     ;; Load settings from README.org using org-babel
     (require 'org)
     (setq init-org-file (expand-file-name "README.org" my:d))
     (when (file-exists-p init-org-file)
       (condition-case err
           (org-babel-load-file init-org-file)
         (error (message "Error loading org file: %s" err))))

     (provide 'init)
     ;;; init.el ends here
   #+end_src
** Emacs Configuration
*** Header
   #+begin_src emacs-lisp
     ;;; README.el --- Emacs.d -*- lexical-binding: t; -*-

     ;; Copyright (C) 2024 YAMASHITA Takao

     ;; Author: YAMASHITA Takao <ac1965@ty07.com>
     ;; Keywords: emacs.d
     ;; $Lastupdate: 2024/12/31 23:19:06 $

     ;; This file is not part of GNU Emacs.

     ;; This program is free software; you can redistribute it and/or modify it under
     ;; the terms of the GNU General Public License as published by the Free Software
     ;; Foundation; either version 3 of the License, or (at your option) any later
     ;; version.

     ;; This program is distributed in the hope that it will be useful, but WITHOUT
     ;; ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
     ;; FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
     ;; details.

     ;; You should have received a copy of the GNU General Public License along with
     ;; GNU Emacs; see the file COPYING. If not, write to the Free Software
     ;; Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,
     ;; USA.

     ;;; Commentary:

     ;;; License: GPLv3

     ;;; Code:
   #+end_src
*** Leaf
/This Emacs configuration sets up package management and defines essential packages using `leaf` for a more structured approach. Here's a summary/

- *Package Management*
  - Sets the package directory with `package-user-dir` using `my:d:cache`.
  - Configures package archives (GNU and MELPA) and initializes the package system with `package-initialize`.

- *Leaf Setup*
  - Installs and initializes `leaf`, a package that simplifies package configuration in Emacs.
  - Adds support for additional ~leaf~ keywords using ~leaf-keywords~.


  #+begin_src emacs-lisp
    ;;; Package Management
    (eval-and-compile
      (customize-set-variable
       'package-archives '(("gnu" . "https://elpa.gnu.org/packages/")
                           ("melpa" . "https://melpa.org/packages/")))
      (package-initialize)
      (use-package leaf :ensure t)
      (leaf leaf-keywords
        :ensure t
        :config (leaf-keywords-init)))
  #+end_src
*** User define
/This snippet of code is designed to load a *user-specific configuration* in Emacs. Here's how it works/

1. *`setq user-specific-config (concat my:d user-login-name ".el")`*
   - This defines a variable `user-specific-config`, which constructs the file path for the user-specific configuration file.
   - `my:d` is a variable (likely defined earlier) that represents the directory where your Emacs configurations are stored.
   - `user-login-name` is a built-in Emacs variable that stores the current user's login name.
   - The resulting file path is something like `"/path/to/config/username.el"`, where `username.el` is the Emacs Lisp file for that specific user.

2. *`(if (file-exists-p user-specific-config) (load user-specific-config))`*
   - This checks if the user-specific configuration file exists using `file-exists-p`.
   - If the file exists, it loads the file using the `load` function, allowing users to have personalized settings and configurations based on their login name.

*Use Case:*
- This is useful in multi-user environments where different users have distinct Emacs preferences.
- Each user can have their own configuration file (e.g., `john.el`, `jane.el`), and this code will automatically load the appropriate one when they start Emacs.

Let me know if you need further adjustments or if this integrates well with your setup!

  #+begin_src emacs-lisp
    
    ;; Loading user-specific settings.

    (setq user-specific-config (concat my:d user-login-name ".el"))
    (if (file-exists-p user-specific-config) (load user-specific-config))
  #+end_src

*** UI

/This Emacs configuration sets up various UI improvements for a better user experience. Here's a breakdown:/

- *UI setting*
  A modern look is achieved with golden-ratio, ef-themes, and teemacs. These packages adjust window sizes, set themes, and add a sidebar for file navigation.


  #+begin_src emacs-lisp
    ;;; UI Configurations
    (leaf UI
      :preface
      ;; This two functions for saving and restoring window layouts
      (defun my/save-window-layout ()
        "Save the current window configuration."
        (interactive)
        (setq my/saved-window-config (current-window-configuration))
        (message "Window configuration saved."))

      (defun my/restore-window-layout ()
        "Restore the saved window configuration.
    If no configuration is saved, notify the user."
        (interactive)
        (if my/saved-window-config
            (progn
              (set-window-configuration my/saved-window-config)
              (message "Window configuration restored."))
          (message "No window configuration to restore.")))

      ;; This function customizes how buffers are displayed by attempting
      ;; to reuse the currently selected window under certain conditions.
      (defun my/display-buffer-same-window (buffer alist)
        (unless (or (cdr (assq 'inhibit-same-window alist))
                    (window-minibuffer-p)
                    (window-dedicated-p))
          (window--display-buffer buffer (selected-window) 'reuse alist)))

      ;; This function splits the window below, either relative
      ;; to the parent window or the root window, based on the provided argument.
      (defun my/split-below (arg)
        "Split window below from the parent or from root with ARG."
        (interactive "P")
        (split-window (if arg (frame-root-window)
                        (window-parent (selected-window)))
                      nil 'below nil))

      ;; This function toggles the "dedication" status of the selected window.
      (defun my/toggle-window-dedication ()
        "Toggles window dedication in the selected window."
        (interactive)
        (set-window-dedicated-p (selected-window)
                                (not (window-dedicated-p (selected-window)))))

      :config
      ;; Enable fullscreen mode if in a graphical display
      (when (display-graphic-p)
        (set-frame-parameter nil 'fullscreen 'fullboth))

      ;; Golden Ratio: adjusts window sizes dynamically for an ideal viewing ratio
      (leaf golden-ratio :ensure t :global-minor-mode t)

      ;; Theme: Setting a visually pleasant theme
      (leaf ef-themes :ensure t :config (load-theme 'ef-frost t))

      ;; Modeline configurations for better visibility and information display
      (leaf modeline
        :config
        (leaf minions :ensure t
          :config
          (minions-mode 1)
          (setq minions-mode-line-lighter "[+]"))
        ;; Enable time and battery display in modeline
        (setq display-time-interval 30
              display-time-day-and-date t
              display-time-24hr-format t)
        (display-time-mode 1))

      ;; Add spacious padding for readability, toggle with F7 key if needed
      (leaf spacious-padding :ensure t
        :config
        ;; Read the doc string of `spacious-padding-subtle-mode-line' as it
        ;; is very flexible and provides several examples.
        (setq spacious-padding-subtle-mode-line
              `( :mode-line-active 'default
                 :mode-line-inactive vertical-border))
        ;; These is the default value, but I keep it here for visiibility.
        (setq spacious-padding-widths '( :internal-border-width 15))
        (spacious-padding-mode 1)
        (define-key global-map (kbd "<f7>") #'spacious-padding-mode))

      ;; enable global-tab-line-mode
      (leaf tabmode :config (global-tab-line-mode))

      ;; Treemacs
      (leaf treemacs :ensure t
        :bind
        (:treemacs-mode-map
         ([mouse-1] . #'treemacs-single-click-expand-action))
        :custom
        ((treemacs-no-png-images . nil)
         (treemacs-filewatch-mode . t)
         (treemacs-follow-mode . t)
         (treemacs-tag-follow-mode . nil)
         (treemacs-tag-follow-cleanup . nil)
         (treemacs-expand-after-init . t)
         (treemacs-indentation . 2)
         (treemacs-missing-project-action . 'remove))
        :hook
        (treemacs-mode-hook . (lambda ()
                                (setq mode-line-format nil)
                                (display-line-numbers-mode 0)))))
  #+end_src
*** Fonts
/This Emacs configuration defines font settings using the `leaf` package for easier management. Here’s a breakdown of its functionality/

- *Fonts and Icons*
   nerd-icons provides icons in file listings. emojify adds emoji support in Org mode. Font settings are applied across frames.

   #+begin_src emacs-lisp
     ;;; Font Configuration using leaf for better font management and icon support.
     (leaf Fonts
       :preface
       ;; Font existence check
       (defun font-exists-p (font) (member font (font-family-list)))

       ;; Default font setup function
       (defun font-setup (&optional frame)
         "Set up the default font and icon fonts for FRAME."
         (when (font-exists-p conf:font-family)
           (set-face-attribute 'default frame :family conf:font-family
                               :height (* conf:font-size 10))
           (set-fontset-font t 'unicode
                             (font-spec :family "Noto Color Emoji") nil 'prepend)))

       :config
       ;; Font settings
       (unless (boundp 'conf:font-family)
         (setq conf:font-family "JetBrains Mono"
               "Default font family"))
       (unless (boundp 'conf:font-size)
         (setq conf:font-size 16
               "Default font size"))

       ;; Icons settings
       (leaf nerd-icons :if (display-graphic-p) :ensure t)
       (leaf nerd-icons-dired
         :if (display-graphic-p)
         :ensure t
         :hook (dired-mode-hook . nerd-icons-dired-mode))

       ;; Ligature
       (leaf ligature :ensure t
         :config
         (ligature-set-ligatures 'prog-mode '("->" "=>" "::" "===" "!=" "&&" "||"))
         (global-ligature-mode t))

       ;; Load fonts at startup or in daemon mode
       (if (daemonp)
           (add-hook 'after-make-frame-functions #'font-setup)
         (font-setup)))
  #+end_src
*** Keybind
/This Emacs configuration defines custom key bindings using the `leaf` package to streamline common tasks. Here's a summary of the key aspects/

- *Key Bindings*
  Custom keybindings provide shortcuts for common actions, improving efficiency by reducing the need to rely on menus or commands.
  Here we set up custom bindings for window navigation, editing, and more.


  #+begin_src emacs-lisp
    (leaf KeyBinding
      :preface
      (defun my/toggle-linum-lines ()
        "Toggle display line number."
        (interactive)
        (display-line-numbers-mode (if display-line-numbers-mode -1 1)))

      (defun my/toggle-window-split ()
        "Toggle window split between horizontal and vertical."
        (interactive)
        (if (= (count-windows) 2)
            (let* ((this-win-buffer (window-buffer))
                   (next-win-buffer (window-buffer (next-window)))
                   (this-win-edges (window-edges (selected-window)))
                   (next-win-edges (window-edges (next-window)))
                   (this-win-2nd
                    (not (and (<= (car this-win-edges)
                                  (car next-win-edges))
                              (<= (cadr this-win-edges)
                                  (cadr next-win-edges)))))
                   (splitter
                    (if (= (car this-win-edges)
                           (car (window-edges (next-window))))
                        'split-window-horizontally
                      'split-window-vertically)))
              (delete-other-windows)
              (let ((first-win (selected-window)))
                (funcall splitter)
                (if this-win-2nd (other-window 1))
                (set-window-buffer (selected-window) this-win-buffer)
                (set-window-buffer (next-window) next-win-buffer)
                (select-window first-win)
                (if this-win-2nd (other-window 1))))))

      (defun my/dired-view-file-other-window ()
        "Open the selected file or directory in another window.

    If the target is a directory, navigate to it.
    If the target is a file, open it in read-only mode in another window."
        (interactive)
        (let ((file (dired-get-file-for-visit)))
          (if (file-directory-p file)
              (or (and (cdr dired-subdir-alist)
                       (dired-goto-subdir file))
                  (dired file))
            (view-file-other-window file))))

      (defun my/find-keybinding-conflicts ()
        "Find and display keybinding conflicts in all active keymaps."
        (interactive)
        (let ((conflicts (make-hash-table :test 'equal))
              (buffer-name "*Keybinding Conflicts*"))
          ;; Collect conflicts from all active keymaps
          (mapatoms (lambda (keymap)
                      (when (and (boundp keymap) (keymapp (symbol-value keymap)))
                        (map-keymap (lambda (_ key-binding)
                                      (when (keymapp key-binding)
                                        (map-keymap
                                         (lambda (key cmd)
                                           ;; Only process valid commands
                                           (when (or (symbolp cmd) (functionp cmd))
                                             (let* ((key (vector key))
                                                    (existing (gethash key conflicts)))
                                               (if existing
                                                   (puthash key (cons cmd existing) conflicts)
                                                 (puthash key (list cmd) conflicts)))))
                                         key-binding)))
                                    (symbol-value keymap)))))
          ;; Create and populate the result buffer
          (with-current-buffer (get-buffer-create buffer-name)
            (read-only-mode -1) ; Ensure the buffer is writable
            (erase-buffer)      ; Clear any previous content
            (insert "Keybinding Conflicts:\n\n")
            (maphash (lambda (key cmds)
                       (when (> (length cmds) 1)
                         (insert (format "%s => %s\n"
                                         (key-description key)
                                         (mapconcat (lambda (cmd)
                                                      (if (symbolp cmd)
                                                          (symbol-name cmd)
                                                        (format "%s" cmd)))
                                                    cmds ", ")))))
                     conflicts)
            (read-only-mode 1)) ; Make the buffer read-only for safety
          ;; Display the buffer
          (switch-to-buffer buffer-name)))

      (defun my/replace-string-in-buffer ()
        "Prompt the user for a string to replace and its replacement,
    then replace all occurrences in the buffer."
        (interactive)
        (let ((from (read-string "Replace: "))
              (to (read-string "With: ")))
          (save-excursion
            (goto-char (point-min))
            (while (search-forward from nil t)
              (replace-match to nil t)))))

      (defun my/open-init-file ()
        "Open the init file for quick access."
        (interactive)
        (find-file user-init-file))

      :config
      (leaf-keys
       ;; Basic editing operations
       (("C-h"           . backward-delete-char)  ;; Delete character before the cursor
        ("C-?"           . help-command)          ;; Open help
        ("C-/"           . undo-fu-only-undo)     ;; Undo
        ("C-z"           . undo-fu-only-redo)     ;; Redo
        ("C-c i"         . my/open-init-file)     ;; Open init file

        ;; Window navigation
        ("M-o"          . ace-window)             ;; Quick window switch
        ("C-."          . other-window)           ;; Switch to the other window
        ("C-c w l"      . my/toggle-linum-lines)  ;; Toggle line numbers
        ("C-c w 2"      . my/split-below)
        ("C-c w d"      . my/toggle-window-dedication)
        ("C-c w s"      . my/save-window-layout)
        ("C-c w r"      . my/restore-window-layout)
        ("C-c d s"      . my/save-desktop-session)
        ("C-c d r"      . my/restore-desktop-session)

        ;; Text scaling
        ("C-+"          . text-scale-increase)    ;; Increase text size
        ("C--"          . text-scale-decrease)    ;; Decrease text size

        ;; Emacs control
        ("C-q"          . kill-emacs)             ;; Quit Emacs
        ("M-q"          . save-buffers-kill-emacs) ;; Save buffers and quit

        ;; Commenting
        ("C-c ;"        . comment-region)         ;; Comment selected region
        ("C-c :"        . uncomment-region)       ;; Uncomment selected region

        ;; File operations
        ("C-c o"        . find-file)              ;; Open file
        ("C-c v"        . find-file-read-only)    ;; Open file in read-only mode
        ("C-c z"        . toggle-auto-save-visited-mode) ;; Toggle auto-save-visited-mode

        ;; Buffer operations
        ("C-c k"        . kill-buffer-and-window) ;; Kill buffer and close window

        ;; Search and replace
        ("C-c r" . my/replace-string-in-buffer)   ;; Replace string in buffer
        ("C-c C-r"      . consult-ripgrep)        ;; Ripgrep search

        ;; Sidebar
        ("C-c t t"      . treemacs)

        ;; Alignment and line number toggle
        ("C-c M-a"      . align-regexp)           ;; Align using regex

        ;; Org Capture
        ("C-c a"        . org-agenda)
        ("C-c l"        . org-store-link)
        ("C-c c"        . org-capture)            ;; Capture Org entry

        ;; Scrolling
        ("C-s-<up>"     . scroll-down-command)    ;; Scroll down
        ("C-s-<down>"   . scroll-up-command)      ;; Scroll up

        ;; Frame management
        ("s-o"          . find-file-other-frame)  ;; Open file in other frame
        ("s-m"          . make-frame)             ;; Create a new frame
        ("s-w"          . delete-frame)           ;; Delete current frame
        ("s-."          . my/toggle-window-split) ;; Toggle window split
        ("s-j"          . find-file-other-window) ;; Open file in other window
        ("s-r"          . restart-emacs)          ;; Restart Emacs

        ;; Buffer navigation
        ("s-<up>"       . beginning-of-buffer)    ;; Go to the beginning of the buffer
        ("s-<down>"     . end-of-buffer)          ;; Go to the end of the buffer

        ;; Scroll other window
        ("s-<wheel-up>"   . scroll-other-window)      ;; Scroll other window up
        ("s-<wheel-down>" . scroll-other-window-down) ;; Scroll other window down

        ;; Expand region
        ("C-="          . er/expand-region)       ;; Expand selected region

        ;; Multiple cursors
        ("C-S-c C-S-c"  . mc/edit-lines)          ;; Edit multiple lines
        ("C->"          . mc/mark-next-like-this) ;; Mark next occurrence
        ("C-<"          . mc/mark-previous-like-this) ;; Mark previous occurrence
        ("C-c C-<"      . mc/mark-all-like-this)  ;; Mark all occurrences

        ;; Magit
        ("C-x g"        . magit-status)           ;; Open Magit status

        ;; Embark
        ("s-."          . embark-act)             ;; Embark action
        ("s-,"          . embark-dwim)            ;; Embark Do What I Mean
        ("C-<f2>"       . embark-bindings)        ;; Embark key bindings

        ;; Marginalia
        ("M-A"          . marginalia-cycle)       ;; Cycle annotation styles

        ;; Acewindow
        ("M-o"          . ace-window)             ;; Quick window switch

        ;; Consult for extended search
        ("C-s"          . consult-line)           ;; Search in buffer
        ("M-g g"        . consult-goto-line)      ;; Go to line
        ("M-g i"        . consult-imenu)          ;; Search functions in buffer
        ("M-g b"        . consult-buffer)         ;; Buffer switch

        ;; Miscellaneous
        ("M-x"          . execute-extended-command))) ;; Execute extended command

      ;; Keybinding redefinition
      (global-set-key (kbd "C-c r") nil)

      ;; Enable Windmove keybindings for window navigation
      (windmove-default-keybindings)

      ;; Dired Mode Custom Keybinding
      (add-hook 'dired-mode-hook
                (lambda ()
                  (define-key dired-mode-map "z" 'my/dired-view-file-other-window))))
  #+end_src
*** Basic
/This configuration script includes basic settings and utilities aimed at improving the functionality and cleanliness of the Emacs environment. Here's a summary of the key components/

- *Basic*
  Editing and font settings improve readability and usability.
  We define settings for auto-saving, backup management, and basic editing features.


  #+begin_src emacs-lisp
    ;;; Basic Configuration

    ;; Basic Configuration for file saving, shell integration, and more.
    (leaf *lastupdate
      :preface
      (defun my/save-buffer-wrapper ()
        (interactive)
        (let ((tostr (concat "$Lastupdate: " (format-time-string "%Y/%m/%d %k:%M:%S") " $")))
          (save-excursion
            (goto-char (point-min))
            (while (re-search-forward "\\$Lastupdate\\([0-9/: ]*\\)?\\$" nil t)
              (replace-match tostr nil t)))))
      :hook (before-save-hook . my/save-buffer-wrapper))

    ;; macOS specific settings for shell integration using exec-path-from-shell.
    (leaf exec-path-from-shell
      :ensure t
      :if (memq window-system '(mac ns))
      :commands (exec-path-from-shell-getenvs exec-path-from-shell-setenv)
      :custom ((exec-path-from-shell-check-startup-files . nil))
      :config (exec-path-from-shell-initialize))

    ;; no-littering: Organize Emacs config and cache files neatly.
    (leaf no-littering :ensure t :require t)

    ;; Customize basic Emacs behaviors
    (leaf cus-edit :custom `((custom-file . ,(concat no-littering-etc-directory "custom.el")))
      :config (ignore-errors (load custom-file)))

    ;; Designed
    (leaf *desktop
      :preface
      (defun my/save-desktop-session ()
        "Save the current desktop session."
        (interactive)
        (desktop-save desktop-dirname)
        (message "Desktop session saved."))
      (defun my/restore-desktop-session ()
        "Restore the desktop session."
        (interactive)
        (desktop-read)
        (message "Desktop session restored."))
      :config
      (setq desktop-dirname (concat no-littering-var-directory "desktop")
            desktop-save 'if-exists
            desktop-auto-save-timeout 180
            desktop-restore-eager 10
            desktop-restore-forces-onscreen nil)
      (desktop-save-mode 1)
      (winner-mode 1))

    ;; Automatically revert buffers if file changes on disk
    (leaf autorevert :global-minor-mode global-auto-revert-mode)

    ;; Automatic parenthesis pairing and paren matching highlighting.
    (leaf elec-pair :global-minor-mode electric-pair-mode)
    (leaf paren
      :custom ((show-paren-delay . 0)
               (show-paren-style . 'expression))
      :global-minor-mode show-paren-mode)
    (leaf puni :ensure t :global-minor-mode puni-global-mode)

    ;; Auto save and backup settings to keep files safe.
    (leaf files
      :preface
      (defun toggle-auto-save-visited-mode ()
        "Toggle auto-save-visited-mode."
        (interactive)
        (if auto-save-visited-mode
            (progn
              (auto-save-visited-mode -1)
              (message "auto-save-visited-mode disabled"))
          (progn
            (auto-save-visited-mode 1)
            (message "auto-save-visited-mode enabled"))))
      :custom `((auto-save-file-name-transforms . '((".*" ,(concat no-littering-var-directory "backup") t)))
                (backup-directory-alist . '(("." . ,(concat no-littering-var-directory "backup"))))
                (delete-old-versions . t)
                (auto-save-visited-interval . 1))
      :global-minor-mode auto-save-visited-mode)

    ;; Tramp: Remote file editing settings.
    (leaf tramp
      :pre-setq `((tramp-persistency-file-name . ,(concat no-littering-var-directory "tramp"))
                  (tramp-auto-save-directory . ,(concat no-littering-var-directory "tramp-autosave")))
      :setq ((tramp-default-method . "scp")
             (tramp-encoding-shell . "/bin/bash")
             (tramp-debug-buffer . t)
             (tramp-verbose . 10)
             (tramp-shell-prompt-pattern . "\\(?:^\\|\r\\)[^]#$%>\n]*#?[]#$%>] *\\(^[\\[[0-9;]*[a-zA-Z] *\\)*")
             (tramp-use-ssh-controlmaster-options . nil)
             (tramp-password-prompt-regexp . '(concat
                                               "^.*"
                                               (regexp-opt
                                                '("passphrase" "Passphrase"
                                                  "password" "Password"
                                                  "Verification code")
                                                t)
                                               ".*:\0? *"))))

    ;; Miscellaneous useful settings for startup, history, and display.
    (leaf startup :custom `((auto-save-list-file-prefix . ,(concat no-littering-var-directory "backup/.saves-"))))
    (leaf savehist :custom `((savehist-file . ,(concat no-littering-var-directory "savehist"))) :global-minor-mode t)

    ;; Display keybindings in a popup
    (leaf which-key :ensure t :global-minor-mode t)

    ;; Tree-sitter support for improved syntax highlighting and parsing
    (leaf tree-sitter :ensure
      :config
      (global-tree-sitter-mode)
      (add-hook 'tree-sitter-after-on-hook #'tree-sitter-hl-mode))
    (leaf tree-sitter-langs :ensure t
      :config
      (tree-sitter-langs-install-grammars))
  #+end_src

*** Utilties Package

  Miscellaneous functions that improve user experience and add extra utility.
  These include toggling line numbers, switching window layouts, and custom functions for buffer management and Dired mode.

  - ~my/toggle-linum-lines~: Toggle line numbers.
  - ~my/toggle-window-split~: Switches window split between vertical and horizontal.
  - ~my/dired-view-file-other-window~: Opens a Dired file in another window.
  - ~my/no-kill-new-duplicate~: Prevents duplicate entries in the kill ring.
  - ~delete-trailing-whitespace~: Cleans up trailing whitespace on save.

   #+begin_src emacs-lisp
     ;;; Utilties Package Configuration

     ;; Enable global visual-line-mode for better word wrapping
     (leaf visual-line-mode :global-minor-mode t)

     ;; pbcopy integration for macOS clipboard support
     (leaf pbcopy :if (memq window-system '(mac ns)) :ensure t)

     ;; Useful utilities for dired, expand-region, aggressive-indent, and delsel
     (leaf dired-filter :ensure t)

     ;; expand-region
     (leaf expand-region :ensure t)

     ;; Enhanced undo/redo functionality with undo-fu
     (leaf undo-fu :ensure t)

     ;; aggressive-indent
     (leaf aggressive-indent :ensure t :global-minor-mode global-aggressive-indent-mode)

     ;; delsel
     (leaf delsel :global-minor-mode delete-selection-mode)

     ;; Search and jump utilities
     (leaf rg :ensure t)

     ;; dumb-jump
     (leaf dumb-jump
       :ensure t
       :after rg
       :hook ((xref-backend-functions . dumb-jump-xref-activate))
       :custom ((dumb-jump-force-searcher . 'rg)))

     ;; Multi-cursor editing
     (leaf multiple-cursors :ensure t)

     ;; Programming and markup language support
     (leaf prog-mode
       :hook
       (prog-mode-hook . (lambda ()
                           (display-line-numbers-mode)
                           (electric-pair-mode))))
     (leaf lsp-mode
       :ensure t
       :commands lsp
       :hook
       ((python-mode-hook go-mode-hook rust-mode-hook) . lsp)
       :config
       (setq lsp-enable-symbol-highlighting t
             lsp-signature-auto-activate nil
             lsp-disabled-clients '(copilot-ls)))

     (leaf lsp-ui
       :ensure t
       :after lsp-mode
       :config
       (setq lsp-ui-doc-enable t
             lsp-ui-doc-delay 0.2
             lsp-ui-sideline-enable t))

     (leaf parinfer-rust-mode
       :ensure
       :hook (clojure-mode emacs-lisp-mode common-lisp-mode scheme-mode lisp-mode)
       :init
       (setq parinfer-rust-auto-download t))

     ;;
     (leaf eglot
       :ensure t
       :config
       (add-to-list 'eglot-server-programs '((js-mode js-ts-mode typescript-mode typescript-ts-mode) . (eglot-deno "deno" "lsp")))
       (defclass eglot-deno (eglot-lsp-server) () :documentation "A custom class for deno lsp.")
       (cl-defmethod eglot-initialization-options ((server eglot-deno))
         "Passes through required deno initialization options"
         (list :enable t :lint t))
       (setq eglot-ignored-server-capabilities '(:documentHighlightProvider :inlayHintProvider))
       (setq eldoc-echo-area-use-multiline-p nil)
       :hook
       ((sh-mode
         c-mode
         c++-mode
         python-mode
         ruby-mode
         rust-mode
         html-mode
         css-mode
         js-mode) . eglot-ensure))

     ;; Org-mode Setup
     (leaf Org-mode
       :config
       ;; Document management and editing
       (leaf org
         :leaf-defer t
         :preface
         (defvar warning-suppress-types nil)
         (defun org-buffer-files ()
           "Return list of opened Org mode buffer files."
           (mapcar (function buffer-file-name)
                   (org-buffer-list 'files)))
         (defun show-org-buffer (file)
           "Show an org-file FILE on the current buffer."
           (interactive)
           (if (get-buffer file)
               (let ((buffer (get-buffer file)))
                 (switch-to-buffer buffer)
                 (message "%s" file))
             (find-file (concat org-directory "/" file))))
         :custom
         (org-support-shift-select . t)
         :init
         (setq org-directory (expand-file-name "Org/" my:d:cloud))
         (unless (file-exists-p org-directory)
           (make-directory org-directory))
         (setq org-startup-indented t
               org-ellipsis " ▾"
               org-hide-leading-stars t)
         (setq warning-suppress-types (append warning-suppress-types '((org-element-cache))))
         :bind
         (("C-M--" . #'(lambda () (interactive)
                         (show-org-buffer "gtd.org")))
          ("C-M-^" . #'(lambda () (interactive)
                         (show-org-buffer "notes.org")))
          ("C-M-~" . #'(lambda () (interactive)
                         (show-org-buffer "kb.org"))))
         :config
         (setq  org-agenda-files (list org-directory)
                org-default-notes-file "notes.org"
                org-log-done 'time
                org-startup-truncated nil
                org-startup-folded 'content
                org-use-speed-commands t
                org-enforce-todo-dependencies t)
         (remove (concat org-directory "/archives") org-agenda-files)
         (setq org-todo-keywords
               '((sequence "TODO(t)" "SOMEDAY(s)" "WAITING(w)" "|" "DONE(d)" "CANCELED(c@)")))
         (setq org-refile-targets
               (quote ((nil :maxlevel . 3)
                       (org-buffer-files :maxlevel . 1)
                       (org-agenda-files :maxlevel . 3))))
         (setq org-capture-templates
               '(("t" "Todo" entry (file+headline "gtd.org" "Inbox")
                  "* TODO %?\n %i\n %a")
                 ("n" "Note" entry (file+headline "notes.org" "Notes")
                  "* %?\nEntered on %U\n %i\n %a")
                 ("j" "Journal" entry (function org-journal-find-location)
                  "* %(format-time-string org-journal-time-format)%^{Title}\n%i%?")
                 ("m" "Meeting" entry (file "meetings.org")
                  "* MEETING with %? :meeting:\n  %U\n  %a")
                 )))

       (leaf org-bullets
         :ensure t :hook (org-mode . org-bullets-mode))

       (leaf org-latex
         :after org
         :custom
         (org-latex-packages-alist '(("" "graphicx" t)
                                     ("" "longtable" nil)
                                     ("" "wrapfig" nil)))
         (org-latex-pdf-process '("pdflatex -interaction nonstopmode -output-directory %o %f"
                                  "pdflatex -interaction nonstopmode -output-directory %o %f")))

       ;; org-babel
       (leaf ob
         :after org
         :defun org-babel-do-load-languages
         :config
         (org-babel-do-load-languages
          'org-babel-load-languages
          '((emacs-lisp . t)
            (shell . t)
            (python . t)
            (R . t)
            (ditaa . t)
            (plantuml . t)
            )))

       ;; org-superstar
       (leaf org-superstar
         :after org
         :ensure t
         :custom
         (org-superstar-headline-bullets-list . '("◉" "★" "○" "▷" "" ""))
         :hook
         (org-mode-hook (lambda () (org-superstar-mode 1))))

       ;; org-journal
       (leaf org-journal
         :after org
         :ensure t
         :config
         (setq org-journal-dir (concat org-directory "/journal")
               org-journal-enable-agenda-integration t)
         (defun org-journal-find-location ()
           ;; Open today's journal, but specify a non-nil prefix argument in order to
           ;; inhibit inserting the heading; org-capture will insert the heading.
           (org-journal-new-entry t)
           ;; Position point on the journal's top-level heading so that org-capture
           ;; will add the new entry as a child entry.
           (goto-char (point-min))))

       ;; org-cliplink
       (leaf org-cliplink
         :after org
         :ensure t
         :bind
         ("C-x p i" . org-cliplink))

       ;; org-download
       (leaf org-download
         :after org
         :ensure t
         :config
         (setq-default org-download-image-dir (concat org-directory "/pictures")))

       ;; org-web-tools
       (leaf org-web-tools
         :after org
         :ensure t)

       ;; toc-org
       (leaf toc-org
         :after org markdown-mode
         :ensure t
         ;;:commands toc-org-enable
         :config
         (add-hook 'org-mode-hook 'toc-org-enable)
         ;; enable in markdown, too
         (add-hook 'markdown-mode-hook 'toc-org-mode)
         (define-key markdown-mode-map (kbd "\C-c\C-o") 'toc-org-markdown-follow-thing-at-point))

       ;; tomelr
       (leaf tomelr
         :ensure t)

       ;; org-roam
       (leaf org-roam
         :ensure t
         :after org
         :bind
         ("C-c n l" . org-roam-buffer-toggle)
         ("C-c n f" . org-roam-node-find)
         ("C-c n g" . org-roam-graph)
         ("C-c n i" . org-roam-node-insert)
         ("C-c n c" . org-roam-capture)
         ;; Dailies
         ("C-c n j" . org-roam-dailies-capture-today)
         :config
         (setq org-roam-directory (concat org-directory "/org-roam"))
         (unless (file-exists-p org-directory)
           (make-directory org-roam-directory))
         ;; If you're using a vertical completion framework, you might want a more informative completion interface
         (setq org-roam-node-display-template (concat "${title:*} " (propertize "${tags:10}" 'face 'org-tag)))
         (org-roam-db-autosync-mode)
         ;; If using org-roam-protocol
         (require 'org-roam-protocol))

       ;; ox-hugo
       (leaf ox-hugo
         :ensure t
         :require t
         :after ox
         :custom ((org-hugo-front-matter-format . "toml")))

       ;; ox-hugo-capture
       (leaf *ox-hugo--capture
         :require org-capture
         :defvar (org-capture-templates)
         :config
         (add-to-list 'org-capture-templates
                      '("b" "Create new blog post" entry
                        (file+headline my-capture-blog-file "blog")
                        "** TODO %?
     :PROPERTIES:
     :EXPORT_FILE_NAME: %(apply #'format \"%s-%s-%s\"
     (format-time-string \"%Y\")
     (let ((sha1 (sha1 (shell-command-to-string \"head -c 1024 /dev/urandom\"))))
     (cl-loop for (a b c d) on (cdr (split-string sha1 \"\")) by #'cddddr repeat 2 collect (concat a b c d))))
     :EXPORT_DATE:
     :EXPORT_HUGO_TAGS:
     :EXPORT_HUGO_CATEGORIES:
     :EXPORT_HUGO_LASTMOD:
     :EXPORT_HUGO_CUSTOM_FRONT_MATTER: :pin false
     :END:
     \n
     ")))
       )

     (leaf markdown-mode
       :ensure t
       :mode ("\\.md\\'" . markdown-mode))

     ;; Version control using Magit
     (leaf magit :ensure t)

     ;; Flymake and Flycheck for on-the-fly syntax checking
     (leaf flymake :ensure t :global-minor-mode)
     (leaf flycheck :ensure t :global-minor-mode t)

     ;; Flyspell for spell checking
     (leaf flyspell
       :ensure t
       :hook (text-mode . flyspell-mode)
       :custom ((ispell-program-name . "aspell")))

     ;; Projectile for project management
     (leaf projectile :ensure t :global-minor-mode t)

     ;; Yasnippet for snippet support
     (leaf yasnippet :ensure t :global-minor-mode yas-global-mode)

     ;; EasyPG activate
     (leaf epa-file
       :require t
       :config
       (epa-file-enable)
       (custom-set-variables '(epg-gpg-program  "/usr/local/bin/gpg"))
       (setq epa-pinentry-mode 'loopback))

     ;; Ellama
     (leaf ellama
       :after llm-ollama
       :ensure t
       :init
       (setopt ellama-language "Japanese")
       (setopt ellama-sessions-directory (concat no-littering-var-directory "ellama-sessions"))
       (setopt ellama-naming-scheme 'ellama-generate-name-by-llm)
       ;; default provider
       (setopt ellama-provider (make-llm-ollama
                                :chat-model "codestral:22b-v0.1-q4_K_S"
                                :embedding-model "codestral:22b-v0.1-q4_K_S"))
       ;; translation provider
       (setopt ellama-translation-provider (make-llm-ollama
                                            :chat-model "llama3:8b-instruct-q8_0"
                                            :embedding-model "llama3:8b-instruct-q8_0"))
       ;; ellama use providers
       (setopt ellama-providers
               '(("codestral" . (make-llm-ollama
                                 :chat-model "codestral:22b-v0.1-q4_K_S"
                                 :embedding-model "codestral:22b-v0.1-q4_K_S"))
                 ("gemma2" . (make-llm-ollama
                              :chat-model "gemma2:27b-instruct-q4_K_S"
                              :embedding-model "gemma2:27b-instruct-q4_K_S"))
                 ("llama3.2-vision" . (make-llm-ollama
                                       :chat-model "llama3:8b-instruct-q8_0"
                                       :embedding-model "llama3:8b-instruct-q8_0")))))

     ;;; Miscellaneous helper functions

     ;; Delete backup files that are older than 7 days
     (defun my/delete-old-backups ()
       "Delete backup files that are older than 7 days."
       (let ((backup-dir (concat no-littering-var-directory "backup/")))
         (when (file-directory-p backup-dir)
           (dolist (file (directory-files backup-dir t))
             (when (and (file-regular-p file)
                        (> (- (float-time (current-time))
                              (float-time (nth 5 (file-attributes file))))
                           (* 7 24 60 60))) ;; Older than 7 days
               (delete-file file))))))
     (add-hook 'emacs-startup-hook #'my/delete-old-backups)

     ;; Enable `view-mode` automatically when `read-only-mode` is activated.
     (defun my/enable-view-mode-on-read-only ()
       "Enable `view-mode` automatically when `read-only-mode` is activated."
       (if buffer-read-only
           (view-mode 1)
         (view-mode -1)))
     (add-hook 'read-only-mode-hook #'my/enable-view-mode-on-read-only)

     ;;
     (defun my/open-by-vscode ()
       (interactive)
       (shell-command
        (format "code -r -g %s:%d:%d"
                (buffer-file-name)
                (line-number-at-pos)
                (current-column))))
     (define-key global-map (kbd "C-c C-v") 'my/open-by-vscode)

     ;; https://takaxp.github.io/utility.html
     (defun my/print-build-info ()
       (interactive)
       (switch-to-buffer (get-buffer-create "*Build info*"))
       (let ((buffer-read-only nil))
         (erase-buffer)
         (insert
          (format "GNU Emacs %s\nCommit:\t\t%s\nBranch:\t\t%s\nSystem:\t\t%s\nDate:\t\t\t%s\n"
                  emacs-version
                  (emacs-repository-get-version)
                  (when (version< "27.0" emacs-version)
                    (emacs-repository-get-branch))
                  system-configuration
                  (format-time-string "%Y-%m-%d %T (%Z)" emacs-build-time)))
         (insert (format "Patch:\t\t%s ns-inline.patch\n"
                         (if (boundp 'mac-ime--cursor-type) "with" "without")))
         (insert
          (format "Features:\t%s\n" system-configuration-features))
         ;; (insert
         ;;  (format "Options:\t%s\n"  system-configuration-options))
         )
       (view-mode))

     ;; Generate a table of keybindings sorted by key sequence and command name.
     (defun my/generate-keybinding-table ()
       "Generate a table of keybindings sorted by key sequence and command name."
       (interactive)
       (let ((bindings '()))
         ;; Iterate through all keymaps and collect keybindings
         (mapatoms
          (lambda (sym)
            (when (commandp sym)
              (let ((keys (where-is-internal sym)))
                (dolist (key keys)
                  (push (list (key-description key) (symbol-name sym)) bindings))))))
         ;; Sort by key sequence and then by command name
         (setq bindings
               (sort bindings
                     (lambda (a b)
                       (or (string< (car a) (car b))
                           (and (string= (car a) (car b))
                                (string< (cadr a) (cadr b)))))))
         ;; Create the table in tabulated-list-mode
         (with-current-buffer (get-buffer-create "*Keybindings Table*")
           (tabulated-list-mode)
           (setq tabulated-list-format [("Key" 20 t) ("Command" 40 t)])
           (setq tabulated-list-entries
                 (mapcar (lambda (x)
                           (list (car x) (vector (car x) (cadr x))))
                         bindings))
           (tabulated-list-init-header)
           (tabulated-list-print)
           (pop-to-buffer (current-buffer)))))
     (define-key global-map (kbd "C-c C-k") 'my/generate-keybinding-table)

     (defun my/show-mode-keybindings ()
       "Display a list of keybindings for the major and minor modes of the current buffer in a new *Help* buffer if one already exists."
       (interactive)
       (let ((help-buffer (get-buffer-create "*Help*"))) ;; Create or retrieve the *Help* buffer
         (when (get-buffer-window help-buffer) ;; Check if *Help* buffer is already visible
           (setq help-buffer (generate-new-buffer "*Help*"))) ;; Create a new buffer if visible
         (with-current-buffer help-buffer
           (describe-mode)) ;; Display mode keybindings in the buffer
         (display-buffer help-buffer))) ;; Show the buffer in the current window

     (define-key global-map (kbd "C-c C-s") 'my/show-mode-keybindings)

     (defun my/keybindings-to-org-table (prefix)
       "Show keybindings under a given PREFIX as an Org-mode table."
       (interactive "sEnter key prefix (e.g., 'C-c'): ")
       (let ((keymap (current-global-map))
             (output '()))
         ;; Get all key bindings starting with the given prefix
         (map-keymap
          (lambda (event binding)
            (let ((key (vector event)))
              (when (and (keymapp binding)
                         (key-binding (vconcat (list (kbd prefix)) key)))
                (map-keymap
                 (lambda (ev bind)
                   (let ((full-key (vconcat (list (kbd prefix) ev))))
                     (push (list (key-description full-key)
                                 (format "%s" bind))
                           output)))
                 binding))))
          keymap)
         ;; Sort by keybinding
         (setq output (sort output (lambda (a b) (string< (car a) (car b)))))
         ;; Output as Org-mode table
         (insert "| Keybinding | Command |\n")
         (insert "|------------+---------|\n")
         (dolist (entry output)
           (insert (format "| %s | %s |\n" (car entry) (cadr entry))))
         (org-table-align)))
     (define-key global-map (kbd "C-c C-;") 'my/keybindings-to-org-table)

     ;; Remove duplicate entries from kill-ring
     (defun my/no-kill-new-duplicate (yank)
       (setq kill-ring (delete yank kill-ring)))
     (advice-add 'kill-new :before #'my/no-kill-new-duplicate)

     ;; Clean up whitespace before saving
     (add-hook 'before-save-hook 'delete-trailing-whitespace)

     ;; goto-address-mode
     (progn
       (add-hook 'prog-mode-hook 'goto-address-prog-mode)
       (add-hook 'text-mode-hook 'goto-address-mode))
   #+end_src

*** Completion Framework
/This configuration script sets up a sophisticated *completion framework* for Emacs, utilizing a combination of packages to provide fast, flexible, and user-friendly completion across various contexts. Here's an overview of the key components/

Your configuration for the completion framework in Emacs looks comprehensive and well-structured. Here are some observations and suggestions to consider:

*Modularization*: You've nicely separated different components (like `vertico`, `corfu`, `consult`, etc.) into distinct sections. This makes it easier to manage and understand your configuration.
*Customizations*: Custom variables and functions are well-defined, enhancing the overall functionality.

*Specific Components*
- *Vertico and Vertico Posframe*:
  - The settings for `vertico` and `vertico-posframe` are good. You might want to experiment with `vertico-count` if you find the number of candidates overwhelming or insufficient.

- *Corfu*:
  - The `corfu` configuration is solid. Ensure that `corfu-popupinfo-mode` is activated as needed, and consider customizing `corfu-popupinfo-delay` further if required.

- *Prescient*:
  - The aggressive file save option for `prescient` is useful for performance. Just make sure it aligns with your needs for performance vs. memory usage.

- *Consult*:
  - Your custom functions for `consult` are well-implemented.

*Additional Suggestions*
1. *Performance*: If you notice any lag in completions, especially with many candidates, you might consider adjusting some variables to improve responsiveness. For instance, reducing `corfu-auto-delay` or optimizing `prescient` settings can help.

2. *Documentation*: Keep the documentation (the `:doc` tags) up-to-date as you modify your configuration. It will make future adjustments easier.

3. *Testing*: If you haven’t already, test each section individually to ensure that everything works together smoothly and that there are no conflicts.

4. *Expandability*: Consider adding comments for future expansions or additional features you might want to incorporate, such as integrations with other modes or customizations for specific programming languages.

This configuration optimizes completion for speed and accuracy, leveraging both fuzzy searching and flexible pattern matching. With utilities like `Embark`, `Consult`, and `Affe`, users can search, act on, and navigate within their files with ease.


#+begin_src emacs-lisp
  ;;; Completion Framework Configuration - Optimized for minimal keystrokes

  (leaf completion-settings
    :config
    ;; Prescient: Sort and filter candidates based on usage
    (leaf prescient
      :ensure t
      :custom
      ((prescient-aggressive-file-save . t)) ; Save history after each update
      :global-minor-mode prescient-persist-mode) ; Enable persistence globally

    ;; Vertico: Vertical completion menu
    (leaf vertico
      :ensure t
      :global-minor-mode vertico-mode
      :custom
      ((vertico-count . 15))  ;; Show up to 15 candidates
      :config
      ;; Enable extensions for Vertico
      (leaf vertico-directory
        :after vertico)
      ;; Prescient integration with Vertico
      (leaf vertico-prescient
        :ensure t
        :after (vertico prescient)
        :global-minor-mode t)
      ;; Enable posframe for cleaner display
      (leaf vertico-posframe
        :ensure t
        :custom
        ((vertico-posframe-border-width . 2) ;; Thin borders for minimalism
         (vertico-posframe-parameters . '((left-fringe . 4)
                                          (right-fringe . 4))))
        :global-minor-mode vertico-posframe-mode))

    ;; Marginalia: Annotate completion options
    (leaf marginalia
      :ensure t
      :custom
      ((marginalia-annotators . '(marginalia-annotators-heavy
                                  marginalia-annotators-light
                                  nil)))
      (marginalia-mode))

    ;; Consult: Powerful search and navigation
    (leaf consult
      :ensure t
      :custom
      ((xref-show-xrefs-function . #'consult-xref)
       (xref-show-definitions-function . #'consult-xref)))

    ;; Embark: Context-aware actions for completions
    (leaf embark
      :ensure t
      :custom
      ((prefix-help-command . #'embark-prefix-help-command)) ; Use Embark for prefix help
      :config
      (leaf embark-consult
        :ensure t
        :after (embark consult)
        :hook (embark-collect-mode . consult-preview-at-point-mode))) ; Preview in Embark

    ;; Corfu: Minimal completion UI
    (leaf corfu
      :ensure t
      :global-minor-mode global-corfu-mode
      :custom
      ((corfu-auto . t)       ;; Enable automatic popup
       (corfu-auto-delay . 0) ;; Instant completion popup
       (corfu-auto-prefix . 2) ;; Show popup after 2 characters
       (corfu-cycle . t))     ;; Allow cycling through candidates
      :config
      (corfu-popupinfo-mode)  ;; Show detailed information in popup
      ;; Use Tab for navigation and completion
      (define-key corfu-map (kbd "TAB") 'corfu-next)
      (define-key corfu-map (kbd "<tab>") 'corfu-next)
      (define-key corfu-map (kbd "S-TAB") 'corfu-previous)
      (define-key corfu-map (kbd "<backtab>") 'corfu-previous)
      (define-key corfu-map (kbd "RET") 'corfu-complete)
      ;; Prescient integration with Corfu
      (leaf corfu-prescient
        :ensure t
        :after (corfu prescient)
        :config
        (corfu-prescient-mode 1))) ; Enable prescient sorting in Corfu

    ;; Kind-icon: Add icons to completion candidates
    (leaf kind-icon
      :ensure t
      :after corfu
      :custom
      ((kind-icon-default-face . 'corfu-default)) ;; Match corfu's UI
      :config
      (add-to-list 'corfu-margin-formatters #'kind-icon-margin-formatter)) ; Show icons in margins

    ;; Cape: Extra completions at point
    (leaf cape
      :ensure t
      :init
      (add-to-list 'completion-at-point-functions #'cape-file) ;; File names
      (add-to-list 'completion-at-point-functions #'cape-dabbrev) ;; Dynamic abbreviations
      (add-to-list 'completion-at-point-functions #'cape-keyword)) ;; Keywords

    ;; Orderless: Fuzzy and flexible matching
    (leaf orderless
      :ensure t
      :custom
      ((completion-styles . '(orderless basic)) ;; Use fuzzy matching by default
       (completion-category-defaults . nil)
       (completion-category-overrides . '((file (styles . (partial-completion))))))))

  (defun my/enable-lsp-and-tree-sitter ()
    "Enable LSP and Tree-Sitter only in supported programming modes and for files under 1MB."
    (when (and (derived-mode-p 'prog-mode)
               (not (eq major-mode 'emacs-lisp-mode)) ;; Disable LSP for emacs-lisp-mode
               (< (buffer-size) 1048576)) ;; 1MB size limit
      (lsp)
      (tree-sitter-mode)))

  (defun my/disable-lsp-and-tree-sitter-in-non-prog-modes ()
    "Disable LSP and Tree-Sitter in non-programming modes."
    (unless (derived-mode-p 'prog-mode)
      (when (bound-and-true-p lsp-mode) (lsp-mode -1))
      (when (bound-and-true-p tree-sitter-mode) (tree-sitter-mode -1))))

  (add-hook 'prog-mode-hook #'my/enable-lsp-and-tree-sitter)
  (add-hook 'after-change-major-mode-hook #'my/disable-lsp-and-tree-sitter-in-non-prog-modes)

  ;; Consider auxiliary features for emacs-lisp-mode.
  (add-hook 'emacs-lisp-mode-hook #'eldoc-mode)
  (add-hook 'emacs-lisp-mode-hook #'xref-etags-mode)
  (add-hook 'emacs-lisp-mode-hook #'flycheck-mode)
  (when (executable-find "parinfer-rust-server")
    (add-hook 'emacs-lisp-mode-hook #'parinfer-rust-mode))
   #+end_src

*** Footer
  #+begin_src emacs-lisp

    (provide 'README)
    ;;; README.el ends here
  #+end_src

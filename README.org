# -*- mode: org; coding: utf-8; lexical-binding: t -*-

#+TITLE: ac1965's Emacs literate configuration =.emacs.d=
#+AUTHOR: YAMASHITA, Takao
#+EMAIL: tjy1965@gmail.com
#+DATE: 2025-07-20
#+LANGUAGE: en
#+OPTIONS: toc:3 num:t
#+STARTUP: content
#+PROPERTY: header-args :results silent :exports code

* Overview

This is a modern, literate Emacs configuration using [[http://orgmode.org/][Org Mode]]'s [[http://orgmode.org/worg/org-contrib/babel][Babel]] format.
The configuration emphasizes:

- Clean, modular organization
- Performance optimization
- Modern development tools
- Extensive documentation

[[file:demo.png]]

* Installation

This section covers installing and setting up this Emacs configuration:

** Prerequisites

- Emacs 30.0 or later
- Git
- make
- gcc (Version 10+)
- libgccjit

** Step 1: Clone the Configuration Repository
Run the following command to clone the configuration files from GitHub:

#+begin_src shell :eval never :tangle no
  git clone --depth 1 https://github.com/ac1965/.emacs.d ~/.emacs.d
#+end_src

Make sure that the =~/.emacs.d= directory does not already exist, or back it up if necessary.

** Step 2: Tangle

#+begin_src shell :eval never :tangle no
  cd ~/.emacs.d/
  EMACS=/Applications/Emacs.app/Contents/MacOS/Emacs make
#+end_src

#+begin_src text :tangle Makefile
  EMACS ?= emacs
  README_EL = README.el
  README_ORG = README.org

  .PHONY: all tangle clean

  all: tangle

  tangle: $(README_ORG)
  	$(EMACS) --batch -Q \
  	      --eval "(require 'org)" \
  	      --eval "(org-babel-tangle-file \"$(README_ORG)\")"

  clean:
  	rm -f $(README_EL)
#+end_src

** Build Emacs

To build Emacs, use the provided =build-emacs.sh= script.
[[https://github.com/ac1965/dotfiles/blob/master/.local/bin/build-emacs.sh][ build-emacs.sh]]

#+begin_src shell :eval never :tangle no
  build-emacs.sh --native-compilation
#+end_src

** Requirements and Troubleshooting

- *Dependencies*: Ensure you have the following installed before running the script:
  - `gcc` (Version 10 or newer)
  - `libgccjit`
  - `make`

- *Permissions*: If you encounter permission issues, try running the script with `sudo`, but only after verifying its contents.

- *Error Handling*:
  - If native compilation fails, check that `libgccjit` is installed and properly linked.
  - Verify that the `GITHUB_REPOS` directory exists and contains the necessary source files.

** System Information

Below are the system details and Emacs build configurations for two machines.

*New Machine*

#+begin_src shell :eval never :tangle no
  uname -a
  Darwin pooh.local 24.4.0 Darwin Kernel Version 24.4.0: Fri Apr 11 18:32:05 PDT 2025; root:xnu-11417.101.15~117/RELEASE_ARM64_T8132 arm64
#+end_src

- GNU Emacs 31.0.50

|Commit|52b96d3a7e27e0cdc3f53041f2f18cbe2c095a86|
|Branch|master|
|System|aarch64-apple-darwin24.5.0|
|Date|2025-07-12 11:00:39 (JST)|
|Patch|without ns-inline.patch|
|Features|ACL DBUS GLIB GNUTLS LCMS2 LIBXML2 MODULES NATIVE_COMP NOTIFY KQUEUE NS PDUMPER PNG RSVG SQLITE3 THREADS TOOLKIT_SCROLL_BARS TREE_SITTER WEBP XIM XWIDGETS ZLIB|
|Options|--with-native-compilation --with-gnutls=ifavailable --with-json --with-modules --with-tree-sitter --with-xml2 --with-xwidgets --with-librsvg --with-mailutils --with-native-image-api --with-cairo --with-mac --with-ns CPPFLAGS=-I/opt/homebrew/opt/llvm/include 'LDFLAGS=-L/opt/homebrew/opt/llvm/lib -L/opt/homebrew/opt/llvm/lib/c++ -Wl,-rpath,/opt/homebrew/opt/llvm/lib/c++'|

*OLD Machine*

#+begin_src shell :eval never :tangle no
  uname -a
  Darwin alice.local 24.3.0 Darwin Kernel Version 24.3.0: Fri Dec  9 19:45:54 PST 2024; root:xnu-11215.80.501.2~1/RELEASE_x86_64 x86_64
#+end_src

- GNU Emacs 31.0.50

|Commit|aa12cebaa684d7b3ea7e131666d33bcc71b45625|
|Branch|master|
|System|x86_64-apple-darwin24.4.0|
|Date|2025-03-23 10:35:38 (JST)|
|Patch|without ns-inline.patch|
|Features|ACL DBUS GIF GLIB GMP GNUTLS JPEG LCMS2 LIBXML2 MODULES NATIVE_COMP NOTIFY KQUEUE NS PDUMPER PNG RSVG SQLITE3 THREADS TIFF TOOLKIT_SCROLL_BARS TREE_SITTER WEBP XIM XWIDGETS ZLIB|
|Options|--with-native-compilation --with-gnutls=ifavailable --with-json --with-modules --with-tree-sitter --with-xml2 --with-xwidgets --with-librsvg CFLAGS=-I/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include CPPFLAGS=-I/usr/local/opt/llvm/include 'LDFLAGS=-L/usr/local/opt/llvm/lib -L/usr/local/opt/llvm/lib/c++ -Wl,-rpath,/usr/local/opt/llvm/lib/c++'|

* Emacs Configurations
** Early Initialization

This section performs early performance optimizations during Emacs startup,
such as adjusting garbage collection thresholds and compatibility checks.

#+begin_src emacs-lisp :tangle early-init.el
  ;;; early-init.el --- Early initialization for Emacs -*- lexical-binding: t; -*-
  ;;
  ;; Copyright (c) 2021-2025 YAMASHITA, Takao <tjy1965@gmail.com>
  ;; Licensed under the GNU General Public License version 3 or later.
  ;;
  ;;; Commentary:
  ;;
  ;; This is an `early-init.el` file designed for Emacs 30+.
  ;; It performs early-stage optimizations and environment setup:
  ;;
  ;; - Ensures that Emacs 30 or newer is running.
  ;; - Defines key directories (e.g., `my:d`, `.cache/`).
  ;; - Optimizes garbage collection (GC) and process I/O thresholds for faster startup.
  ;; - Configures native compilation cache and performance parameters.
  ;; - Sets macOS-specific paths and Dired configuration (when applicable).
  ;; - Adjusts frame behavior (pixelwise resizing and maximized startup).
  ;;
  ;; Note:
  ;; - `early-init.el` is loaded *before* the UI is initialized.
  ;;   Avoid package loading, theme settings, or UI-dependent configuration here.
  ;; - A modular `init.el` should handle further initialization after startup.
  ;;
  ;;; Code:

  ;; ---------------------------------------------------------------------------
  ;;; Compatibility Check (Require Emacs 30+)
  (when (version< emacs-version "30")
    (error "This configuration requires Emacs 30 or higher."))

  ;;; Utility Functions
  (defun my:ensure-directory-exists (dir)
    "Ensure that directory DIR exists, creating it if necessary."
    (unless (file-directory-p dir)
      (condition-case err
          (make-directory dir t)
        (error (warn "Failed to create directory: %s - %s" dir err)))))

  ;; ---------------------------------------------------------------------------
  ;;; Directories
  (defvar my:d
    (if load-file-name
        (file-name-directory (file-chase-links load-file-name))
      user-emacs-directory)
    "Base directory for user-specific configuration files.")

  (defvar my:d:cache (expand-file-name ".cache/" my:d)
    "Cache directory for temporary files.")
  (defvar my:d:etc (expand-file-name ".etc/" my:d)
    "Directory for configuration files.")
  (defvar my:d:var (expand-file-name ".var/" my:d)
    "Directory for variable runtime data.")
  (defvar my:f:custom (expand-file-name "custom.el" my:d:etc)
    "File for storing user customizations (`custom-file`).")

  ;; Create required directories
  (mapc #'my:ensure-directory-exists (list my:d:cache my:d:etc my:d:var))

  ;; ---------------------------------------------------------------------------
  ;;; Performance Optimization
  ;; Increase GC threshold and process I/O buffer size during startup.
  (setq gc-cons-threshold (* 128 1024 1024)    ;; 128 MB
        read-process-output-max (* 8 1024 1024)) ;; 8 MB

  (add-hook 'emacs-startup-hook
            (lambda ()
              ;; Reduce GC threshold after startup.
              (setq gc-cons-threshold (* 64 1024 1024)) ;; 64 MB
              (message "Emacs loaded in %.2f seconds with %d garbage collections."
                       (float-time (time-subtract after-init-time before-init-time))
                       gcs-done)))

  ;; ---------------------------------------------------------------------------
  ;;; Native Compilation Optimization
  (setq native-comp-async-report-warnings-errors 'error) ;; Report only errors
  (setq native-comp-async-jobs-number
        (string-to-number
         (or (getenv "EMACS_NATIVE_COMP_JOBS") "4")))
  (setq native-comp-speed 2)

  (when (boundp 'native-comp-eln-load-path)
    (startup-redirect-eln-cache
     (expand-file-name "eln-cache/" my:d:cache)))

  ;; ---------------------------------------------------------------------------
  ;;; macOS Specific Settings
  (when (eq system-type 'darwin)
    ;; Add Homebrew paths to exec-path and environment PATH.
    (dolist (path '("/opt/homebrew/bin" "/usr/local/bin"))
      (when (file-directory-p path)
        (add-to-list 'exec-path path)
        (setenv "PATH" (concat path ":" (getenv "PATH")))))

    ;; Use GNU ls (gls) for Dired, if available.
    (when (executable-find "gls")
      (setq insert-directory-program "gls"
            dired-use-ls-dired t
            dired-listing-switches "-aBhl --group-directories-first")))

  ;; ---------------------------------------------------------------------------
  ;;; Frame Settings
  ;; Use pixel-precise frame resizing and start maximized.
  (setq frame-resize-pixelwise t)
  (add-to-list 'default-frame-alist '(fullscreen . maximized))

  ;; Disable automatic package initialization at startup.
  (setq package-enable-at-startup nil)

  ;; -----------------------------------------------------------------------------
  ;;; Package Setup
  ;; - Sets up the `package-archives` for GNU ELPA and MELPA.
  ;; - Initializes the `package` system.
  ;; - Installs and configures `leaf` for structured package configuration.

  (setq package-user-dir (expand-file-name "elpa/" my:d:cache))
  (my:ensure-directory-exists package-user-dir)

  (eval-and-compile
    (customize-set-variable
     'package-archives '(("gnu" . "https://elpa.gnu.org/packages/")
                         ("melpa" . "https://melpa.org/packages/")))
    (package-initialize)
    (use-package leaf :ensure t)

    (leaf leaf-keywords
      :ensure t
      :init
      (leaf blackout :ensure t)
      :config
      (leaf-keywords-init)))

  (leaf leaf-convert
    :doc "Convert existing configurations into `leaf` format."
    :ensure t)

  ;; -----------------------------------------------------------------------------
  ;;; No-Littering Setup
  ;; - Configures `no-littering` to keep Emacs configuration clean
  ;;   by redirecting auto-generated files (e.g., cache, backups) into a
  ;;   user-defined directory structure.

  (leaf no-littering
    :ensure t
    :require t
    :init
    (setq no-littering-etc-directory my:d:etc
          no-littering-var-directory my:d:var))

  ;; -----------------------------------------------------------------------------
  ;;; Shell Environment Variables
  ;; List of environment variables to import from the user's shell
  ;; (mainly for macOS and GUI Emacs).

  (defvar my:shell-env-vars
    '("PATH" "PASSWORD_STORE_DIR" "GPG_KEY_ID" "OPENROUTER_API_KEY" "OPENAI_API_KEY")
    "Environment variables to import from the shell.")

  ;; -----------------------------------------------------------------------------
  ;;; Exec-Path-from-Shell
  ;; Ensures Emacs inherits essential environment variables on macOS.
  ;; This is particularly important when Emacs is launched as a GUI app,
  ;; since GUI apps do not automatically inherit the user's shell environment.

  (when (eq system-type 'darwin)
    (use-package exec-path-from-shell
      :ensure t
      :config
      (setq exec-path-from-shell-check-startup-files nil)
      (setq exec-path-from-shell-arguments '("-l" "-i"))
      (setq exec-path-from-shell-variables my:shell-env-vars)
      (exec-path-from-shell-initialize)))

  ;; -----------------------------------------------------------------------------
  ;;; GCMH (Garbage Collection Magic Hack)
  ;; Dynamically optimizes Emacs garbage collection to reduce UI stuttering
  ;; by adjusting `gc-cons-threshold` based on user activity.

  (leaf gcmh
    :ensure t
    :global-minor-mode gcmh-mode)  ;; Enable GCMH globally

  ;; -----------------------------------------------------------------------------
  ;;; Basic UI Setup
  ;; - Disables unnecessary UI elements (menu bar, tool bar, scroll bar).
  ;; - Enables pixel-precision scrolling for smooth scrolling behavior.

  (leaf ui-basics
    :init
    ;; Minimal UI: hide menu/tool/scroll bars
    (menu-bar-mode -1)
    (tool-bar-mode -1)
    (scroll-bar-mode -1)
    (pixel-scroll-precision-mode))

  ;; -----------------------------------------------------------------------------
  ;;; Startup Settings
  ;; - Disables the startup screen.
  ;; - Configures initial scratch buffer and basic editing defaults.

  (leaf startup-settings
    :init
    ;; Startup and editing defaults
    (setq inhibit-startup-screen t
          initial-scratch-message nil
          initial-major-mode 'text-mode
          use-short-answers t
          create-lockfiles nil))


  (provide 'early-init)
  ;;; early-init.el ends here
#+end_src

** Initialization

#+begin_src emacs-lisp :tangle init.el
  ;;; init.el --- Main Emacs configuration -*- lexical-binding: t; -*-
  ;;
  ;; Copyright (c) 2021-2025 YAMASHITA, Takao <tjy1965@gmail.com>
  ;; Licensed under the GNU General Public License version 3 or later.
  ;; Keywords: initialization, modular
  ;;
  ;;; Commentary:
  ;;
  ;; This is the primary Emacs configuration file. It is designed to be minimal,
  ;; delegating most of the setup to modular files and a literate configuration
  ;; (`README.org`) via Org Babel tangling.
  ;;
  ;; Features:
  ;; - Initializes user-specific directory structure (`.cache/`, `.etc/`, `.var/`).
  ;; - Auto-tangles and loads configuration blocks from `README.org`.
  ;; - Separates user customizations into `custom.el`.
  ;;
  ;; Dependencies:
  ;; - Org mode (for literate configuration).
  ;; - Emacs 27+ is recommended for compatibility.
  ;;
  ;; File structure:
  ;; - `README.org`   : Primary literate configuration source.
  ;; - `.cache/`      : Runtime cache and package directory.
  ;; - `.etc/`        : Stores configuration files (e.g., `custom.el`).
  ;; - `.var/`        : Stores variable runtime data.
  ;;
  ;; Usage:
  ;; This file is loaded at startup. It remains concise by deferring most
  ;; setup to `README.org` and modular components.
  ;;
  ;;; Code:

  ;; ---------------------------------------------------------------------------
  ;;; Utility Functions

  (defun my:auto-tangle-updated-src-blocks ()
    "Automatically tangle updated Org source blocks when saving `README.org`."
    (when (and buffer-file-name
               (string= (file-name-nondirectory buffer-file-name) "README.org"))
      (let ((org-confirm-babel-evaluate nil))
        (org-babel-tangle))))

  (add-hook 'org-mode-hook
            (lambda ()
              (add-hook 'after-save-hook #'my:auto-tangle-updated-src-blocks
                        nil 'make-it-local)))

  ;; ---------------------------------------------------------------------------
  ;;; Directory Structure
  ;; Ensure `my:d` (defined in early-init.el) is available.
  (unless (boundp 'my:d)
    (error "`my:d` is not defined. Ensure early-init.el was loaded first."))

  ;; ---------------------------------------------------------------------------
  ;;; Custom File Setup
  ;; Store `customize` variables in a separate file.
  (setq custom-file my:f:custom)
  (when (and custom-file (file-exists-p custom-file))
    (ignore-errors (load custom-file)))

  ;; ---------------------------------------------------------------------------
  ;;; Load Configuration from README.org
  ;; Use `org-babel-load-file` to load tangled configuration.
  (setq init-org-file (expand-file-name "README.org" my:d))

  (when (file-exists-p init-org-file)
    (condition-case err
        (progn
          (setq org-confirm-babel-evaluate nil)
          (org-babel-load-file init-org-file))
      (error
       (display-warning
        'init
        (format "Failed to load %s: %s"
                init-org-file (error-message-string err))
        :error))))

  (provide 'init)
  ;;; init.el ends here
#+end_src

** User Configuration

#+begin_src emacs-lisp :tangle user.el
  ;;; user.el --- Personal Configuration -*- lexical-binding: t; -*-
  ;;
  ;; Copyright (c) 2021-2025 YAMASHITA, Takao <tjy1965@gmail.com>
  ;; Licensed under the GNU General Public License version 3 or later.
  ;;
  ;; Keywords: personal, device configuration
  ;;
  ;;; Commentary:
  ;;
  ;; This file contains personal and device-specific configuration settings.
  ;; It is designed to be loaded after the core configuration.
  ;;
  ;; Features:
  ;; - Personal identity (full name, email address).
  ;; - Font customization using `my:font-default`, `my:font-alt`, and `my:font-size`.
  ;; - Directory constants for cloud documents and blog development.
  ;; - Miscellaneous performance and compatibility settings.
  ;; - Device-specific configuration for Logitech MX Ergo S (macOS).
  ;;
  ;;; Code:
  ;; ---------------------------------------------------------------------------
  ;;; Personal Settings
  (leaf *personal
    :config
    ;; User identity and preferences
    (setq user-full-name "YAMASHITA, Takao"
          user-mail-address "tjy1965@gmail.com"
          my:font-default "JetBrains Mono"
          my:font-alt "Iosevka Nerd Font"
          my:font-size 16
          inhibit-compacting-font-caches t
          plstore-cache-passphrase-for-symmetric-encryption t)

    ;; Directory definitions
    (defconst my:d:cloud "~/Documents/"
      "Top-level directory for cloud-synced documents.")

    (defconst my:d:blog
      (concat my:d:cloud "devel/repos/mysite/")
      "Directory for blog development.")

    (defconst my:f:capture-blog-file
      (expand-file-name "all-posts.org" my:d:blog)
      "Path to the file used for blog post capture.")

    (defvar my:excluded-directories
      '("/Users/ac1965/Library/Accounts")
      "List of directories to exclude from specific operations.")

    ;; Directory validation function
    (defun ensure-directory (dir)
      "Ensure that DIR exists and is a directory.
  Skips directories listed in `my:excluded-directories`."
      (unless (member dir my:excluded-directories)
        (message "Checking directory: %s" dir)
        (cond
         ((not (file-exists-p dir))
          (warn "Directory does not exist: %s" dir))
         ((not (file-directory-p dir))
          (warn "Path exists but is not a directory: %s" dir)))))

    ;; Validate key directories
    (let ((essential-dirs (list my:d:cloud my:d:blog)))
      (mapc #'ensure-directory essential-dirs))

    ;; Remove excluded directories from `load-path`
    (setq load-path
          (seq-remove (lambda (dir)
                        (member dir my:excluded-directories))
                      load-path)))

  ;; ---------------------------------------------------------------------------
  ;;; Logitech MX Ergo S (macOS)
  (leaf *device/MX_ErgoS
    :config
    ;; Mouse and scroll settings
    (setq mouse-wheel-scroll-amount '(1 ((shift) . 5) ((control) . 10))
          mouse-wheel-progressive-speed nil  ;; Disable acceleration
          scroll-conservatively 10000        ;; Smooth scrolling
          scroll-margin 2
          scroll-preserve-screen-position t)

    ;; macOS-specific mouse settings
    (setq mac-mouse-wheel-smooth-scroll t
          mouse-wheel-tilt-scroll t
          mouse-wheel-flip-direction nil)

    ;; Trackball button configuration
    (global-set-key [mouse-2] 'yank)             ;; Middle click -> paste
    (global-set-key [mouse-4] 'previous-buffer)  ;; Extra button 1
    (global-set-key [mouse-5] 'next-buffer))     ;; Extra button 2

  (provide 'user)
  ;;; user.el ends here
#+end_src

** Main Configuration
*** Header

#+begin_src emacs-lisp :tangle README.el
  ;;; --- Emacs Configuration -*- mode: emacs-lisp; lexical-binding:t; -*-

  ;; Copyright (c) 2021-2025 YAMASHITA, Takao <tjy1965@gmail.com>
  ;; Licensed under the GNU General Public License version 3 or later.

  ;; $Lastupdate: 2025/07/26 21:26:22 $

  ;;; Commentary:
  ;; It includes package management, user-specific settings, and modular design.

  ;;; Code:
#+end_src

*** Loading user-specific settings

#+begin_src emacs-lisp :tangle README.el
  ;; -----------------------------------------------------------------------------
  ;;; Load User-Specific Configurations
  ;; - Dynamically loads an additional configuration file specific to the current
  ;;   user (e.g., "username.el") if it exists.

  (setq user-specific-config (concat my:d user-login-name ".el"))
  (if (file-exists-p user-specific-config) (load user-specific-config))
#+end_src

*** Basic Configuration
**** Minimum setting

#+begin_src emacs-lisp :tangle README.el
  ;; -----------------------------------------------------------------------------
  ;;; Electric Pair Mode
  ;; - Automatically inserts matching brackets/quotes.

  (leaf electric-pair
    :doc "Auto insert matching parentheses"
    :init (electric-pair-mode 1))

  ;; -----------------------------------------------------------------------------
  ;;; Display Line Numbers
  ;; - Enables relative line numbers in both programming and text modes.

  (leaf display-line-numbers
    :hook ((prog-mode text-mode) . display-line-numbers-mode)
    :init (setq display-line-numbers-type 'relative))

  ;; -----------------------------------------------------------------------------
  ;;; Insert Timestamp on Save
  ;; This automatically updates a `$Lastupdate` timestamp in the file
  ;; before saving. It searches for `$Lastupdate ...$` and replaces the
  ;; content with the current date and time.

  (defun my:save-buffer-wrapper ()
    "Insert or update a `$Lastupdate` timestamp at the top of the buffer."
    (interactive)
    (let ((timestamp (concat "$Lastupdate: " (format-time-string "%Y/%m/%d %H:%M:%S") " $")))
      (save-excursion
        (goto-char (point-min))
        (while (re-search-forward "\\$Lastupdate: [0-9/: ]*\\$" nil t)
          (replace-match timestamp t nil)))))

  (add-hook 'before-save-hook #'my:save-buffer-wrapper)

  ;; -----------------------------------------------------------------------------
  ;;; TRAMP Setup
  ;; Configure TRAMP for remote file editing:
  ;; - Use `scp` as the default remote copy method.
  ;; - Store TRAMP-related files in `no-littering` directories.

  (leaf tramp
    :pre-setq
    `((tramp-persistency-file-name . ,(concat no-littering-var-directory "tramp"))
      (tramp-auto-save-directory . ,(concat no-littering-var-directory "tramp-autosave")))
    :custom
    `((tramp-default-method . "scp")
      (tramp-verbose . 10))) ;; Set verbosity to 10 for detailed TRAMP logs.

  ;; -----------------------------------------------------------------------------
  ;;; Auto-Save and Backup Configuration
  ;; Redirects backup and auto-save files to `no-littering` directories.
  ;; Automatically saves visited files every 2 seconds.

  (leaf files
    :custom
    `((auto-save-file-name-transforms . '((".*" ,(concat no-littering-var-directory "backup") t)))
      (auto-save-list-file-prefix . ,(concat no-littering-var-directory "backup/.saves-"))
      (backup-directory-alist . '(("." . ,(concat no-littering-var-directory "backup"))))
      (delete-old-versions . t)
      (auto-save-visited-interval . 2))
    :global-minor-mode auto-save-visited-mode)
#+end_src

**** Editing Enhancements

#+begin_src emacs-lisp :tangle README.el
  ;; -----------------------------------------------------------------------------
  ;;; Saveplace (Remember Cursor Positions)
  ;; Restores the last cursor position when reopening files.

  (leaf saveplace
    :init
    (setq save-place-file (concat no-littering-var-directory "saveplace"))
    (save-place-mode +1))

  ;; -----------------------------------------------------------------------------
  ;;; Recentf (Recently Opened Files)
  ;; Maintains a list of recently opened files, stored under `no-littering`.

  (leaf recentf
    :init
    (setq recentf-max-saved-items 100
          recentf-save-file (concat no-littering-var-directory "recentf"))
    (recentf-mode +1))

  ;; -----------------------------------------------------------------------------
  ;;; Savehist (Minibuffer History Persistence)
  ;; Saves minibuffer history (e.g., commands, searches) across sessions.

  (leaf savehist
    :custom
    `((savehist-file . ,(concat no-littering-var-directory "savehist"))
      (savehist-additional-variables '(kill-ring search-ring regexp-search-ring))
      (savehist-autosave-interval . 300))  ;; Save every 5 min
    :global-minor-mode t)

  ;; -----------------------------------------------------------------------------
  ;;; Paredit (Structured Editing)
  ;; Enables Paredit in Emacs Lisp mode for strict parenthesis management.

  (leaf paredit
    :ensure t
    :hook (emacs-lisp-mode . enable-paredit-mode))

  ;; -----------------------------------------------------------------------------
  ;;; Paren Highlighting
  ;; Highlights matching parentheses instantly with full expression style.

  (leaf paren
    :custom
    ((show-paren-delay . 0)
     (show-paren-style . 'expression)
     (show-paren-highlight-openparen . t))
    :global-minor-mode show-paren-mode)

  ;; -----------------------------------------------------------------------------
  ;;; Puni (Smart Pair Handling)
  ;; Provides intelligent paired delimiter operations.
  ;; Globally enabled but disabled in minibuffer to avoid conflicts.

  (leaf puni
    :ensure t
    :global-minor-mode puni-global-mode
    :hook ((minibuffer-setup . (lambda () (puni-global-mode -1)))))

  ;; -----------------------------------------------------------------------------
  ;;; Tree-Sitter (Modern Syntax Highlighting)
  ;; Enables Tree-Sitter for advanced syntax parsing and rich font-lock.

  (leaf tree-sitter
    :ensure t
    :global-minor-mode global-tree-sitter-mode
    :hook (tree-sitter-after-on-hook . tree-sitter-hl-mode)
    :when (featurep 'treesit)
    :custom ((treesit-font-lock-level . 3)))

  ;; -----------------------------------------------------------------------------
  ;;; Tree-Sitter-Langs (Language Grammars)
  ;; Installs and manages Tree-Sitter grammars for supported languages.

  (leaf tree-sitter-langs
    :ensure t
    :config
    (when (require 'tree-sitter-langs nil t)
      (unless (ignore-errors
                (directory-files (concat tree-sitter-langs--bin-dir "grammars/")))
        (condition-case err
            (tree-sitter-langs-install-grammars)
          (error (message "Failed to install Tree-Sitter grammars: %s" err))))))

  ;; -----------------------------------------------------------------------------
  ;;; Auto-Revert
  ;; Automatically reloads files when changed on disk (silent refresh every 2s).

  (leaf autorevert
    :custom
    ((auto-revert-interval . 2)
     (auto-revert-verbose . nil))
    :global-minor-mode global-auto-revert-mode)

  ;; -----------------------------------------------------------------------------
  ;;; Which-Key (Key Binding Hints)
  ;; Shows available keybindings in a popup for the current prefix.

  (leaf which-key
    :ensure t
    :global-minor-mode t
    :custom ((which-key-idle-delay . 0.5)))

  ;; -----------------------------------------------------------------------------
  ;;; Undo-Fu (Advanced Undo/Redo)
  ;; Provides linear undo/redo history with better region handling.

  (leaf undo-fu
    :ensure t
    :custom ((undo-fu-allow-undo-in-region . t)))

  ;; -----------------------------------------------------------------------------
  ;;; Hydra (Keybinding Framework)
  ;; Defines transient keymaps for repeating related commands.

  (leaf hydra
    :ensure t)

  ;; -----------------------------------------------------------------------------
  ;;; Ace Window (Window Navigation)
  ;; Provides quick window switching with visual hints.

  (leaf ace-window
    :ensure t
    :custom
    ((aw-keys . '(?a ?s ?d ?f ?g ?h ?j ?k ?l))
     (aw-scope . 'frame)
     (aw-background . t))
    :config
    (ace-window-display-mode 1))
#+end_src

**** Completion Framework

#+begin_src emacs-lisp :tangle README.el
  ;; -----------------------------------------------------------------------------
  ;;; Completion Frameworks
  ;; - Configures a modern completion stack: Vertico, Corfu, Orderless, etc.

  (leaf completion-settings
    :config
    ;; Prescient: persistent sorting & filtering
    (leaf prescient
      :ensure t
      :custom ((prescient-aggressive-file-save . t))
      :global-minor-mode prescient-persist-mode)

    ;; Vertico: vertical completion UI
    (leaf vertico
      :ensure t
      :global-minor-mode vertico-mode
      :custom ((vertico-count . 15))
      :config
      (leaf vertico-posframe
        :ensure t
        :if (display-graphic-p)
        :custom
        ((vertico-posframe-border-width . 2)
         (vertico-posframe-parameters . '((left-fringe . 4) (right-fringe . 4))))
        :config
        (vertico-posframe-mode 1)))

    (leaf vertico-prescient
      :ensure t
      :after (vertico prescient)
      :global-minor-mode t)

    ;; Marginalia: add annotations to completion candidates
    (leaf marginalia
      :ensure t
      :global-minor-mode marginalia-mode)

    ;; Consult: powerful search & navigation
    (leaf consult
      :ensure t
      :custom
      ((xref-show-xrefs-function . #'consult-xref)
       (xref-show-definitions-function . #'consult-xref)))

    ;; Embark: context-sensitive actions
    (leaf embark
      :ensure t
      :custom
      ((prefix-help-command . #'embark-prefix-help-command)
       (embark-collect-live-update . t))
      :config
      (add-hook 'embark-collect-mode-map #'embark-collect-live-mode)
      (when (require 'all-the-icons nil t)
        (setq embark-indicators
              '(embark-minimal-indicator
                embark-highlight-indicator
                embark-isearch-highlight-indicator)))
      (leaf embark-consult
        :ensure t
        :after (embark consult)
        :hook (embark-collect-mode . consult-preview-at-point-mode)
        :custom (consult-preview-key . "M-.")))

    ;; Embark keybindings inside Vertico
    (defun my:setup-embark-vertico-directory ()
      "Integrate embark commands inside Vertico minibuffer."
      (when (and (boundp 'vertico-map) (require 'embark nil t))
        (define-key vertico-map (kbd "C-.") #'embark-act)
        (define-key vertico-map (kbd "C-;") #'embark-dwim)))

    (add-hook 'vertico-mode-hook #'my:setup-embark-vertico-directory)

    ;; Corfu: popup completions
    (leaf corfu
      :ensure t
      :init
      (global-corfu-mode)
      :custom
      ((corfu-auto . t)
       (corfu-auto-delay . 0)
       (corfu-auto-prefix . 2)
       (corfu-cycle . t))
      :config
      ;; Add icons to Corfu completions
      (leaf kind-icon
        :ensure t
        :after corfu
        :custom
        ((kind-icon-default-face . 'corfu-default))
        :config
        (add-to-list 'corfu-margin-formatters #'kind-icon-margin-formatter)))

    ;; Cape: extra completion sources for Corfu
    (leaf cape
      :ensure t
      :init
      (mapc (lambda (fn) (add-to-list 'completion-at-point-functions fn))
            '(cape-file cape-dabbrev cape-keyword)))

    ;; Orderless: fuzzy matching
    (leaf orderless
      :ensure t
      :custom
      ((completion-styles . '(orderless basic))
       (completion-category-overrides . '((file (styles . (partial-completion))))))))
#+end_src

**** Key Bindings

#+begin_src emacs-lisp :tangle README.el
  ;; -----------------------------------------------------------------------------
  ;;; Hydra for Text Scaling
  ;; Provides quick keybindings to increase, decrease, or reset text size.

  (defhydra hydra-text-scale (:hint nil :color red)
    "
  ^Text Scaling^
  ----------------------------
  [_+_] Increase   [_-_] Decrease   [_0_] Reset
  "
    ("+" text-scale-increase)
    ("-" text-scale-decrease)
    ("0" (text-scale-set 0) :color blue)
    ("q" nil "quit" :color blue))

  ;; -----------------------------------------------------------------------------
  ;;; Common Key Bindings
  ;; Defines frequently used keybindings for:
  ;; - Navigation (buffers, windows)
  ;; - File operations
  ;; - Text editing (scaling, commenting, alignment)
  ;; - Search (consult, ripgrep)
  ;; - Org mode (agenda, capture, roam)
  ;; - Git (magit)
  ;; - Miscellaneous (restart, execute commands)

  (leaf-keys
   ;; Function keys and help
   (("<f1>"    . help)
    ("<f8>"    . treemacs)
    ("C-h"     . backward-delete-char)

    ;; Undo/redo
    ("C-/"     . undo-fu-only-undo)
    ("C-?"     . undo-fu-only-redo)

    ;; Text scaling
    ("C-+"     . text-scale-increase)
    ("C--"     . text-scale-decrease)
    ("C-c z"   . hydra-text-scale/body)

    ;; Buffer navigation
    ("s-n"     . next-buffer)
    ("s-p"     . previous-buffer)
    ("s-<up>"  . beginning-of-buffer)
    ("s-<down>". end-of-buffer)
    ("C-c b"   . consult-buffer)

    ;; Window management
    ("C-."     . other-window)
    ("C-c 2"   . my:toggle-window-split)
    ("s-."     . ace-window)
    ("s-w"     . ace-swap-window)
    ("s-d"     . delete-frame)
    ("s-m"     . (lambda () (interactive)
                   (let ((frame (make-frame)))
                     (with-selected-frame frame
                       (switch-to-buffer (generate-new-buffer "untitled"))))))

    ;; File operations
    ("s-j"     . find-file-other-window)
    ("s-o"     . find-file-other-frame)
    ("C-c o"   . find-file)
    ("C-c v"   . find-file-read-only)
    ("C-c V"   . view-file-other-window)
    ("C-c k"   . kill-buffer-and-window)

    ;; Search
    ("C-s"     . consult-line)
    ("C-c r"   . consult-ripgrep)

    ;; Text manipulation
    ("C-="     . er/expand-region)
    ("C-c M-a" . align-regexp)
    ("C-c ;"   . comment-or-uncomment-region)
    ("C-c l"   . display-line-numbers-mode)

    ;; Org mode & Roam
    ("C-c d a" . org-agenda)
    ("C-c d c" . org-capture)
    ("C-c d i" . org-roam-node-insert)
    ("C-c d f" . org-roam-node-find)

    ;; Aider
    ("C-c a a" . aidermacs-transient-menu)

    ;; Misc
    ("M-x"     . execute-extended-command)
    ("C-x g"   . magit-status)
    ("s-r"     . restart-emacs)))

  ;; Enable directional window navigation with Shift + arrow keys.
  (windmove-default-keybindings)

  ;; -----------------------------------------------------------------------------
  ;;; Dired Enhancements
  ;; Adds a custom `z` key in Dired to open files in another window.

  (add-hook 'dired-mode-hook
            (lambda ()
              (define-key dired-mode-map "z"
  			'my:dired-view-file-other-window)))
#+end_src

**** Programming Utilities

#+begin_src emacs-lisp :tangle README.el
  ;; -----------------------------------------------------------------------------
  ;;; LSP Configuration (Eglot or LSP-Mode)
  ;; Provides Language Server Protocol (LSP) support for intelligent code features.
  ;; `my:use-lsp` determines which backend to use:
  ;; - `eglot` (default, lightweight)
  ;; - `lsp`   (LSP-Mode, feature-rich)

  (defvar my:use-lsp 'eglot
    "LSP backend selection. Use `eglot` (default) or `lsp`.")

  ;; -----------------------------------------------------------------------------
  ;;; Eglot (Lightweight LSP Client)
  ;; - Starts language servers automatically in `prog-mode`.
  ;; - Provides essential LSP features (rename, code actions, diagnostics).
  ;; - Uses Flymake for on-the-fly diagnostics.

  (when (eq my:use-lsp 'eglot)
    (leaf eglot
      :hook (prog-mode . eglot-ensure)
      :custom
      `((eglot-autoshutdown . t)      ;; Stop servers when not in use
        (eglot-sync-connect . nil)    ;; Connect asynchronously
        (eglot-events-buffer-size . 200))
      :bind (:eglot-mode-map
             ("C-c h" . eglot-help-at-point)
             ("C-c r" . eglot-rename)
             ("C-c a" . eglot-code-actions)
             ("C-c d" . flymake-show-buffer-diagnostics))))

  ;; -----------------------------------------------------------------------------
  ;;; LSP-Mode (Full-Featured LSP Client)
  ;; - Activated when `my:use-lsp` is set to `lsp`.
  ;; - Includes advanced features such as:
  ;;   - Breadcrumb navigation
  ;;   - Extensive diagnostics
  ;;   - Enhanced completion

  (when (eq my:use-lsp 'lsp)
    (leaf lsp-mode
      :ensure t
      :hook ((python-mode      . lsp)
             (rust-mode        . lsp)
             (go-mode          . lsp)
             (js-mode          . lsp)
             (typescript-mode  . lsp)
             (c-mode           . lsp)
             (c++-mode         . lsp))
      :custom
      `((lsp-enable-snippet . t)            ;; Enable snippet completion
        (lsp-idle-delay . 0.5)              ;; Delay before LSP actions
        (lsp-headerline-breadcrumb-enable . t)
        (lsp-prefer-flymake . nil))         ;; Use Flycheck instead of Flymake
      :config
      (setq lsp-completion-provider :capf)))

  ;; -----------------------------------------------------------------------------
  ;;; LSP UI Enhancements
  ;; - Adds inline documentation, diagnostics, and code action hints.
  ;; - Works only when using LSP-Mode.

  (leaf lsp-ui
    :ensure t
    :after lsp-mode
    :custom
    `((lsp-ui-doc-enable . t)
      (lsp-ui-sideline-enable . t)
      (lsp-ui-sideline-show-hover . t)
      (lsp-ui-sideline-show-code-actions . t)
      (lsp-ui-sideline-show-diagnostics . t)))

  ;; -----------------------------------------------------------------------------
  ;; Aidermacs configuration

  (leaf aidermacs
    :vc (:url "https://github.com/MatthewZMD/aidermacs.git"
              :branch "main")
    :init
    ;; API Configuration with fallback options
    (cond
     ;; Primary: OpenRouter (if API key is available)
     ((getenv "OPENROUTER_API_KEY")
      (setenv "OPENAI_API_BASE" "https://openrouter.ai/api/v1")
      (setenv "OPENAI_API_KEY" (getenv "OPENROUTER_API_KEY"))
      (setq aidermacs-default-model "openrouter/anthropic/claude-3.5-sonnet"))

     ;; Fallback: Direct OpenAI (if API key is available)
     ((getenv "OPENAI_API_KEY")
      (setenv "OPENAI_API_BASE" "https://api.openai.com/v1")
      (setq aidermacs-default-model "gpt-4o-mini"))

     ;; Warning if no API keys found
     (t
      (warn "No API keys found for Aidermacs. Set OPENROUTER_API_KEY or OPENAI_API_KEY environment variables.")))

    ;; Rate limit handling
    (setq aidermacs-retry-attempts 3
          aidermacs-retry-delay 2.0)

    ;; Use vterm backend (default is comint)
    (setq aidermacs-backend 'vterm)
    ;; don't match emacs theme colors
    (setopt aidermacs-vterm-use-theme-colors nil)

    ;; Alternative model configurations (commented out by default)
    ;; Uncomment and modify as needed:

    ;; For OpenRouter alternatives:
    ;; (setq aidermacs-default-model "openrouter/anthropic/claude-3-haiku")  ; Cheaper option
    ;; (setq aidermacs-default-model "openrouter/meta-llama/llama-3.1-8b-instruct")  ; Open source
    ;; (setq aidermacs-default-model "openrouter/google/gemini-pro")  ; Google's model

    ;; For direct OpenAI:
    ;; (setq aidermacs-default-model "gpt-3.5-turbo")  ; Cheaper OpenAI option
    ;; (setq aidermacs-default-model "gpt-4o")  ; Latest OpenAI model

    ;; Architect/Editor mode (uncomment to enable)
    ;; (setq aidermacs-use-architect-mode t)
    ;; (setq aidermacs-architect-model "openrouter/anthropic/claude-3.5-sonnet")
    ;; (setq aidermacs-editor-model "openrouter/anthropic/claude-3-haiku")
    )

  ;; -----------------------------------------------------------------------------
  ;;; Vterm

  (leaf vterm :ensure t)
#+end_src

*** Org-mode
**** Org-mode Core Setup

#+begin_src emacs-lisp :tangle README.el
  ;; -----------------------------------------------------------------------------
  ;;; Org Mode Configuration
  ;; Provides a GTD-style workflow with notes, tasks, agendas, and capture templates.

  (leaf org
    :leaf-defer t
    :preface
    ;; Org directory setup
    (defvar warning-suppress-types nil)
    (unless (boundp 'my:d:cloud)
      (setq my:d:cloud (concat no-littering-var-directory "./")))

    ;; Utility: List all open Org files
    (defun org-buffer-files ()
      "Return a list of currently open Org files."
      (delq nil
            (mapcar #'buffer-file-name (org-buffer-list 'files))))

    ;; Utility: Show a specific Org file in current buffer
    (defun show-org-buffer (file)
      "Display an Org FILE from `org-directory`."
      (interactive (list (read-file-name "Org file: " org-directory nil t)))
      (let ((filepath (expand-file-name file org-directory)))
        (if (get-file-buffer filepath)
            (switch-to-buffer (get-file-buffer filepath))
          (find-file filepath))))

    :custom ((org-support-shift-select . t))
    :init
    ;; Org directory
    (setq org-directory (expand-file-name "org/" my:d:cloud))
    (my:ensure-directory-exists org-directory)

    ;; Link & cache settings
    (setq org-return-follows-link t
          org-mouse-1-follows-link t
          warning-suppress-types (append warning-suppress-types '((org-element-cache)))
          org-element-use-cache nil)

    ;; PDF export (LaTeX)
    (setq org-latex-pdf-process
          '("pdflatex -interaction nonstopmode -output-directory %o %f"
            "pdflatex -interaction nonstopmode -output-directory %o %f"))

    ;; Key bindings for quick access to major Org files
    :bind
    (("C-M--" . (lambda () (interactive) (show-org-buffer "gtd.org")))
     ("C-M-^" . (lambda () (interactive) (show-org-buffer "notes.org")))
     ("C-M-~" . (lambda () (interactive) (show-org-buffer "kb.org"))))

    :config
    ;; General Org settings
    (setq org-agenda-files (list org-directory)
          org-cycle-emulate-tab 'white-space
          org-default-notes-file "notes.org"
          org-enforce-todo-dependencies t
          org-idle-time 0.3
          org-log-done 'time
          org-startup-folded 'content
          org-startup-truncated nil
          org-use-speed-commands t
          org-link-frame-setup '((file . find-file)))

    ;; Agenda files (exclude archives)
    (setq org-agenda-files
          (seq-filter (lambda (file)
                        (not (string-match-p "archives" file)))
                      (directory-files-recursively org-directory "\\.org$")))

    ;; TODO keywords
    (setq org-todo-keywords
          '((sequence "TODO(t)" "SOMEDAY(s)" "WAITING(w)" "|" "DONE(d)" "CANCELED(c@)")))

    ;; Refile targets
    (setq org-refile-targets
          '((nil :maxlevel . 3)
            (org-buffer-files :maxlevel . 1)
            (org-agenda-files :maxlevel . 3)))

    ;; Capture templates
    (setq org-capture-templates
          `(("t" "Todo" entry (file+headline ,(expand-file-name "gtd.org" org-directory) "Inbox")
             "* TODO %?\n %i\n %a")
            ("n" "Note" entry (file+headline ,(expand-file-name "notes.org" org-directory) "Notes")
             "* %?\nEntered on %U\n %i\n %a")
            ("j" "Journal" entry (function org-journal-find-location)
             "* %(format-time-string org-journal-time-format)%^{Title}\n%i%?")
            ("m" "Meeting" entry (file ,(expand-file-name "meetings.org" org-directory))
             "* MEETING with %? :meeting:\n  %U\n  %a"))))

  ;; -----------------------------------------------------------------------------
  ;;; Org Modern Styling
  ;; Improves Org visual style with cleaner headings, ellipsis, and agenda tweaks.

  (leaf org-modern
    :config
    (setopt
     org-startup-indented t
     org-hide-leading-stars t
     org-auto-align-tags nil
     org-tags-column 0
     org-catch-invisible-edits 'show-and-error
     org-special-ctrl-a/e t
     org-insert-heading-respect-content t
     org-hide-emphasis-markers t
     org-pretty-entities t
     org-agenda-tags-column 0
     org-agenda-block-separator ?─
     org-agenda-time-grid
     '((daily today require-timed)
       (800 1000 1200 1400 1600 1800 2000)
       " ┄┄┄┄┄ " "┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄")
     org-agenda-current-time-string
     "◀── now ─────────────────────────────────────────────────")
    (setopt org-ellipsis " ▾")
    (set-face-attribute 'org-ellipsis nil :inherit 'default :box nil))
#+end_src

**** Org-mode Visual Enhancements

#+begin_src emacs-lisp :tangle README.el
  ;; -----------------------------------------------------------------------------
  ;;; Org Superstar (Pretty Headings)
  ;; Enhances the visual appearance of Org headlines by replacing the default
  ;; asterisks with a set of Unicode symbols.

  (leaf org-superstar
    :after org
    :custom
    ;; Custom bullet symbols for different heading levels
    (org-superstar-headline-bullets-list . '("◉" "★" "○" "▷"))
    ;; Keep leading stars (set to `t` to remove them completely)
    (org-superstar-remove-leading-stars . nil)
    :hook
    ;; Enable `org-superstar-mode` automatically for Org buffers
    (org-mode . org-superstar-mode))
#+end_src

**** Additional Org-related packages

#+begin_src emacs-lisp :tangle README.el
  ;; -----------------------------------------------------------------------------
  ;;; Org LaTeX Export Configuration
  ;; Adds common LaTeX packages and defines a multi-pass `pdflatex` build pipeline
  ;; with BibTeX integration for high-quality PDF exports.

  (leaf org-latex
    :after org
    :custom
    (org-latex-packages-alist
     '(("" "graphicx" t)
       ("" "longtable" nil)
       ("" "wrapfig" nil)))
    (setq org-latex-pdf-process
          '("pdflatex -interaction nonstopmode -output-directory %o %f"
            "bibtex %b"
            "pdflatex -interaction nonstopmode -output-directory %o %f"
            "pdflatex -interaction nonstopmode -output-directory %o %f")))

  ;; -----------------------------------------------------------------------------
  ;;; Org Journal
  ;; Daily journaling with agenda integration.

  (leaf org-journal
    :ensure t
    :after org
    :config
    (setq org-journal-dir (concat org-directory "/journal")
          org-journal-enable-agenda-integration t)
    (defun org-journal-find-location ()
      "Open today's journal entry."
      (org-journal-new-entry t)))

  ;; -----------------------------------------------------------------------------
  ;;; Org Babel (Code Execution in Org)
  ;; Enables execution of code blocks in multiple languages.

  (leaf ob
    :after org
    :defun org-babel-do-load-languages
    :config
    (org-babel-do-load-languages
     'org-babel-load-languages
     '((emacs-lisp . t)
       (shell . t)
       (python . t)
       (R . t)
       (ditaa . t)
       (plantuml . t))))

  ;; -----------------------------------------------------------------------------
  ;;; Org Roam (Networked Note-Taking)
  ;; A personal knowledge base with backlinks and a graph-based view.

  (leaf org-roam
    :ensure t
    :after org
    :config
    (setq org-roam-directory (concat org-directory "/org-roam"))
    (unless (file-directory-p org-roam-directory)
      (make-directory org-roam-directory t))
    (org-roam-db-autosync-mode))

  ;; -----------------------------------------------------------------------------
  ;;; Org Download (Image Management)
  ;; Enables drag-and-drop or clipboard-based image insertion into Org files.
  ;; Images are stored in an "pictures" directory under `org-directory`.

  (leaf org-download
    :ensure t
    :after org
    :config
    (setq org-download-image-dir (expand-file-name "pictures" org-directory))
    (unless (file-directory-p org-download-image-dir)
      (make-directory org-download-image-dir t)))

  ;; -----------------------------------------------------------------------------
  ;;; TOC-Org (Table of Contents)
  ;; Automatically generates and updates tables of contents for Org and Markdown.

  (leaf toc-org
    :ensure t
    :after org markdown-mode
    :config
    (add-hook 'org-mode-hook 'toc-org-enable)
    (add-hook 'markdown-mode-hook 'toc-org-mode))

  ;; -----------------------------------------------------------------------------
  ;;; Org Cliplink (Insert Clickable Links)
  ;; Fetches the title of a webpage and inserts a properly formatted Org link.

  (leaf org-cliplink
    :ensure t
    :after org
    :bind ("C-x p i" . org-cliplink))

  ;; -----------------------------------------------------------------------------
  ;;; Org Export to Hugo (Static Site Generation)
  ;; Exports Org content to the Hugo static site generator format.

  (leaf ox-hugo
    :ensure t
    :require t
    :after ox
    :custom ((org-hugo-front-matter-format . "toml")))

  ;; -----------------------------------------------------------------------------
  ;;; Hugo Blog Capture Template
  ;; Adds an Org-Capture template for quickly creating new Hugo blog posts.

  (leaf *ox-hugo--capture
    :require org-capture
    :defvar (org-capture-templates)
    :config
    (defun generate-safe-filename ()
      "Generate a unique, safe filename for Hugo export."
      (format "%s-%s" (format-time-string "%Y")
              (string-trim (shell-command-to-string "uuidgen | cut -c1-8"))))
    (add-to-list 'org-capture-templates
                 '("b" "Create new blog post" entry
                   (file+headline my:f:capture-blog-file "blog")
                   "** TODO %?\n  :PROPERTIES:\n  :EXPORT_FILE_NAME: %(generate-safe-filename)\n  :EXPORT_DATE:\n  :EXPORT_HUGO_TAGS:\n  :EXPORT_HUGO_CATEGORIES:\n  :EXPORT_HUGO_LASTMOD:\n  :EXPORT_HUGO_CUSTOM_FRONT_MATTER: :pin false\n  :END:\n\n")))

  ;; -----------------------------------------------------------------------------
  ;;; Markdown Mode
  ;; Enables `markdown-mode` for `.md` files.

  (leaf markdown-mode
    :ensure t
    :mode ("\\.md\\'" . markdown-mode))
#+end_src
*** Utilities Package
**** Extra Utilities

#+begin_src emacs-lisp :tangle README.el
  ;; -----------------------------------------------------------------------------
  ;;; Visual Line Mode
  ;; Enables soft line wrapping for text-based buffers.

  (leaf visual-line-mode
    :hook (text-mode . visual-line-mode))

  ;; -----------------------------------------------------------------------------
  ;;; macOS Clipboard Integration
  ;; Ensures Emacs uses the macOS clipboard via `pbcopy`.

  (leaf pbcopy
    :if (memq window-system '(mac ns))
    :ensure t
    :config
    (turn-on-pbcopy))

  ;; -----------------------------------------------------------------------------
  ;;; Dired Enhancements
  ;; Adds filtering and subtree expansion to Dired.

  (leaf dired-filter :ensure t)
  (leaf dired-subtree
    :ensure t
    :after dired
    :bind (:dired-mode-map
           ("i"   . dired-subtree-insert)
           ("TAB" . dired-subtree-toggle)))

  ;; -----------------------------------------------------------------------------
  ;;; Editing Tools
  ;; Region expansion, aggressive indentation, and selection overwrite.

  (leaf expand-region :ensure t)
  (leaf aggressive-indent
    :ensure t
    :global-minor-mode global-aggressive-indent-mode)
  (leaf delsel
    :global-minor-mode delete-selection-mode)

  ;; -----------------------------------------------------------------------------
  ;;; Search Tools
  ;; Configures `rg` (ripgrep) as the default search backend.

  (setq grep-program "rg")
  (leaf rg :ensure t)

  ;; -----------------------------------------------------------------------------
  ;;; Code Navigation
  ;; Uses Dumb-Jump with `rg` for fast symbol navigation.

  (leaf dumb-jump
    :ensure t
    :hook (xref-backend-functions . dumb-jump-xref-activate)
    :custom
    `((dumb-jump-force-searcher  . 'rg)
      (dumb-jump-prefer-searcher . 'rg)))

  ;; -----------------------------------------------------------------------------
  ;;; Multiple Cursors
  ;; Enables simultaneous editing with multiple cursors.

  (leaf multiple-cursors :ensure t)

  ;; -----------------------------------------------------------------------------
  ;;; Magit (Git Integration)
  ;; A powerful and user-friendly Git interface.

  (leaf magit :ensure t)

  ;; -----------------------------------------------------------------------------
  ;;; Syntax & Spell Checking
  ;; Configures Flycheck (syntax) and Flyspell (spelling).

  (leaf flycheck
    :ensure t
    :hook (prog-mode . flycheck-mode))

  (leaf flyspell
    :ensure t
    :hook (text-mode . flyspell-mode)
    :custom ((ispell-program-name . "aspell")))

  ;; -----------------------------------------------------------------------------
  ;;; Project Management
  ;; Projectile for project navigation and search.

  (leaf projectile
    :ensure t
    :global-minor-mode t)

  ;; -----------------------------------------------------------------------------
  ;;; Snippet Management (YASnippet)
  ;; Loads user-defined snippets from `my:yas-snippet-dir`.

  (leaf yasnippet
    :ensure t
    :global-minor-mode yas-global-mode
    :init
    (defvar my:yas-snippet-dir (concat my:d "snippets")
      "Default directory for YASnippet user snippets.")
    ;; Create snippet directory if it doesn't exist
    (unless (file-directory-p my:yas-snippet-dir)
      (make-directory my:yas-snippet-dir t))
    :config
    (setq yas-snippet-dirs (list my:yas-snippet-dir))
    (yas-reload-all))

  (leaf yasnippet-snippets
    :ensure t
    :after yasnippet)

  ;; -----------------------------------------------------------------------------
  ;;; AUCTeX (LaTeX Editing)
  ;; Configures AUCTeX for PDF-based workflows with `latexmk`.

  (leaf auctex
    :ensure t
    :init
    (setq TeX-auto-save t
          TeX-parse-self t
          TeX-save-query nil
          TeX-PDF-mode t)
    (setq-default TeX-master nil)
    :config
    (setq TeX-command-default "LatexMk")
    (add-hook 'LaTeX-mode-hook
              (lambda ()
                (push
                 '("LatexMk" "latexmk -pdf -interaction=nonstopmode -synctex=1 %s"
                   TeX-run-TeX nil t :help "Run latexmk for automated PDF generation")
                 TeX-command-list))))

  ;; -----------------------------------------------------------------------------
  ;;; Authentication Management
  ;; Secure credential management using `auth-source`, `pass`, and GPG.

  (leaf *authentication
    :init
    (defvar my:d:password-store
      (or (getenv "PASSWORD_STORE_DIR")
          (concat no-littering-var-directory "password-store/"))
      "Path to the password store.")

    ;; Validate environment variables
    (unless (getenv "GPG_KEY_ID")
      (warn "GPG_KEY_ID is not set. Authentication features may not work properly."))
    (unless (file-directory-p my:d:password-store)
      (warn "Password store directory does not exist: %s" my:d:password-store))

    ;; GPG & auth-source
    (leaf epa-file
      :config
      (epa-file-enable)
      (setq epa-pinentry-mode
            (if (getenv "USE_GPG_LOOPBACK") 'loopback 'default)))

    (leaf auth-source
      :config
      (setq auth-source-gpg-encrypt-to
            (or (getenv "GPG_KEY_ID")
                (user-error "GPG_KEY_ID is not set. Authentication will not work."))))

    ;; Password-store and auth-source-pass
    (leaf password-store :ensure t)
    (leaf auth-source-pass
      :ensure t
      :config
      (when (executable-find "pass")
        (auth-source-pass-enable)))

    ;; Secure plstore
    (leaf plstore
      :config
      (setq plstore-secret-keys 'silent
            plstore-encrypt-to (getenv "GPG_KEY_ID"))))
#+end_src

**** Miscellaneous Helper Functions

#+begin_src emacs-lisp :tangle README.el
  ;; -----------------------------------------------------------------------------
  ;;; Scratch Buffer Management
  ;; Ensures that the `*scratch*` buffer always exists, and allows recreation.

  (defun my:create-scratch-buffer ()
    "Ensure that a `*scratch*` buffer exists."
    (unless (get-buffer "*scratch*")
      (with-current-buffer (get-buffer-create "*scratch*")
        (funcall initial-major-mode)
        (when (and initial-scratch-message
                   (not (string-empty-p initial-scratch-message)))
          (insert initial-scratch-message))
        (current-buffer))))

  (defun my:recreate-scratch-buffer ()
    "Kill and recreate the `*scratch*` buffer."
    (interactive)
    (when (get-buffer "*scratch*")
      (kill-buffer "*scratch*"))
    (my:create-scratch-buffer)
    (switch-to-buffer "*scratch*"))

  (defun my:after-kill-buffer-advice (&rest _)
    "Ensure `*scratch*` buffer exists after any buffer is killed."
    (run-at-time 0.1 nil #'my:create-scratch-buffer))

  (advice-add 'kill-buffer :after #'my:after-kill-buffer-advice)

  ;; -----------------------------------------------------------------------------
  ;;; Automatic Lexical Binding
  ;; Inserts a `lexical-binding: t` header into `.el` files in `no-littering-var-directory`.

  (defun my:auto-insert-lexical-binding ()
    "Automatically insert `lexical-binding: t` in Emacs Lisp files under `no-littering-var-directory`."
    (when (and (stringp buffer-file-name)
               (boundp 'no-littering-var-directory)
               (string-prefix-p (expand-file-name no-littering-var-directory)
                                (expand-file-name buffer-file-name))
               (string-match-p "\\.el\\'" buffer-file-name)
               (not (save-excursion
                      (goto-char (point-min))
                      (re-search-forward "lexical-binding" (line-end-position 5) t))))
      (save-excursion
        (goto-char (point-min))
        (insert ";; -*- lexical-binding: t; -*- \n"))))

  ;; -----------------------------------------------------------------------------
  ;;; Asynchronous Task Execution Helper

  (defun my:safe-run-async (task)
    "Run TASK asynchronously, catching and reporting any errors."
    (run-at-time 0 nil
                 (lambda ()
                   (condition-case err
                       (funcall task)
                     (error (message "Async error: %s" err))))))

  ;; -----------------------------------------------------------------------------
  ;;; Backup File Cleanup
  ;; Deletes old backup files (older than 7 days) asynchronously.

  (defun my:delete-old-backups ()
    "Delete backup files older than 7 days."
    (interactive)
    (my:safe-run-async
     (lambda ()
       (let ((backup-dir (concat no-littering-var-directory "backup/"))
             (threshold (- (float-time (current-time)) (* 7 24 60 60))))
         (when (file-directory-p backup-dir)
           (dolist (file (directory-files backup-dir t))
             (when (and (file-regular-p file)
                        (< (float-time (file-attribute-modification-time
                                        (file-attributes file)))
                           threshold))
               (delete-file file))))))))

  ;; -----------------------------------------------------------------------------
  ;;; Read-Only Buffer Handling
  ;; Automatically enables `view-mode` for read-only buffers.

  (defun my:enable-view-mode-on-read-only ()
    "Enable `view-mode` when buffer is read-only."
    (if buffer-read-only
        (view-mode 1)
      (view-mode -1)))
  (add-hook 'read-only-mode-hook #'my:enable-view-mode-on-read-only)

  ;; -----------------------------------------------------------------------------
  ;;; UI & Navigation Helpers

  (defun my:toggle-linum-lines ()
    "Toggle line numbers using `display-line-numbers-mode`."
    (interactive)
    (display-line-numbers-mode 'toggle))

  (defun my:toggle-window-split ()
    "Toggle between horizontal and vertical split for two windows."
    (interactive)
    (when (= (count-windows) 2)
      (let* ((this-buf (window-buffer))
             (next-buf (window-buffer (next-window)))
             (this-edges (window-edges))
             (next-edges (window-edges (next-window)))
             (split-vert (= (car this-edges) (car next-edges)))
             (split-fn (if split-vert
                           #'split-window-horizontally
                         #'split-window-vertically)))
        (delete-other-windows)
        (funcall split-fn)
        (set-window-buffer (selected-window) this-buf)
        (set-window-buffer (next-window) next-buf)
        (select-window (selected-window)))))

  (defun my:find-keybinding-conflicts ()
    "Find and display conflicting keybindings across active keymaps."
    (interactive)
    (let ((conflicts (make-hash-table :test 'equal))
          (buffer-name "*Keybinding Conflicts*"))
      (mapatoms (lambda (sym)
                  (when (and (boundp sym) (keymapp (symbol-value sym)))
                    (map-keymap
                     (lambda (key cmd)
                       (when (commandp cmd)
                         (let ((desc (key-description (vector key)))
                               (existing (gethash desc conflicts)))
                           (puthash desc (delete-dups (cons cmd existing))
                                    conflicts))))
                     (symbol-value sym)))))
      (with-current-buffer (get-buffer-create buffer-name)
        (read-only-mode -1)
        (erase-buffer)
        (insert "* Keybinding Conflicts *\n\n")
        (maphash (lambda (key cmds)
                   (when (> (length cmds) 1)
                     (insert (format "%s => %s\n"
                                     key
                                     (mapconcat #'symbol-name cmds ", ")))))
                 conflicts)
        (read-only-mode 1))
      (switch-to-buffer buffer-name)))

  ;; -----------------------------------------------------------------------------
  ;;; Dired Helper

  (defun my:dired-view-file-other-window ()
    "Open selected Dired file or directory in another window."
    (interactive)
    (let ((file (dired-get-file-for-visit)))
      (if (file-directory-p file)
          (or (and (cdr dired-subdir-alist)
                   (dired-goto-subdir file))
              (dired file))
        (view-file-other-window file))))

  ;; -----------------------------------------------------------------------------
  ;;; External Integration

  (defun my:open-by-vscode ()
    "Open current file in Visual Studio Code at line/column."
    (interactive)
    (when (buffer-file-name)
      (async-shell-command
       (format "code -r -g %s:%d:%d"
               (buffer-file-name)
               (line-number-at-pos)
               (current-column)))))

  (defun my:show-env-variable (var)
    "Display the value of environment variable VAR."
    (interactive "sEnvironment variable: ")
    (let ((val (getenv var)))
      (message "%s = %s" var (or val "Not set"))))

  (defun my:print-build-info ()
    "Show Emacs build details (commit, branch, system, features)."
    (interactive)
    (switch-to-buffer (get-buffer-create "*Build info*"))
    (let ((inhibit-read-only t))
      (erase-buffer)
      (insert
       (format "- GNU Emacs %s\n\n|Commit|%s|\n|Branch|%s|\n|System|%s|\n|Date|%s|\n"
               emacs-version
               (emacs-repository-get-version)
               (when (version< "27.0" emacs-version)
                 (emacs-repository-get-branch))
               system-configuration
               (format-time-string "%Y-%m-%d %T (%Z)" emacs-build-time)))
      (insert (format "|Patch|%s ns-inline.patch|\n"
                      (if (boundp 'mac-ime--cursor-type) "with" "without")))
      (insert (format "|Features|%s|\n" system-configuration-features))
      (insert (format "|Options|%s|\n" system-configuration-options)))
    (view-mode))

  ;; -----------------------------------------------------------------------------
  ;;; Org Mode Folding Shortcuts
  (with-eval-after-load 'org
    (require 'org-fold)
    (defun my-org-fold-subtree ()   (interactive) (org-fold-subtree t))
    (defun my-org-unfold-subtree () (interactive) (org-show-subtree))
    (defun my-org-toggle-fold ()
      "Toggle fold for current Org subtree."
      (interactive)
      (save-excursion
        (org-back-to-heading t)
        (if (org-fold-folded-p (point))
            (org-show-subtree)
          (org-fold-subtree t))))
    (define-key org-mode-map (kbd "C-c C-f") #'my-org-fold-subtree)
    (define-key org-mode-map (kbd "C-c C-e") #'my-org-unfold-subtree)
    (define-key org-mode-map (kbd "C-c C-t") #'my-org-toggle-fold))

  ;; -----------------------------------------------------------------------------
  ;;; Hooks
  (add-hook 'emacs-startup-hook #'my:delete-old-backups)
  (add-hook 'find-file-hook #'my:auto-insert-lexical-binding)
  (add-hook 'before-save-hook 'delete-trailing-whitespace)
  (add-hook 'prog-mode-hook 'goto-address-prog-mode)
  (add-hook 'text-mode-hook 'goto-address-mode)
#+end_src

*** UI/Fonts/Keybind
**** Fonts

#+begin_src emacs-lisp :tangle README.el
  ;;; Font Setup ---------------------------------------------------------------

  ;; -----------------------------------------------------------------------------
  ;; Utility function to check if a font is available on the system.
  (defun font-exists-p (font-name)
    "Return non-nil if FONT-NAME is available on the system."
    (find-font (font-spec :family font-name)))

  ;; -----------------------------------------------------------------------------
  ;; Default font configuration
  (defvar my:font-default
    (or (getenv "EMACS_FONT_FAMILY")
        (cond
         ((eq system-type 'windows-nt) "Consolas")
         ((eq system-type 'darwin) "SF Mono")
         (t "Monospace")))
    "Primary default font for Emacs.")

  (defvar my:font-alt
    (or (getenv "EMACS_FONT_ALT")
        (cond
         ((eq system-type 'windows-nt) "Consolas")
         ((eq system-type 'darwin) "SF Mono")
         (t "Monospace")))
    "Alternate font, e.g., for comments or variable-pitch text.")

  (defvar my:font-size
    (let ((env (getenv "EMACS_FONT_SIZE")))
      (if env
          (string-to-number env)
        (if (and (display-graphic-p)
                 (display-pixel-width)
                 (> (display-pixel-width) 1920))
            24
          20)))
    "Default font size (in pt).")

  (defvar my:emoji-font "Noto Color Emoji"
    "Default font for displaying emojis.")

  ;; -----------------------------------------------------------------------------
  (defun font-setup (&optional frame)
    "Apply font settings to FRAME or current frame.
  Includes default font, variable-pitch font, and emoji font."
    (let ((target-frame (or frame (selected-frame))))
      (when (display-graphic-p target-frame)
        ;; Default font
        (when (font-exists-p my:font-default)
          (set-face-attribute 'default target-frame
                              :family my:font-default
                              :height (* my:font-size 10))
          (message "✅ Default font set: %s (%dpt)" my:font-default my:font-size))

        ;; Variable-pitch font
        (when (font-exists-p my:font-alt)
          (set-face-attribute 'variable-pitch target-frame
                              :family my:font-alt)
          (message "✅ Variable-pitch font set: %s" my:font-alt))

        ;; Emoji font
        (when (font-exists-p my:emoji-font)
          (set-fontset-font t 'unicode
                            (font-spec :family my:emoji-font) nil 'prepend)
          (message "✅ Emoji font set: %s" my:emoji-font)))))

  (defun my:font-setup-on-frame (frame)
    "Apply `font-setup` to newly created FRAME in daemon sessions."
    (when (display-graphic-p frame)
      (with-selected-frame frame
        (font-setup))))

  (if (daemonp)
      (add-hook 'after-make-frame-functions #'my:font-setup-on-frame)
    (when (display-graphic-p)
      (font-setup)))

  ;; -----------------------------------------------------------------------------
  ;; Adjust font-lock faces after loading a theme
  (add-hook 'after-load-theme-hook
            (lambda ()
              (when (font-exists-p my:font-alt)
                (set-face-attribute 'font-lock-comment-face nil
                                    :family my:font-alt :slant 'italic)
                (set-face-attribute 'font-lock-doc-face nil
                                    :family my:font-alt :slant 'italic)
                (message "Comment/doc font set to: %s" my:font-alt))))

  ;; -----------------------------------------------------------------------------
  ;;; Nerd Icons Setup
  (defvar my:nerd-icons-font "Symbols Nerd Font Mono"
    "Font used for Nerd Icons.")

  (leaf nerd-icons
    :ensure t
    :if (display-graphic-p)
    :config
    (setq nerd-icons-color-icons (font-exists-p my:nerd-icons-font)))

  (leaf nerd-icons-dired
    :ensure t
    :if (display-graphic-p)
    :hook (dired-mode . nerd-icons-dired-mode))

  ;; -----------------------------------------------------------------------------
  ;;; Ligature Setup
  (defvar my:ligature-font "Fira Code"
    "Font used for programming ligatures.")

  (leaf ligature
    :ensure t
    :config
    (when (and (font-exists-p my:font-default)
               (font-exists-p my:ligature-font))
      (ligature-set-ligatures 'prog-mode
                              '("->" "=>" "::" "===" "!=" "&&" "||"
                                ":::" "!!" "??" "-->" "<--" "->>" "<<-"))
      (global-ligature-mode 1)))
#+end_src

**** UI

#+begin_src emacs-lisp :tangle README.el
  ;; ---------------------------------------------------------------------------
  ;;; Fullscreen Mode Configuration
  ;; Ensures Emacs starts in fullscreen mode.
  (leaf fullscreen
    :init
    (if (daemonp)
        (add-hook 'after-make-frame-functions
                  (lambda (frame)
                    (when (display-graphic-p frame)
                      (set-frame-parameter frame 'fullscreen 'fullboth))))
      (set-frame-parameter nil 'fullscreen 'fullboth)))

  ;; ---------------------------------------------------------------------------
  ;;; Dynamic Window Resizing (Golden Ratio)
  ;; Automatically resizes windows, focusing the current one.
  (leaf golden-ratio
    :ensure t
    :hook (after-init-hook . golden-ratio-mode)
    :custom ((golden-ratio-adjust-factor . 1.1)
             (golden-ratio-auto-scale . t)
             (golden-ratio-exclude-modes . '("ediff-mode" "dired-mode" "treemacs-mode"))
             (golden-ratio-exclude-buffer-names . '("*Messages*" "*Help*"))))

  ;; ---------------------------------------------------------------------------
  ;;; Theme Configuration (ef-themes)
  ;; Loads `ef-frost` in GUI or `deeper-blue` in terminal.
  (leaf ef-themes
    :ensure t
    :custom ((ef-themes-to-toggle . '(ef-frost ef-spring)))
    :config
    (load-theme (if (display-graphic-p) 'ef-frost 'deeper-blue) t))

  ;; ---------------------------------------------------------------------------
  ;;; Spacious Padding
  ;; Adds extra padding around UI elements for a clean look.
  (leaf spacious-padding
    :ensure t
    :if (display-graphic-p)
    :init
    (setq spacious-padding-widths
          '((left . 15)
            (right . 15)
            (top . 10)
            (bottom . 10))
          spacious-padding-subtle-mode-line t
          spacious-padding-mode-line-active-border-width 1
          spacious-padding-mode-line-inactive-border-width 0)
    :config
    (spacious-padding-mode 1))

  ;; ---------------------------------------------------------------------------
  ;;; Minions (Mode Line Management)
  ;; Consolidates minor modes into a single menu.
  (leaf minions
    :ensure t
    :custom ((minions-mode-line-lighter . "⚙"))
    :config
    (minions-mode 1))

  ;; ---------------------------------------------------------------------------
  ;;; Time and Battery in Mode-Line
  ;; Displays time and battery status in the mode line.
  (leaf time-battery
    :init
    (setq display-time-interval 30
          display-time-day-and-date t
          display-time-24hr-format t
          battery-mode-line-format "[🔋 %p%%]")
    :config
    (display-time-mode 1)
    (display-battery-mode 1))

  ;; ---------------------------------------------------------------------------
  ;;; Tab Bar & Tab Line
  ;; Enables tab-bar and tab-line with custom format.
  (leaf tab-bar
    :custom ((tab-bar-show . 1)
             (tab-bar-new-tab-choice . "*scratch*")
             (tab-bar-format . '(tab-bar-format-tabs tab-bar-separator tab-bar-format-align-right)))
    :config
    (tab-bar-mode 1)
    (global-tab-line-mode 1))

  ;; ---------------------------------------------------------------------------
  ;;; Treemacs (Project Drawer)
  ;; Provides a sidebar file explorer.
  (leaf treemacs
    :ensure t
    :if (display-graphic-p)
    :bind (:treemacs-mode-map
           ([mouse-1] . treemacs-single-click-expand-action))
    :custom ((treemacs-no-png-images . nil)
             (treemacs-filewatch-mode . t)
             (treemacs-follow-mode . t)
             (treemacs-indentation . 2)
             (treemacs-missing-project-action . 'remove)))

  ;; ---------------------------------------------------------------------------
  ;;; Desktop Session Management
  ;; Saves and restores window layouts and open files.
  (leaf desktop
    :custom `((desktop-dirname . ,(concat no-littering-var-directory "desktop"))
              (desktop-save . 'if-exists)
              (desktop-load-locked-desktop . t)
              (desktop-auto-save-timeout . 180)
              (desktop-restore-eager . 10))
    :hook ((kill-emacs-hook . desktop-save-in-desktop-dir)
           (after-init-hook . (lambda ()
                                (make-directory (concat no-littering-var-directory "desktop") t)
                                (desktop-read))))
    :config
    (desktop-save-mode 1))

  ;; ---------------------------------------------------------------------------
  ;;; Winner Mode
  ;; Allows undo/redo of window configurations.
  (leaf winner
    :bind (("M-[" . winner-undo)
           ("M-]" . winner-redo))
    :config
    (winner-mode 1))

  ;; ---------------------------------------------------------------------------
  ;;; Custom Window Layout Utilities
  (defvar my:saved-window-config nil
    "Stores the current window configuration for later restoration.")

  (defun my:save-window-layout ()
    "Save the current window configuration persistently."
    (interactive)
    (setq my:saved-window-config (window-state-get nil t))
    (message "Window configuration saved."))

  (defun my:restore-window-layout ()
    "Restore the previously saved window configuration."
    (interactive)
    (if my:saved-window-config
        (progn
          (window-state-put my:saved-window-config)
          (message "Window configuration restored."))
      (message "No saved window configuration found.")))

  (defun my:toggle-window-dedication ()
    "Toggle the dedicated status of the currently selected window."
    (interactive)
    (let ((window (selected-window)))
      (set-window-dedicated-p window (not (window-dedicated-p window)))
      (message "Window dedication %s"
               (if (window-dedicated-p window) "enabled" "disabled"))))
#+end_src

*** Footer
#+begin_src emacs-lisp :tangle README.el
  (provide 'README)
  ;;; README.el ends here
#+end_src

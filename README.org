# -*- mode: org; coding: utf-8; -*-

#+TITLE: Modern Emacs Configuration
#+AUTHOR: YAMASHITA, Takao
#+EMAIL: tjy1965@gmail.com
#+LANGUAGE: en
#+OPTIONS: toc:3 num:t
#+STARTUP: overview
#+PROPERTY: header-args :results silent :exports code :mkdirp yes :padline no :tangle no
#+PROPERTY: header-args:emacs-lisp :lexical t :noweb no-export

* Introduction
:PROPERTIES:
  :CUSTOM_ID: introduction
  :END:

A modern, literate Emacs configuration using Org Mode's Babel format, emphasizing performance, language server integration, AI assistance, and productivity.

** Features
:PROPERTIES:
:CUSTOM_ID: features
:END:

- *Performance & Native Compilation* — Early-init moves ELN under `.cache/`, silences async warnings, widens GC at startup and restores sane values later, and uses GCMH for idle GC.
- *Language Server Protocol* — Backend-agnostic helpers in `core/general.el`; choose **Eglot** or **lsp-mode** via `core/switches.el` with presence checks and auto-enable logic.
- *AI Integration* — Aidermacs (vterm backend). Prefers OpenRouter when `OPENROUTER_API_KEY` is set; otherwise uses OpenAI with `OPENAI_API_KEY`.
- *Modern UI & Editing* — Tree-sitter remaps (`*-ts-mode`), ef-themes + spacious-padding, Nerd Icons, Vertico/Orderless/Corfu/CAPE/Embark/Consult, Doom/Nano modeline switchers.
- *Productivity Tools* — Opinionated Org stack (agenda, capture, journal, roam, download, TOC), Magit + diff-hl/Forge, REST client, Docker/dev helpers, tidy backups/autosave-visited.

[[file:demo.png]]

** Tangling Policy
:PROPERTIES:
:CUSTOM_ID: tangling-policy
:END:
_For documentation only; block-level :tangle always takes precedence._

| Directory   | Filename                 | Contents                                                     |
|-------------+--------------------------+--------------------------------------------------------------|
| (top-level) | early-init.el            | Startup performance & low-level toggles (GC, handlers, etc)  |
| (top-level) | init.el                  | Package bootstrap + leaf.el init; loads =lisp/modules.el=    |
| lisp/       | modules.el               | Centralized loader (requires everything below in order)      |
| core/       | general.el               | General settings, hydra, keybindings, Dired, TRAMP, auth     |
| core/       | tools.el                 | Navigation helpers, Dired helper, Tree-sitter utils, etc.    |
| core/       | utils.el                 | Auto-tangle, scratch, revert, lexical-binding helpers        |
| core/       | history.el               | Savehist, recentf, autorevert, transient                     |
| core/       | editing.el               | Paredit, puni, undo, which-key, ace-window, Dired UI         |
| core/       | switches.el              | Unified switches (UI bundle / LSP backend)                   |
| ui/         | ui-font.el               | Font setup, ligatures                                        |
| ui/         | ui-theme.el              | Theme mgmt (ef-themes, spacious-padding, face normalizer)    |
| ui/         | ui-window.el             | Fullscreen/zoom, desktop save, winner, layout helpers        |
| ui/         | ui-doom-modeline.el      | Doom modeline bundle (nerd-icons)                            |
| ui/         | ui-nano-modeline.el      | Nano modeline bundle (guarded hooks)                         |
| ui/         | ui-utils.el              | Minions, time/battery, Treemacs, pbcopy (macOS)              |
| completion/ | completion-core.el       | Orderless styles (file uses partial-completion)              |
| completion/ | completion-vertico.el    | Vertico, posframe (GUI), marginalia                          |
| completion/ | completion-consult.el    | Consult search/xref integration                              |
| completion/ | completion-embark.el     | Embark + consult integration                                 |
| completion/ | completion-corfu.el      | Corfu, kind-icon, CAPE                                       |
| completion/ | completion-icons.el      | Nerd-icons integration                                       |
| orgx/       | org-core.el              | GTD workflow, agenda, capture, refiling                      |
| orgx/       | org-visual.el            | Org-modern visuals (no org-superstar)                        |
| orgx/       | org-extensions.el        | Org-journal, Org-roam, org-download, toc-org, cliplink       |
| orgx/       | org-export.el            | LaTeX export, Hugo, Markdown                                 |
| dev/        | dev-lsp-eglot.el         | Eglot integration (gentle auto-enable)                       |
| dev/        | dev-lsp-mode.el          | lsp-mode + lsp-ui integration                                |
| dev/        | web-core.el              | Project.el + Tree-sitter remaps + EditorConfig               |
| dev/        | format.el                | Apheleia (prettierd/prettier)                                |
| dev/        | dev-ai.el                | Aidermacs (AI integration)                                   |
| dev/        | dev-term.el              | vterm integration                                            |
| dev/        | dev-build.el             | Make/compile, ANSI color                                     |
| dev/        | dev-docker.el            | Dockerfile/yaml, docker.el, tramp-container, tempel          |
| dev/        | infra-modes.el           | dotenv, toml, docker-compose, Makefile tweaks                |
| dev/        | sql.el                   | SQL/Postgres helpers, sqlformat                              |
| dev/        | rest.el                  | REST client helpers (restclient + jq)                        |
| vcs/        | vcs-magit.el             | Magit                                                        |
| vcs/        | vcs-gutter.el            | diff-hl (git-gutter removed)                                 |
| vcs/        | vcs-forge.el             | Forge (GitHub/GitLab)                                        |
| utils/      | utils-functions.el       | Directory creation, safe load                                |
| utils/      | utils-scratch.el         | Scratch buffer management                                    |
| utils/      | utils-backup.el          | Backup/auto-save cleanup                                     |
| utils/      | utils-async.el           | Async task wrapper                                           |
| utils/      | search-nav.el            | Dumb-jump fallback, multiple-cursors, EWW helpers            |
| personal/   | <username>.el            | Optional per-user, per-machine overrides                     |
| personal/   | user.el                  | Personal entry point, loaded last if present                 |

** Coding Rules
:PROPERTIES:
:CUSTOM_ID: conventions
:END:

*- `lexical-binding: t` is *mandatory*. The provided feature **must match the file name** (e.g., `lisp/core.el` → `(provide 'core)`).
- Follow *official documentation* only. Do **not** rely on undocumented features or future/unstable behavior.
- In every *leaf* block, group settings under `:straight`, `:bind`, `:hook`, and `:custom`.
- For built-in packages, **always** specify `:straight nil`.

*** Header template
#+begin_src emacs-lisp
  ;;; module.el --- description -*- lexical-binding: t; -*-
  ;;
  ;; Copyright (c) 2021-2025
  ;; Author: YAMASHITA, Takao
  ;; License: GNU GPL v3 or later
  ;;
  ;;; Commentary:
  ;; Short explanation about what this module does.
  ;; If it belongs to a category (core, ui, completion, org, dev, vcs, utils),
  ;; mention it here as well.
  ;;
  ;;; Code:

  ... code ...

  (provide 'module)
  ;;; module.el ends here
#+end_src

*** Namespaces and naming

- Module prefixes: `core-...`, `ui-...`, `completion-...`, `orgx-...`, `dev-...`, `vcs-...`, `utils-...`
- Personal namespace: `my/...`
- *Internal-only* functions/variables use a **double hyphen** `--` (e.g., `core--restore-startup-state`)
- *Predicates* end with `-p` (e.g., `core-enabled-p`)
- *Hook helpers* should make their purpose clear: `PREFIX--on-...` or `PREFIX-...-hook-function`
- *Keymaps* end with `-map`, and *hook variables* end with `-hook`
- Add `;;;###autoload` **only** to public commands (never to internal `--` functions).

** Build pipeline
- =Makefile= :: Reproducible pipeline (=tangle=, =clean=, =compile=)

** Installation
:PROPERTIES:
   :CUSTOM_ID: installation
   :END:

*** Prerequisites
:PROPERTIES:
:CUSTOM_ID: prerequisites
:END:

- **Required**
  - Emacs **30.0+** with native compilation (`--with-native-compilation`)
  - Git
  - GNU Make
  - GCC **10+** with `libgccjit`

- **Optional but Recommended**
  - ripgrep (`rg`) → faster project-wide search
  - aspell or hunspell → spell checking
  - pass + GnuPG → password and auth-source integration
  - Homebrew (macOS only) → for consistent toolchain installation

*** Building Emacs

Use the provided build script:
[[https://github.com/ac1965/dotfiles/blob/master/.local/bin/build-emacs.sh][build-emacs.sh]]

#+begin_src shell
build-emacs.sh --native-compilation
#+end_src

*** Quick Start

1. Clone the repository:
   #+begin_src shell
   git clone --depth 1 https://github.com/ac1965/.emacs.d ~/.emacs.d
   #+end_src

2. Tangle configuration:
   #+begin_src shell
   cd ~/.emacs.d/
   EMACS=/Applications/Emacs.app/Contents/MacOS/Emacs make
   #+end_src

*** Makefile

#+begin_src text :tangle Makefile :comments no
  # Makefile for Emacs config build (safe clean)

  EMACS       ?= emacs
  ORG         ?= README.org
  LISPDIR     ?= lisp
  PERSONALDIR ?= personal
  ELFILES     = $(wildcard $(LISPDIR)/*.el) $(wildcard $(PERSONALDIR)/*.el)
  ELCFILES    = $(ELFILES:.el=.elc)

  all: tangle

  tangle: $(ORG)
  	$(EMACS) --batch -Q \
  		--eval "(require 'org)" \
  		--eval "(org-babel-tangle-file \"$(ORG)\")"

  compile: tangle $(ELCFILES)

  $(LISPDIR)/%.elc: $(LISPDIR)/%.el
  	$(EMACS) --batch -Q --eval "(byte-compile-file \"$<\")"

  $(PERSONALDIR)/%.elc: $(PERSONALDIR)/%.el
  	$(EMACS) --batch -Q --eval "(byte-compile-file \"$<\")"

  clean:
  	find $(LISPDIR) $(PERSONALDIR) -name "*.elc" -delete

  .PHONY: all tangle compile clean
#+end_src

*** System Information

**** Apple Silicon (Primary)
- GNU Emacs *31.0.50*

|Property|Value|
|--------|-----|
|Commit|340149c0a3f85a02a4e80425e0bb86545bb4b599|
|Branch|master|
|System|aarch64-apple-darwin24.6.0|
|Date|2025-10-11 17:23:15 (JST)|
|Patch|N/A ns-inline.patch|
|Features|ACL DBUS GLIB GNUTLS LCMS2 LIBXML2 MODULES NATIVE_COMP NOTIFY KQUEUE NS PDUMPER PNG RSVG SQLITE3 THREADS TOOLKIT_SCROLL_BARS TREE_SITTER WEBP XIM ZLIB|
|Options|--with-native-compilation --with-gnutls=ifavailable --with-json --with-modules --with-tree-sitter --with-xml2 --with-librsvg --with-native-image-api --with-ns CPPFLAGS=-I/opt/homebrew/opt/llvm/include 'LDFLAGS=-L/opt/homebrew/opt/llvm/lib -L/opt/homebrew/opt/llvm/lib/c++ -Wl,-rpath,/opt/homebrew/opt/llvm/lib/c++)|

**** Intel (Secondary)
- GNU Emacs *31.0.50*

|Property|Value|
|--------+-----|
|Commit|aa12cebaa684d7b3ea7e131666d33bcc71b45625|
|Branch|master|
|System|x86_64-apple-darwin24.4.0|
|Date|2025-03-23 10:35:38 (JST)|
|Patch|N/A ns-inline.patch|
|Features|ACL DBUS GIF GLIB GMP GNUTLS JPEG LCMS2 LIBXML2 MODULES NATIVE_COMP NOTIFY KQUEUE NS PDUMPER PNG RSVG SQLITE3 THREADS TIFF TOOLKIT_SCROLL_BARS TREE_SITTER WEBP XIM XWIDGETS ZLIB|
|Options|--with-native-compilation --with-gnutls=ifavailable --with-json --with-modules --with-tree-sitter --with-xml2 --with-xwidgets --with-librsvg CFLAGS=-I/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include CPPFLAGS=-I/usr/local/opt/llvm/include 'LDFLAGS=-L/usr/local/opt/llvm/lib -L/usr/local/opt/llvm/lib/c++)|

* Configuration Files
:PROPERTIES:
:CUSTOM_ID: structure
:END:

This Emacs configuration is modular and organized for **Emacs 30+**.

- `early-init.el` → startup optimizations & directories
- `init.el` → package bootstrap & base settings
- `lisp/` → modular configs (core, ui, completion, org, dev, vcs, utils)
- `personal/` → user-specific settings

** Core Setup
:PROPERTIES:
:CUSTOM_ID: core
:END:

*** early-init.el
:PROPERTIES:
:CUSTOM_ID: early-init
:END:

**Purpose**
Establish a fast, predictable startup baseline for Emacs 30+ with a clean hidden-directory layout, `straight.el`+`leaf` package policy, native-comp output under `.cache/`, and macOS Homebrew `LIBRARY_PATH` handling—while ensuring all temporary startup tweaks are safely reverted at `emacs-startup`.

**What it does**
- **Keep `package.el` dormant:** `package-enable-at-startup` is disabled (straight+leaf will manage packages).
- **Filesystem policy & bootstrap dirs:** Defines a base dir `my:d` (resets `user-emacs-directory` to it) and creates hidden sub-dirs:
  - `.var/`, `.etc/`, `.cache/`, `lisp/`, and language assets: `treesit/` (under `.var/`), `treesit-build/` (under `.cache/`), plus `.cache/eln-cache/`.
  - Directory creation is **defensive** (warns instead of failing the startup).
- **Native compilation:** Redirects ELN output to `.cache/eln-cache/` and silences async warnings (`native-comp-async-report-warnings-errors` = `silent`).
- **No-littering prewiring:** Points `no-littering-etc-directory` to `.etc/` and `no-littering-var-directory` to `.var/`.
- **straight.el defaults:** Places `straight-base-dir` under `.cache/`, enables `straight-use-package-by-default`, and sets a minimal `straight-profiles`.
- **Customize file policy:** Routes `custom-file` to `.etc/custom.el` (loaded later/quietly by `init`).
- **Startup performance toggles:** Temporarily
  - raises `gc-cons-threshold` and `gc-cons-percentage`,
  - clears `file-name-handler-alist`,
  - then **restores** them at `emacs-startup` (GC to 16MB/0.1; handlers to original).
- **Backups & autosave artifacts:**
  - Sends backups to `.var/backups/`,
  - disables `auto-save-default` and `auto-save-list-file-prefix` (no `#…#` temp files).
- **macOS Homebrew integration:** If `brew` exists and `$(brew --prefix)/lib/gcc/current` is present, **prepends** it to `LIBRARY_PATH` (failures are logged via `message`).
- **UI & frame defaults (applied early):**
  - Turn off menu/tool/scroll bars.
  - Maximize all frames (`fullscreen . fullboth`), pixel-precise sizing, modest borders, right-side window divider.
  - Suppress startup screens/messages; blank scratch; default initial major mode to `fundamental-mode`.
  - Misc: avoid implied resizes; do not underline at descent line; avoid font-lock limits.

**Notes**
- All temporary values (GC thresholds and `file-name-handler-alist`) are **reliably restored** on startup.
- The file assumes it sits at the **top level** and is read by Emacs as `early-init.el`.
- The **visited-file autosave policy** (if any) is configured elsewhere; here we only disable legacy autosave artifacts and set a backups path.
- Homebrew path wiring is **non-fatal**: errors are surfaced in the echo area but do not abort init.

#+begin_src emacs-lisp :tangle early-init.el
  ;;; early-init.el --- Early initialization -*- lexical-binding: t; -*-
  ;;
  ;; Copyright (c) 2021-2025
  ;; Author: YAMASHITA, Takao
  ;; License: GNU GPL v3 or later
  ;;
  ;;; Commentary:
  ;; - Disable package.el (use straight.el + leaf)
  ;; - Speed up startup (widen GC/file-name-handlers, then restore at startup)
  ;; - Keep artifacts under hidden dirs (.cache/ .etc/ .var/)
  ;; - Predefine paths for native-compile / Tree-sitter / straight / no-littering
  ;; - Handle macOS Homebrew libgccjit in LIBRARY_PATH
  ;; - Do not create auto-save-list (use auto-save-visited instead)
  ;; - Turn off menu/tool/scroll bars after the first frame
  ;;
  ;; Category: core
  ;;
  ;;; Code:

  (defun my/ensure-directory-exists (dir)
    "Ensure DIR exists, creating it if necessary."
    (unless (file-directory-p dir)
      (condition-case err
          (make-directory dir t)
        (error (warn "Failed to create directory: %s (%s)"
                     dir (error-message-string err))))))

  ;; 1) Disable package.el
  (setq package-enable-at-startup nil)

  ;; 2) Base directory
  (defvar my:d
    (or (and load-file-name (file-name-directory (file-chase-links load-file-name)))
        user-emacs-directory)
    "Base directory for this Emacs configuration.")
  (setq user-emacs-directory (file-name-as-directory my:d))

  ;; 3) Hidden sub-directories
  (defconst my:d:var    (expand-file-name ".var/"    my:d))
  (defconst my:d:etc    (expand-file-name ".etc/"    my:d))
  (defconst my:d:cache  (expand-file-name ".cache/"  my:d))
  (defconst my:d:lisp   (expand-file-name "lisp/"    my:d))
  (defconst my:d:treesit        (expand-file-name "treesit/"        my:d:var))
  (defconst my:d:treesit-build  (expand-file-name "treesit-build/"  my:d:cache))

  (dolist (dir (list my:d:var my:d:etc my:d:cache my:d:lisp
                     my:d:treesit my:d:treesit-build
                     (expand-file-name "eln-cache/" my:d:cache)))
    (my/ensure-directory-exists dir))

  ;; 4) macOS: prepend Homebrew libgccjit to LIBRARY_PATH if present
  (when (and (eq system-type 'darwin) (executable-find "brew"))
    (condition-case err
        (let* ((prefix (string-trim (shell-command-to-string "brew --prefix")))
               (brew-libgccjit (expand-file-name "lib/gcc/current" prefix)))
          (when (file-directory-p brew-libgccjit)
            (setenv "LIBRARY_PATH"
                    (concat brew-libgccjit
                            (when-let* ((orig (getenv "LIBRARY_PATH")))
                              (concat ":" orig))))))
      (error (message "[early-init] brew probe failed: %s"
                      (error-message-string err)))))

  ;; 5) Native compilation: keep ELN under .cache/
  (when (featurep 'native-compile)
    (setopt native-comp-eln-load-path (list (expand-file-name "eln-cache/" my:d:cache))
            native-comp-async-report-warnings-errors 'silent))

  ;; 6) Pre-wire no-littering directories
  (defvar no-littering-etc-directory (file-name-as-directory my:d:etc))
  (defvar no-littering-var-directory (file-name-as-directory my:d:var))

  ;; 7) straight.el base under .cache/
  (setopt straight-base-dir my:d:cache
          straight-use-package-by-default t
          straight-profiles '((nil . "default.el")))

  ;; 8) custom-file under .etc/ (loaded quietly in init.el)
  (defconst my:f:custom (expand-file-name "custom.el" my:d:etc))
  (setq custom-file my:f:custom)

  ;; 9) Startup speedups (restore on startup)
  (defvar my:orig-file-name-handler-alist file-name-handler-alist)
  (setq file-name-handler-alist nil
        gc-cons-threshold most-positive-fixnum
        gc-cons-percentage 0.6)

  (add-hook 'emacs-startup-hook
            (lambda ()
              (setq file-name-handler-alist my:orig-file-name-handler-alist
                    gc-cons-threshold 16777216    ;; 16MB
                    gc-cons-percentage 0.1)))

  ;; 10) Backups/auto-save: do not create auto-save-list directory
  (setq backup-directory-alist `(("." . ,(expand-file-name "backups/" my:d:var)))
        auto-save-default nil
        auto-save-list-file-prefix nil)
  (my/ensure-directory-exists (expand-file-name "backups/" my:d:var))

  ;; 11) UI bars off + maximize all frames
  (custom-set-variables
   '(inhibit-startup-screen t)
   '(inhibit-startup-message t)
   '(inhibit-startup-echo-area-message t)
   '(initial-scratch-message nil)
   '(frame-resize-pixelwise t)
   '(initial-frame-alist
     '((fullscreen . fullboth)
       (undecorated . nil)
       (left-fringe . 0)
       (right-fringe . 0)
       (internal-border-width . 8)
       (tool-bar-lines . 0)))
   '(default-frame-alist
     '((fullscreen . fullboth)
       (undecorated . nil)
       (internal-border-width . 8)
       (left-fringe . 0)
       (right-fringe . 0)))
   '(menu-bar-mode nil)
   '(scroll-bar-mode nil)
   '(tool-bar-mode nil)
   '(initial-buffer-choice t)
   '(initial-major-mode 'fundamental-mode)
   '(frame-inhibit-implied-resize t)
   '(frame-title-format t)
   '(cursor-in-non-selected-windows nil)
   '(font-lock-maximum-decoration nil)
   '(font-lock-maximum-size nil)
   '(x-underline-at-descent-line t)
   '(window-divider-default-right-width 16)
   '(window-divider-default-places 'right-only))

  (provide 'early-init)
  ;;; early-init.el ends here
#+end_src

*** init.el
:PROPERTIES:
:CUSTOM_ID: init
:END:

**Purpose**
Serve as the primary entry point for Emacs 30+, bootstrapping **straight.el + leaf**, applying pragmatic performance/UI defaults, wiring environment paths (with macOS support), and loading modular configuration from `lisp/modules.el` plus optional personal overrides.

**What it does**
- **Bootstraps straight.el** from GitHub if needed, then installs core packages: `leaf`, `leaf-keywords`, `leaf-convert`, `blackout`, `hydra`, and `org`.
  - Initializes `leaf-keywords` so `:hook`, `:bind`, `:custom` etc. are available immediately.
- **Performance tweaks**:
  - Temporarily raises `read-process-output-max` to 4 MiB during init (restored post-startup).
  - Enables **GCMH** (idle GC): `gcmh-idle-delay=5`, `gcmh-high-cons-threshold=16 MiB`.
- **Editing & UI defaults**:
  - Unsets risky/rarely used global keys (e.g., `C-z`, `C-x C-z`, `C-x C-c`, `M-z`, `M-m`, `M-/`), remaps `M-/` → `cape-dabbrev` when available.
  - Enables `pixel-scroll-precision-mode` (if present), `electric-pair-mode`, and `auto-save-visited-mode`.
  - Sets sane `emacs` options (no startup screen, short answers, versioned backups, softer idle redraw) and relative line numbers in `prog-mode`.
- **Modifiers & OS specifics**:
  - macOS: `option=meta`, `command=super`, `control=control`, `fn=hyper`.
  - Windows: maps left/right Windows keys to `super`, Apps key to `hyper`.
- **Filesystem hygiene**:
  - Aligns **no-littering** paths to hidden dirs prepared in *early-init* (`.etc/`, `.var/`), falling back to creating them under `user-emacs-directory` if needed.
- **Environment import (macOS GUIs)**:
  - Uses **exec-path-from-shell** to import `PATH`, `LANG`, `PASSWORD_STORE_DIR`, `GPG_KEY_ID`, `OPENROUTER_API_KEY`, `OPENAI_API_KEY`; disables startup-file checks; runs with `-l -i`.
  - Prefers Homebrew paths by prepending `/opt/homebrew/bin` or `/usr/local/bin` to `exec-path`/`PATH` when found.
- **Dired integration**:
  - On macOS with `gls` (GNU ls), enables `--group-directories-first` and human-readable listing; otherwise uses portable flags and disables `ls-dired`.
- **Customize & personal layers**:
  - Respects `custom-file` (from *early-init*: `.etc/custom.el`) and loads it quietly if readable.
  - Provides `my/safe-load-file` for robust, non-fatal `load` with clear messages.
  - Optionally loads `personal/<user>.el` (best-effort, non-fatal).
- **Module loader**:
  - Adds `lisp/` to `load-path` and `(require 'modules)` to bring in the modular configuration tree.
- **Startup telemetry**:
  - After init, prints a concise “ready” message with elapsed time and GC count.

**Notes**
- Assumes *early-init.el* already established directory policy (`.etc/`, `.var/`, `.cache/`) and `custom-file`.
- Built-in libraries are declared with `:straight nil`; third-party packages use `:straight t` (via `straight-use-package`).
- LSP backend selection is not hard-wired here; this file is backend-agnostic and leaves that decision to modules or user settings.
- All error paths during bootstrapping (straight install, env import, personal file load) are **non-fatal** and surface clear messages rather than aborting the session.

#+begin_src emacs-lisp :tangle init.el
  ;;; init.el --- Main initialization -*- lexical-binding: t; -*-
  ;;
  ;; Copyright (c) 2021-2025
  ;; Author: YAMASHITA, Takao <tjy1965@gmail.com>
  ;; License: GNU GPL v3 or later
  ;;
  ;; $Lastupdate: 2025/10/11 14:29:30 $
  ;;
  ;;; Commentary:
  ;; Entry point for Emacs 30+ configuration.
  ;; Category: core
  ;;
  ;;; Code:

  ;;;; Bootstrap straight.el -----------------------------------------------------
  (require 'url) ;; for url-retrieve-synchronously
  (defvar bootstrap-version 7)
  (let* ((base (or (bound-and-true-p straight-base-dir) user-emacs-directory))
         (bootstrap-file (expand-file-name "straight/repos/straight.el/bootstrap.el" base)))
    (unless (file-exists-p bootstrap-file)
      (condition-case err
          (with-current-buffer
              (url-retrieve-synchronously
               "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
               'silent 'inhibit-cookies)
            (goto-char (point-max))
            (eval-print-last-sexp))
        (error (user-error "[straight] bootstrap failed: %s"
                           (error-message-string err)))))
    (load bootstrap-file nil 'nomessage))

  (dolist (pkg '(leaf leaf-keywords leaf-convert blackout hydra org))
    (ignore-errors (straight-use-package pkg)))

  (eval-when-compile
    (require 'leaf)
    (require 'leaf-keywords))
  (when (fboundp 'leaf-keywords-init)
    (leaf-keywords-init))

  (require 'org)

  ;;;; Performance tweaks ---------------------------------------------------------
  (defvar my:orig:read-process-output-max
    (and (boundp 'read-process-output-max) read-process-output-max))
  (when (boundp 'read-process-output-max)
    (setq read-process-output-max (* 4 1024 1024)))
  (add-hook 'emacs-startup-hook
            (lambda ()
              (when (boundp 'read-process-output-max)
                (setq read-process-output-max my:orig:read-process-output-max))))

  (leaf gcmh
    :straight t
    :custom
    ((gcmh-idle-delay . 5)
     (gcmh-high-cons-threshold . 16777216))
    :config
    (gcmh-mode 1))

  ;;;; Basic UI and editing defaults ---------------------------------------------
  (leaf emacs
    :straight nil
    :init
    (dolist (k '("C-z" "C-x C-z" "C-x C-c" "M-z" "M-m" "M-/"))
      (when (lookup-key (current-global-map) (kbd k))
        (keymap-global-unset k)))
    (when (fboundp 'cape-dabbrev)
      (keymap-global-set "M-/" #'cape-dabbrev))
    (when (fboundp 'pixel-scroll-precision-mode)
      (pixel-scroll-precision-mode 1))
    :config
    (setopt inhibit-startup-screen        t
            initial-scratch-message       nil
            use-short-answers             t
            create-lockfiles              nil
            make-backup-files             t
            delete-old-versions           t
            version-control               t
            idle-update-delay             0.2
            ring-bell-function            #'ignore
            display-line-numbers-type     'relative)
    (electric-pair-mode 1)
    (add-hook 'prog-mode-hook #'display-line-numbers-mode)
    (auto-save-visited-mode 1))

  (leaf my:modifier
    :straight nil
    :config
    (pcase system-type
      ('darwin
       (setq mac-option-modifier 'meta
             mac-command-modifier 'super
             mac-control-modifier 'control
             mac-function-modifier 'hyper))
      ('windows-nt
       (setq w32-lwindow-modifier 'super
             w32-rwindow-modifier 'super
             w32-apps-modifier   'hyper))
      (_ nil)))

  ;;;; Files and environment ------------------------------------------------------
  (leaf no-littering
    :straight t
    :init
    (setq no-littering-etc-directory (file-name-as-directory (or (bound-and-true-p my:d:etc) (expand-file-name ".etc/" user-emacs-directory)))
          no-littering-var-directory (file-name-as-directory (or (bound-and-true-p my:d:var) (expand-file-name ".var/" user-emacs-directory)))))

  (leaf exec-path-from-shell
    :straight t
    :if (memq window-system '(mac ns))
    :custom ((exec-path-from-shell-check-startup-files . nil)
             (exec-path-from-shell-arguments . '("-l" "-i"))
             (exec-path-from-shell-variables
              . '("PATH" "LANG" "PASSWORD_STORE_DIR" "GPG_KEY_ID"
                  "OPENROUTER_API_KEY" "OPENAI_API_KEY")))
    :config
    (ignore-errors (exec-path-from-shell-initialize)))

  (when (eq system-type 'darwin)
    (dolist (p '("/opt/homebrew/bin" "/usr/local/bin"))
      (when (and (file-directory-p p)
                 (not (member p exec-path)))
        (add-to-list 'exec-path p)
        (setenv "PATH" (concat p ":" (getenv "PATH"))))))

  (leaf dired
    :straight nil
    :config
    (cond
     ((and (eq system-type 'darwin) (executable-find "gls"))
      (setq insert-directory-program "gls"
            dired-use-ls-dired t
            dired-listing-switches "-aBhl --group-directories-first"))
     (t
      (setq dired-use-ls-dired nil
            dired-listing-switches "-alh"))))

  (setq custom-file (or (bound-and-true-p my:f:custom) custom-file))
  (when (and custom-file (file-readable-p custom-file))
    (ignore-errors (load custom-file nil 'nomessage)))

  (defun my/safe-load-file (file &optional noerror)
    "Load FILE safely. If NOERROR is non-nil, log instead of raising."
    (when (and file (file-exists-p file))
      (condition-case err
          (load file nil 'nomessage)
        (error
         (funcall (if noerror #'message #'user-error)
                  "[load] failed to load %s: %s"
                  file (error-message-string err))))))

  (my/safe-load-file
   (expand-file-name
    (concat "personal/" user-login-name ".el")
    (or (bound-and-true-p my:d) user-emacs-directory))
   t)

  (let* ((root (or (and (boundp 'my:d) (stringp my:d) (file-directory-p my:d) my:d)
                   user-emacs-directory))
         (lisp-dir (expand-file-name "lisp" root)))
    (add-to-list 'load-path lisp-dir)
    (require 'modules nil t))

  (add-hook 'after-init-hook
            (lambda ()
              (run-with-idle-timer
               0 nil
               (lambda ()
                 (message "Emacs ready in %.2f seconds with %d GCs."
                          (float-time (time-subtract after-init-time before-init-time))
                          gcs-done)))))
  (provide 'init)
  ;;; init.el ends here
#+end_src

** Modular Configuration
:PROPERTIES:
:CUSTOM_ID: modules
:END:

*** modules.el
:PROPERTIES:
:CUSTOM_ID: core-modules
:END:

**Purpose**
Provide a single, deterministic loader for modular configuration under `lisp/`. Uses the **`orgx/` namespace** (not `org`) for Org-related modules to avoid feature/path collisions with the official Org package.

**What it does**
- **Deterministic order:** Loads modules from the `my:modules` list in the given sequence.
- **Skips & extras:** Excludes any features listed in `my:modules-skip` and appends any in `my:modules-extra`.
- **Safe `require`:** Each module is required via a guarded loader; failures are **logged** (non-fatal) and do not abort startup.
- **Verbose timing (opt-in by default):** When `my:modules-verbose` is non-nil (default `t`), prints per-module elapsed time and a final summary (`loaded / skipped / failed / total time`).
- **Compact time formatter:** Uses `my:modules--format-seconds` to render durations (ms for sub-second values).

**Notes**
- Every module file must provide a feature that **matches its path**, e.g. `lisp/orgx/org-core.el` must end with `(provide 'orgx/org-core)`.
- The loader itself is defensive: one bad module won’t take down the whole session; you’ll see a `[modules] Failed to load …` message instead.
- The Org ecosystem lives under `orgx/…` (e.g., `orgx/org-core`, `orgx/org-visual`, `orgx/org-extensions`, `orgx/org-export`) to stay clear of the built-in/ELPA Org feature names.
- Tuning knobs:
  - `my:modules-verbose` (boolean): per-module timing + summary.
  - `my:modules-skip` (list of symbols): features to omit.
  - `my:modules-extra` (list of symbols): features to load **after** the standard set.

**Usage tips**
- Use `my:modules-skip` for temporary quarantines (e.g., while debugging a module).
- Use `my:modules-extra` for environment-specific add-ons without editing the canonical `my:modules` list.
- Keep group/namespace consistency (e.g., `core/…`, `ui/…`, `completion/…`, `orgx/…`, `vcs/…`, `dev/…`, `utils/…`) for predictable load order and discoverability.

#+begin_src emacs-lisp :tangle lisp/modules.el
  ;;; modules.el --- Modular config loader -*- lexical-binding: t; -*-
  ;;
  ;; Copyright (c) 2021-2025
  ;; Author: YAMASHITA, Takao
  ;; License: GNU GPL v3 or later
  ;;
  ;;; Commentary:
  ;; Central entry point to load modular configs placed under lisp/.
  ;; Category: core
  ;;
  ;;; Code:

  (eval-when-compile (require 'subr-x)) ;; string-join, etc.

  (defgroup my:modules nil
    "Loader options for modular Emacs configuration."
    :group 'convenience)

  (defcustom my:modules-verbose t
    "If non-nil, print per-module load time and a summary."
    :type 'boolean
    :group 'my:modules)

  (defcustom my:modules-skip nil
    "List of module features to skip during loading."
    :type '(repeat symbol)
    :group 'my:modules)

  (defcustom my:modules-extra nil
    "List of extra module features to append after `my:modules'."
    :type '(repeat symbol)
    :group 'my:modules)

  (defconst my:modules
    '(
      ;; Core
      core/general
      core/tools
      core/utils
      core/history
      core/editing
      core/switches
      core/custom

      ;; UI
      ui/ui-font
      ui/ui-theme
      ui/ui-window
      ui/ui-utils

      ;; Completion
      completion/completion-core
      completion/completion-vertico
      completion/completion-consult
      completion/completion-embark
      completion/completion-corfu
      completion/completion-icons

      ;; Org ecosystem (module namespace = orgx/)
      orgx/org-core
      orgx/org-visual
      orgx/org-extensions
      orgx/org-export

      ;; VCS
      vcs/vcs-magit
      vcs/vcs-gutter
      vcs/vcs-forge

      ;; Development
      dev/dev-ai
      dev/dev-term
      dev/dev-build
      dev/dev-docker

      ;; Web/Infra
      dev/web-core
      dev/format
      dev/infra-modes
      dev/sql
      dev/rest

      ;; Utils
      utils/utils-functions
      utils/utils-scratch
      utils/utils-backup
      utils/utils-async
      utils/search-nav
      )
    "Default set of modules to load in order.")

  (defun my/modules--should-load-p (feature)
    "Return non-nil if FEATURE should be loaded."
    (not (memq feature my:modules-skip)))

  (defun my/modules--require-safe (feature)
    "Require FEATURE with error trapping. Return non-nil on success."
    (condition-case err
        (progn (require feature) t)
      (error (message "[modules] Failed to load %s: %s"
                      feature (error-message-string err))
             nil)))

  ;; FIX: name uses ':' to match call sites
  (defun my:modules--format-seconds (sec)
    "Format SEC (float seconds) compactly."
    (cond
     ((< sec 0.001) (format "%.3fms" (* sec 1000.0)))
     ((< sec 1.0)   (format "%.1fms"  (* sec 1000.0)))
     (t             (format "%.2fs"   sec))))

  (defun my/modules-load ()
    "Load all modules defined by `my:modules', respecting options."
    (let* ((final (seq-remove
                   (lambda (m) (not (my/modules--should-load-p m)))
                   (append my:modules my:modules-extra)))
           (ok 0) (ng 0)
           (t0 (and my:modules-verbose (current-time))))
      (dolist (mod final)
        (let ((m0 (and my:modules-verbose (current-time))))
          (if (my/modules--require-safe mod) (setq ok (1+ ok)) (setq ng (1+ ng)))
          (when my:modules-verbose
            (message "[modules] %-24s %s"
                     mod (my:modules--format-seconds
                          (float-time (time-subtract (current-time) m0)))))))
      (when my:modules-verbose
        (message "[modules] loaded=%d skipped=%d failed=%d total=%s"
                 ok
                 (- (length (append my:modules my:modules-extra))
                    (length final))
                 ng
                 (my:modules--format-seconds
                  (float-time (time-subtract (current-time) t0)))))))

  (my/modules-load)

  (provide 'modules)
  ;;; modules.el ends here
#+end_src

*** core/general.el — General settings, Meow modal & keybindings
:PROPERTIES:
:CUSTOM_ID: core-general
:END:

**Purpose**
Adopt **Meow** for modal editing and organize commands under a **Space leader (`SPC`) hierarchy**. Define global policies and keymaps for navigation, window management, files, session restore (Desktop/Winner), TRAMP-friendly editing, and a **visited-mode**–based auto save that writes real files (no `#…#` artifacts).

**What it does**
- **Meow (modal editing)**
  - Enables Meow globally and builds a **hierarchical Space-leader** layout with true prefix groups (no “starts with non-prefix key” warnings).
  - Normal-state essentials: `i/a/o/O` (insert/append/open lines), keypad help `?`, keypad `,`, redo `U`, EOL ops `D`/`Y`, word motions `W/E/B`.
  - Ensures **ESC exits Insert state** reliably.
- **Leader groups (SPC …)**
  - Groups: **b**(buffers) / **w**(windows) / **p**(project) / **s**(search) / **g**(git) / **c**(code) / **e**(errors) / **t**(toggles) / **o**(org/roam) / **m**(misc/web) / **a**(AI) / **q**(session) / **h**(help).
  - Top-level conveniences: `SPC`→`M-x`, `.` other-window, `,` keypad, `/` line search, `=` expand-region, `z` text-scale hydra, plus file openers (`f/F/O/r`).
- **Backend-agnostic IDE helpers**
  - `my/code-actions`, `my/rename-symbol`, `my/format-buffer` prefer **Eglot**, fall back to **lsp-mode**, otherwise safe fallbacks.
  - Project-aware ripgrep via `consult` + built-in `project.el` (`my/consult-ripgrep-project`).
- **Global convenience keys (outside Meow)**
  - macOS-like `s-…` bindings for frame/window/buffer navigation.
  - Handy chords: `C-c z` (zoom hydra), `C-c r` (ripgrep), `C-=` (expand-region), Org/Roam and EWW helpers, etc.
- **Session & environment**
  - Keeps **Desktop** and **Winner** in the overall setup for window/session restore.
  - TRAMP defaults retained; visited-mode auto save avoids temporary `#…#` files.
- **Auth & secrets**
  - Environment pre-flight (`GPG_KEY_ID`, `PASSWORD_STORE_DIR`) with warnings.
  - `epa-file` (optional loopback), `auth-source` (`auth-source-gpg-encrypt-to`), `password-store` + `auth-source-pass` (auto-enable if `pass` is available), and `plstore` encryption defaults.

**Notes**
- IDE helpers detect **Eglot** or **lsp-mode** at runtime; no hard dependency either way.
- Project operations rely on built-in **`project.el`**; ripgrep requires `rg` in PATH.
- Leader groups are installed as **real prefix maps** before sub-keys, so multi-key sequences (e.g., `SPC m e`) work predictably.
- Tangling target: `lisp/core/general.el` with `(provide 'core/general)`.

**Leader Keymap (Cheat Sheet)**

| Prefix | Representative Keys                      | Summary                                            |
|--------+------------------------------------------+----------------------------------------------------|
| `SPC`  | `SPC`=M-x, `.` other win, `,` keypad, `/` line, `=` expand, `z` zoom | General/quick actions                              |
| `SPC f`| `f/F/O/r`                                 | Files: open / other-window / other-frame / recent  |
| `SPC b`| `b/B/k/n/p/r`                             | Buffers: switch / project / kill / next / prev / revert |
| `SPC w`| `w/s/v/d/o/=/2`                           | Windows: ace / split-h / split-v / delete / only / balance / toggle split |
| `SPC p`| `p/f/s/b/r/d`                             | Project: switch / find-file / rg project / buffers / query-replace / dired |
| `SPC s`| `s/r/g/m`                                 | Search: line / ripgrep / ripgrep@project / imenu   |
| `SPC g`| `s/b/l/d/c`                               | Git: status / blame / log / diff / commit          |
| `SPC c`| `a/r/f/d/D/R/i`                           | Code: actions / rename / format / def / def-ow / refs / capf |
| `SPC e`| `n/p/l`                                   | Diagnostics (Flymake): next / prev / buffer list   |
| `SPC t`| `l/w/r/z/i`                               | Toggles: line nums / whitespace / read-only / zoom / images |
| `SPC o`| `a/c/i/f`                                 | Org & Roam: agenda / capture / insert / find       |
| `SPC m`| `e/s/o/b/r/u`                             | Web (EWW): open / search / open-file / bookmarks / readable / toggle-images |
| `SPC a`| `a`                                       | AI: Aidermacs menu                                 |
| `SPC q`| `n/r/q`                                   | Session: new frame+scratch / restart-or-exit / quit |
| `SPC h`| `k/f/v`                                   | Help: describe key / function / variable           |

**Tips**
- `u` Undo (Meow), `U` Redo (`undo-fu-only-redo`).
- `D` / `Y` operate to **end-of-line** when no selection.
- `?` shows key help; `,` opens Meow keypad.
- Keep Windmove arrows for window navigation; they coexist with Meow’s motions.

**(Optional) which-key labels**
If you use `which-key`, add discoverable group names (documentation-only, not tangled):

#+begin_src emacs-lisp :tangle no
(with-eval-after-load 'which-key
  (dolist (it '(("SPC b" . "buffers")
                ("SPC w" . "windows")
                ("SPC p" . "project")
                ("SPC s" . "search")
                ("SPC g" . "git")
                ("SPC c" . "code")
                ("SPC e" . "errors")
                ("SPC t" . "toggles")
                ("SPC o" . "org/roam")
                ("SPC m" . "misc/web")
                ("SPC a" . "ai")
                ("SPC q" . "session")
                ("SPC h" . "help")))
    (which-key-add-key-based-replacements (car it) (cdr it))))
#+end_src

#+begin_src emacs-lisp :tangle lisp/core/general.el
  ;;; core/general.el --- General settings, Meow modal & keybindings -*- lexical-binding: t; -*-
  ;;
  ;; Copyright (c) 2021-2025
  ;; Author: YAMASHITA, Takao
  ;; License: GNU GPL v3 or later
  ;;
  ;; Category: core
  ;;
  ;;; Commentary:
  ;; - Introduce Meow (modal editing) with a Space-leader hierarchy
  ;; - Keep useful global bindings for macOS-like shortcuts and muscle memory
  ;; - Provide LSP/Eglot-agnostic helpers (code actions, rename, format)
  ;; - Authentication helpers (GPG + pass) remain as-is
  ;;
  ;;; Code:

  (eval-when-compile
    (require 'leaf)
    (require 'subr-x))

  ;;;; Text scaling hydra ---------------------------------------------------------
  (leaf hydra
    :straight t
    :config
    (defhydra core-hydra-text-scale (:hint nil :color red)
      "
  ^Text Scaling^
  [_+_] increase   [_-_] decrease   [_0_] reset   [_q_] quit
  "
      ("+" text-scale-increase)
      ("-" text-scale-decrease)
      ("0" (text-scale-set 0) :color blue)
      ("q" nil "quit" :color blue)))

  ;;;; Small utilities ------------------------------------------------------------
  (leaf my:utils
    :straight nil
    :init
    (defun my/new-frame-with-scratch ()
      "Create a new frame and switch to a fresh buffer."
      (interactive)
      (let ((frame (make-frame)))
        (with-selected-frame frame
          (switch-to-buffer (generate-new-buffer "untitled")))))

    (defun my/restart-or-exit ()
      "Restart Emacs if `restart-emacs' exists; otherwise save & exit."
      (interactive)
      (if (fboundp 'restart-emacs)
          (restart-emacs)
        (save-buffers-kill-emacs)))

    ;; Keep Windmove for arrow-based window motions (coexists with Meow hjkl).
    (windmove-default-keybindings))

  ;;;; Meow (modal editing) -------------------------------------------------------
  (leaf meow
    :straight t
    :init
    ;; Backend-agnostic IDE helpers (Eglot or LSP-Mode).
    (defun my/code-actions ()
      "Run code actions for current point using Eglot or LSP-Mode."
      (interactive)
      (cond
       ((fboundp 'eglot-code-actions) (eglot-code-actions))
       ((fboundp 'lsp-execute-code-action) (lsp-execute-code-action))
       (t (user-error "No code action backend (Eglot/LSP) available"))))

    (defun my/rename-symbol ()
      "Rename symbol using Eglot/LSP."
      (interactive)
      (cond
       ((fboundp 'eglot-rename) (eglot-rename))
       ((fboundp 'lsp-rename) (lsp-rename))
       (t (user-error "No rename backend (Eglot/LSP) available"))))

    (defun my/format-buffer ()
      "Format current buffer using Eglot/LSP, or fallback to indent-region."
      (interactive)
      (cond
       ((fboundp 'eglot-format-buffer) (eglot-format-buffer))
       ((fboundp 'lsp-format-buffer) (lsp-format-buffer))
       ((fboundp 'indent-region) (indent-region (point-min) (point-max)))
       (t (user-error "No formatter available"))))

    (defun my/consult-ripgrep-project ()
      "Run ripgrep in current project, fallback to consulting user for root."
      (interactive)
      (let* ((pr (when (fboundp 'project-current) (project-current)))
             (root (when pr (car (project-roots pr)))))
        (if (and root (fboundp 'consult-ripgrep))
            (consult-ripgrep root)
          (call-interactively 'consult-ripgrep))))

    (defun my/toggle-transient-line-numbers ()
      "Toggle line numbers, preserving buffer-local overrides."
      (interactive)
      (if (bound-and-true-p display-line-numbers-mode)
          (display-line-numbers-mode 0)
        (display-line-numbers-mode 1)))

    (defun my/meow-setup ()
      "Define Meow modal maps and a hierarchical Space-leader layout."
      ;; -----------------------------------------------------------------------
      ;; 0) Bootstrap: define leader prefix maps, then expose them under SPC.
      ;;    This ensures keys like 'm e' start with a true prefix ('m').
      ;; -----------------------------------------------------------------------
      (define-prefix-command 'my/leader-b-map) ;; buffers
      (define-prefix-command 'my/leader-w-map) ;; windows
      (define-prefix-command 'my/leader-p-map) ;; project
      (define-prefix-command 'my/leader-g-map) ;; git
      (define-prefix-command 'my/leader-c-map) ;; code
      (define-prefix-command 'my/leader-e-map) ;; errors/diagnostics
      (define-prefix-command 'my/leader-t-map) ;; toggles
      (define-prefix-command 'my/leader-o-map) ;; org/roam
      (define-prefix-command 'my/leader-m-map) ;; misc/web/tools
      (define-prefix-command 'my/leader-q-map) ;; session/quit
      (define-prefix-command 'my/leader-h-map) ;; help

      ;; Bind group heads under the leader first (SPC <group> ...).
      (meow-leader-define-key
       '("b" . my/leader-b-map)
       '("w" . my/leader-w-map)
       '("p" . my/leader-p-map)
       '("g" . my/leader-g-map)
       '("c" . my/leader-c-map)
       '("e" . my/leader-e-map)
       '("t" . my/leader-t-map)
       '("o" . my/leader-o-map)
       '("m" . my/leader-m-map)
       '("q" . my/leader-q-map)
       '("h" . my/leader-h-map))

      ;; -----------------------------------------------------------------------
      ;; 1) Top-level leader bindings (SPC ...)
      ;; -----------------------------------------------------------------------
      (meow-leader-define-key
       '("SPC" . execute-extended-command)  ;; M-x
       '("."   . other-window)
       '(","   . meow-keypad)               ;; keypad for temporary insert
       '("/"   . consult-line)
       '(";"   . comment-or-uncomment-region)
       '("="   . er/expand-region)
       '("z"   . core-hydra-text-scale/body)
       ;; files at top-level as shortcuts
       '("f"   . find-file)
       '("F"   . find-file-other-window)
       '("O"   . find-file-other-frame)
       '("r"   . consult-recent-file))

      ;; -----------------------------------------------------------------------
      ;; 2) Group: Buffers (SPC b ...)
      ;; -----------------------------------------------------------------------
      (meow-leader-define-key
       '("b b" . consult-buffer)
       '("b B" . consult-project-buffer)
       '("b k" . my/kill-buffer-smart)
       '("b n" . next-buffer)
       '("b p" . previous-buffer)
       '("b r" . revert-buffer))

      ;; 3) Group: Windows (SPC w ...)
      (meow-leader-define-key
       '("w w" . ace-window)
       '("w s" . split-window-below)
       '("w v" . split-window-right)
       '("w d" . delete-window)
       '("w o" . delete-other-windows)
       '("w =" . balance-windows)
       '("w 2" . my/toggle-window-split))

      ;; 4) Group: Project (SPC p ...)
      (meow-leader-define-key
       '("p p" . project-switch-project)
       '("p f" . project-find-file)
       '("p s" . my/consult-ripgrep-project)
       '("p b" . consult-project-buffer)
       '("p r" . project-query-replace-regexp)
       '("p d" . project-dired))

      ;; 5) Group: Search (SPC s ...) — keep generic search shortcuts too
      (meow-leader-define-key
       '("s s" . consult-line)
       '("s r" . consult-ripgrep)
       '("s g" . my/consult-ripgrep-project)
       '("s m" . consult-imenu))

      ;; 6) Group: Git (SPC g ...)
      (meow-leader-define-key
       '("g s" . magit-status)
       '("g b" . magit-blame-addition)
       '("g l" . magit-log-current)
       '("g d" . magit-diff-buffer-file)
       '("g c" . magit-commit))

      ;; 7) Group: Code (SPC c ...) — Eglot/LSP helpers
      (meow-leader-define-key
       '("c a" . my/code-actions)
       '("c r" . my/rename-symbol)
       '("c f" . my/format-buffer)
       '("c d" . xref-find-definitions)
       '("c D" . xref-find-definitions-other-window)
       '("c R" . xref-find-references)
       '("c i" . completion-at-point))

      ;; 8) Group: Errors/diagnostics (SPC e ...)
      (meow-leader-define-key
       '("e n" . flymake-goto-next-error)
       '("e p" . flymake-goto-prev-error)
       '("e l" . flymake-show-buffer-diagnostics))

      ;; 9) Group: Toggles (SPC t ...)
      (meow-leader-define-key
       '("t l" . my/toggle-transient-line-numbers)
       '("t w" . whitespace-mode)
       '("t r" . read-only-mode)
       '("t z" . core-hydra-text-scale/body)
       '("t i" . my/eww-toggle-images))

      ;; 10) Group: Org & Roam (SPC o ...)
      (meow-leader-define-key
       '("o a" . org-agenda)
       '("o c" . org-capture)
       '("o i" . org-roam-node-insert)
       '("o f" . org-roam-node-find))

      ;; 11) Group: Misc/Web (SPC m ...)
      (meow-leader-define-key
       '("m e" . eww)
       '("m s" . my/eww-search)
       '("m o" . eww-open-file)
       '("m b" . eww-list-bookmarks)
       '("m r" . eww-readable)
       '("m u" . my/eww-toggle-images))

      ;; 12) Group: AI (SPC a ...) — single action kept flat
      (meow-leader-define-key
       '("a a" . aidermacs-transient-menu))

      ;; 13) Group: Session/quit (SPC q ...)
      (meow-leader-define-key
       '("q n" . my/new-frame-with-scratch)
       '("q r" . my/restart-or-exit)
       '("q q" . save-buffers-kill-emacs))

      ;; 14) Group: Help (SPC h ...)
      (meow-leader-define-key
       '("h k" . describe-key)
       '("h f" . describe-function)
       '("h v" . describe-variable))

      ;; -----------------------------------------------------------------------
      ;; Normal-state fine-tuning (add essential Insert/Append/Open bindings)
      ;; -----------------------------------------------------------------------
      (meow-normal-define-key
       '("?" . meow-keypad-describe-key) ;; quick help
       '("," . meow-keypad)              ;; keypad
       '("i" . meow-insert)              ;; ENTER INSERT MODE
       '("a" . meow-append)              ;; append after point
       '("o" . meow-open-below)          ;; open new line below and insert
       '("O" . meow-open-above)          ;; open new line above and insert
       '("U" . undo-fu-only-redo)        ;; redo (pairs with u=undo)
       '("D" . meow-kill)                ;; kill to EOL when no selection
       '("Y" . meow-save)                ;; copy to EOL when no selection
       '("W" . meow-mark-word)
       '("E" . meow-next-word)
       '("B" . meow-back-word)
       '("-" . negative-argument))

      ;; Behavior tweaks
      (setq meow-use-clipboard t
            meow-expand-exclude-mode-list
            '(special-mode help-mode eshell-mode term-mode vterm-mode)))

    :config
    (require 'meow)
    (my/meow-setup)

    ;; Make sure ESC exits Insert state reliably.
    (with-eval-after-load 'meow
      (define-key meow-insert-state-keymap [escape] #'meow-insert-exit))

    (meow-global-mode 1))

  ;;;; Global bindings (outside modal states) ------------------------------------
  (leaf my:key:global
    :straight nil
    :bind
    (("<f1>"      . help-command)
     ("<f5>"      . my/revert-buffer-quick)
     ("<f8>"      . treemacs)
     ;; macOS-like conveniences kept as global bindings
     ("s-<down>"  . end-of-buffer)
     ("s-<up>"    . beginning-of-buffer)
     ("s-<right>" . next-buffer)
     ("s-<left>"  . previous-buffer)
     ("s-."       . ace-window)
     ("s-w"       . ace-swap-window)
     ("s-d"       . delete-frame)
     ("s-m"       . my/new-frame-with-scratch)
     ("s-j"       . find-file-other-window)
     ("s-o"       . find-file-other-frame)
     ("s-r"       . my/restart-or-exit)
     ;; Keep some traditional chord keys globally for muscle memory
     ("C-h"       . backward-delete-char)
     ("C-/"       . undo-fu-only-undo)
     ("C-?"       . undo-fu-only-redo)
     ("C-c z"     . core-hydra-text-scale/body)
     ("C-c b"     . consult-buffer)
     ("C-."       . other-window)
     ("C-c 2"     . my/toggle-window-split)
     ("C-c o"     . find-file)
     ("C-c v"     . find-file-read-only)
     ("C-c V"     . view-file-other-window)
     ("C-c k"     . my/kill-buffer-smart)
     ("C-s"       . consult-line)
     ("C-c r"     . consult-ripgrep)
     ("C-="       . er/expand-region)
     ("C-c ;"     . comment-or-uncomment-region)
     ("C-c M-a"   . align-regexp)
     ("C-c l"     . display-line-numbers-mode)
     ("C-c d a"   . org-agenda)
     ("C-c d c"   . org-capture)
     ("C-c d i"   . org-roam-node-insert)
     ("C-c d f"   . org-roam-node-find)
     ("C-c a a"   . aidermacs-transient-menu)
     ("C-c w w"   . eww)
     ("C-c w s"   . my/eww-search)
     ("C-c w o"   . eww-open-file)
     ("C-c w b"   . eww-list-bookmarks)
     ("C-c w r"   . eww-readable)
     ("C-c w u"   . my/eww-toggle-images)
     ("M-x"       . execute-extended-command)))

  ;;;; Auth / secrets -------------------------------------------------------------
  (defvar my:d:password-store
    (or (getenv "PASSWORD_STORE_DIR")
        (concat no-littering-var-directory "password-store/"))
    "Path to the password store.")

  (defun my/auth-check-env ()
    "Validate authentication environment and warn if misconfigured."
    (unless (getenv "GPG_KEY_ID")
      (display-warning 'auth "GPG_KEY_ID is not set." :level 'debug))
    (unless (file-directory-p my:d:password-store)
      (display-warning 'auth
                       (format "Password store directory does not exist: %s"
                               my:d:password-store)
                       :level 'warning)))

  (leaf *authentication
    :straight nil
    :init
    (my/auth-check-env)

    (leaf epa-file
      :straight nil
      :commands (epa-file-enable)
      :init
      (setq epa-pinentry-mode
            (if (getenv "USE_GPG_LOOPBACK") 'loopback 'default))
      (add-hook 'emacs-startup-hook #'epa-file-enable))

    (leaf auth-source
      :straight nil
      :init
      (with-eval-after-load 'auth-source
        (let ((key (getenv "GPG_KEY_ID")))
          (if key
              (setq auth-source-gpg-encrypt-to key)
            (display-warning 'auth-source
                             "GPG_KEY_ID is not set. Authentication backends may be limited.")))))

    (leaf password-store :straight t)

    (leaf auth-source-pass
      :straight t
      :commands (auth-source-pass-enable)
      :hook (emacs-startup-hook . (lambda ()
                                    (when (executable-find "pass")
                                      (auth-source-pass-enable)))))

    (leaf plstore
      :straight nil
      :init
      (with-eval-after-load 'plstore
        (setq plstore-secret-keys 'silent
              plstore-encrypt-to (getenv "GPG_KEY_ID")))))

  (provide 'core/general)
  ;;; core/general.el ends here
#+end_src

*** core/tools.el
:PROPERTIES:
:CUSTOM_ID: core-tools
:END:

**Purpose**
Developer/UI helpers used by leader keymaps and modules.

**What it does**
- Windowing: toggle 2-pane split orientation; open Dired selection in other window.
- Keymaps: list conflicting bindings across active maps.
- Tree-sitter: install grammars into `my:d:treesit`, build in `my:d:treesit-build`, extend load-path; cooperates with `treesit-auto`.
- External tooling: open current file/line/col in VS Code (`code -g`).
- Introspection: echo environment variables; show Emacs build info in a table.
- Org: fold/unfold/toggle subtree with `C-c f/e/t`.

**Notes**
Tree-sitter installer is advised to default output paths and is safe to call interactively.

#+begin_src emacs-lisp :tangle lisp/core/tools.el
  ;;; core/tools.el --- Developer & UI helper tools -*- lexical-binding: t; -*-
  ;;
  ;; Copyright (c) 2021-2025
  ;; Author: YAMASHITA, Takao
  ;; License: GNU GPL v3 or later
  ;;
  ;; Category: core
  ;;
  ;;; Code:

  (defun my/toggle-linum-lines () (interactive) (display-line-numbers-mode 'toggle))

  (defun my/toggle-window-split ()
    "Toggle between horizontal and vertical split for two windows."
    (interactive)
    (when (= (count-windows) 2)
      (let* ((this-buf (window-buffer))
             (next-buf (window-buffer (next-window)))
             (this-edges (window-edges))
             (next-edges (window-edges (next-window)))
             (split-vert (= (car this-edges) (car next-edges)))
             (split-fn (if split-vert #'split-window-horizontally #'split-window-vertically)))
        (delete-other-windows)
        (funcall split-fn)
        (set-window-buffer (selected-window) this-buf)
        (set-window-buffer (next-window) next-buf)
        (select-window (selected-window)))))

  (defun my/find-keybinding-conflicts ()
    "Find and display conflicting keybindings in active keymaps."
    (interactive)
    (let ((conflicts (make-hash-table :test 'equal))
          (maps (current-active-maps t))
          (buffer-name "*Keybinding Conflicts*"))
      (dolist (map maps)
        (map-keymap
         (lambda (key cmd)
           (when (commandp cmd)
             (let ((desc (key-description (vector key)))
                   (existing (gethash desc conflicts)))
               (puthash desc (delete-dups (cons cmd existing)) conflicts))))
         map))
      (with-current-buffer (get-buffer-create buffer-name)
        (read-only-mode -1)
        (erase-buffer)
        (insert "* Keybinding Conflicts *\n\n")
        (maphash (lambda (key cmds)
                   (when (> (length cmds) 1)
                     (insert (format "%s => %s\n" key (mapconcat #'symbol-name cmds ", ")))))
                 conflicts)
        (read-only-mode 1))
      (pop-to-buffer buffer-name)))

  (defun my/dired-view-file-other-window ()
    "Open selected Dired file or directory in another window."
    (interactive)
    (let ((file (dired-get-file-for-visit)))
      (if (file-directory-p file)
          (or (and (cdr dired-subdir-alist) (dired-goto-subdir file)) (dired file))
        (view-file-other-window file))))

  (defun my/treesit--call-with-outdir (orig-fn &rest args)
    "Advice ORIG-FN to force OUT-DIR to `my:d:treesit` when omitted."
    (let* ((len (length args))
           (args* (append args (make-list (max 0 (- 7 len)) nil)))
           (out-dir (or (nth 6 args*) my:d:treesit)))
      (setf (nth 6 args*) out-dir)
      (my/ensure-directory-exists out-dir)
      (let ((default-directory my:d:treesit-build))
        (apply orig-fn args*))))

  (defun my/treesit-install (lang)
    "Install a tree-sitter grammar for LANG interactively."
    (interactive
     (list (intern (completing-read "Language: " (mapcar #'car treesit-language-source-alist)))))
    (treesit-install-language-grammar lang))

  (with-eval-after-load 'treesit
    (add-to-list 'treesit-extra-load-path my:d:treesit)
    (advice-add 'treesit-install-language-grammar :around #'my/treesit--call-with-outdir))

  (defun my/open-by-vscode () (interactive)
    (when (buffer-file-name)
      (async-shell-command
       (format "code -r -g %s:%d:%d" (buffer-file-name) (line-number-at-pos) (current-column)))))

  (defun my/show-env-variable (var) (interactive "sEnvironment variable: ")
    (message "%s = %s" var (or (getenv var) "Not set")))

  (defun my/print-build-info () (interactive)
    (let ((buf (get-buffer-create "*Build Info*")))
      (with-current-buffer buf
        (let ((inhibit-read-only t))
          (erase-buffer)
          (insert (format "- GNU Emacs *%s*\n\n" emacs-version))
          (insert "|Property|Value|\n|--------|-----|\n")
          (insert (format "|Commit|%s|\n" (if (fboundp 'emacs-repository-get-version)
                                      (emacs-repository-get-version) "N/A")))
          (insert (format "|Branch|%s|\n" (if (fboundp 'emacs-repository-get-branch)
                              (emacs-repository-get-branch) "N/A")))
          (insert (format "|System|%s|\n" system-configuration))
          (insert (format "|Date|%s|\n" (format-time-string "%Y-%m-%d %T (%Z)" emacs-build-time)))
          (insert (format "|Patch|%s ns-inline.patch|\n" (if (boundp 'mac-ime--cursor-type) "with" "N/A")))
          (insert (format "|Features|%s|\n" system-configuration-features))
          (insert (format "|Options|%s|\n" system-configuration-options)))
        (view-mode 1))
      (switch-to-buffer buf)))

  (with-eval-after-load 'org
    (require 'org-fold)
    (defun my/org-fold-subtree ()   (interactive) (org-fold-subtree t))
    (defun my/org-unfold-subtree () (interactive) (org-show-subtree))
    (defun my/org-toggle-fold () (interactive)
      (save-excursion
        (org-back-to-heading t)
        (if (org-fold-folded-p (point)) (org-show-subtree) (org-fold-subtree t))))
    (define-key org-mode-map (kbd "C-c f") #'my/org-fold-subtree)
    (define-key org-mode-map (kbd "C-c e") #'my/org-unfold-subtree)
    (define-key org-mode-map (kbd "C-c t") #'my/org-toggle-fold))

  (provide 'core/tools)
  ;;; core/tools.el ends here
#+end_src

*** core/utils.el
:PROPERTIES:
:CUSTOM_ID: core-utils
:END:

**Purpose**
Small core utilities and hooks: Org auto-tangle, quick revert, lexical-binding header insertion, and read-only view toggling.

**What it does**
- Auto-tangle: when saving `README.org`, tangle updated src blocks without prompts.
- Convenience: `my/revert-buffer-quick` (no prompts).
- Hygiene: auto-insert `lexical-binding: t` at top of `.el` files saved under `no-littering-var-directory` if missing.
- UX: enable/disable `view-mode` when a buffer flips read-only.

**Notes**
Org tangling is local to `README.org` and respects `org-confirm-babel-evaluate` (temporarily disabled).

#+begin_src emacs-lisp :tangle lisp/core/utils.el
  ;;; core/utils.el --- Core utility helpers -*- lexical-binding: t; -*-
  ;;
  ;; Copyright (c) 2021-2025
  ;; Author: YAMASHITA, Takao
  ;; License: GNU GPL v3 or later
  ;;
  ;; Category: core
  ;;
  ;;; Code:

  (defun my/auto-tangle-updated-src-blocks ()
    "Automatically tangle updated Org source blocks when saving `README.org`."
    (when (and buffer-file-name (string= (file-name-nondirectory buffer-file-name) "README.org"))
      (let ((org-confirm-babel-evaluate nil)) (org-babel-tangle))))

  (add-hook 'org-mode-hook
            (lambda () (add-hook 'after-save-hook #'my/auto-tangle-updated-src-blocks nil 'make-it-local)))

  (defun my/revert-buffer-quick ()
    (interactive) (revert-buffer :ignore-auto :noconfirm))

  (defun my/auto-insert-lexical-binding ()
    "Insert `lexical-binding: t` in Emacs Lisp files under `no-littering-var-directory`."
    (when (and (stringp buffer-file-name)
               (boundp 'no-littering-var-directory)
               (string-prefix-p (expand-file-name no-littering-var-directory) (expand-file-name buffer-file-name))
               (string-match-p "\\.el\\'" buffer-file-name)
               (not (save-excursion (goto-char (point-min))
                                    (re-search-forward "lexical-binding" (line-end-position 5) t))))
      (save-excursion (goto-char (point-min)) (insert ";; -*- lexical-binding: t; -*- \n"))))
  (add-hook 'find-file-hook #'my/auto-insert-lexical-binding)

  (defun my/enable-view-mode-on-read-only ()
    (if buffer-read-only (view-mode 1) (view-mode -1)))
  (add-hook 'read-only-mode-hook #'my/enable-view-mode-on-read-only)

  (provide 'core/utils)
  ;;; core/utils.el ends here
#+end_src

*** core/history.el
:PROPERTIES:
:CUSTOM_ID: core-history
:END:

**Purpose**
Persist session-level history and positions.

**What it does**
- Cursor positions: `save-place-mode`.
- Recent files: `recentf-mode` (file under `.var/`).
- Minibuffer: `savehist-mode` (history file under `.var/`).

**Notes**
Auto-revert is configured in `core/editing.el`. All components use built-ins (`:straight nil`).

#+begin_src emacs-lisp :tangle lisp/core/history.el
  ;;; core/history.el --- Session persistence & autorevert -*- lexical-binding: t; -*-
  ;;
  ;; Copyright (c) 2021-2025
  ;; License: GNU GPL v3 or later
  ;;
  ;; Category: core
  ;;
  ;;; Code:

  (leaf saveplace :straight nil
    :init
    (setq save-place-file (concat no-littering-var-directory "saveplace"))
    (save-place-mode +1))

  (leaf recentf :straight nil
    :init
    (setq recentf-max-saved-items 100
          recentf-save-file (concat no-littering-var-directory "recentf"))
    (recentf-mode +1))

  (leaf savehist
    :straight nil
    :global-minor-mode t
    :config
    (setq savehist-file (concat no-littering-var-directory "history"))
    (my/ensure-directory-exists (file-name-directory savehist-file))
    (add-to-list 'savehist-additional-variables 'my:desktop-ask-on-restore))

  (provide 'core/history)
  ;;; core/history.el ends here
#+end_src

*** core/editing.el
:PROPERTIES:
:CUSTOM_ID: core-editing
:END:

**Purpose**
Modern editing ergonomics, structured Lisp editing, and Dired UX.

**What it does**
- TRAMP: persistent files and autosave live under `.var/`; default method `scp`.
- Saving: `auto-save-visited-mode` every 1s (no `#…#` artifacts).
- Lisp editing: `paredit` in Emacs Lisp (disables `electric-pair-local-mode`).
- Delimiters: `show-paren-mode` with instant highlight; `puni-global-mode` (disabled in minibuffer).
- Discovery/undo: `which-key`, `undo-fu` (+`vundo` tree view).
- Windows: `ace-window` with home-row hints.
- Text: `visual-line-mode` for `text-mode`.
- Dired: `dired-filter`, `dired-subtree` (`i`, `TAB`), and `z` to view in other window.
- Editing helpers: `expand-region`, `aggressive-indent` in `prog-mode`, `delete-selection-mode`.
- Auto-revert: `global-auto-revert-mode` (quiet, 2s interval).
- Transient: state files redirected under `.var/transient/`.

**Notes**
All built-ins are declared `:straight nil`; third-party packages use `:straight t`.

#+begin_src emacs-lisp :tangle lisp/core/editing.el
  ;;; core/editing.el --- Editing helpers & UX aids -*- lexical-binding: t; -*-
  ;;
  ;; Copyright (c) 2021-2025
  ;; License: GNU GPL v3 or later
  ;;
  ;; Category: core
  ;;
  ;;; Code:

  (leaf tramp
    :straight nil
    :pre-setq
    `((tramp-persistency-file-name . ,(concat no-littering-var-directory "tramp"))
      (tramp-auto-save-directory   . ,(concat no-littering-var-directory "tramp-autosave")))
    :custom
    '((tramp-default-method . "scp")
      (tramp-verbose        . 3)))

  (setopt auto-save-visited-interval 1
          auto-save-default        nil)
  (when (fboundp 'auto-save-visited-mode)
    (auto-save-visited-mode 1))

  (leaf paredit :straight t
    :hook (emacs-lisp-mode . (lambda () (enable-paredit-mode) (electric-pair-local-mode -1))))

  (leaf paren :straight nil
    :custom ((show-paren-delay . 0)
             (show-paren-style . 'expression)
             (show-paren-highlight-openparen . t))
    :global-minor-mode show-paren-mode)

  (leaf puni :straight t
    :global-minor-mode puni-global-mode
    :hook ((minibuffer-setup . (lambda () (puni-global-mode -1)))))

  (leaf which-key :straight t :global-minor-mode t
    :custom ((which-key-idle-delay . 0.5)))

  (leaf undo-fu :straight t
    :custom ((undo-fu-allow-undo-in-region . t)))

  (leaf vundo :straight t
    :bind (("C-c u" . vundo)))

  (leaf ace-window :straight t
    :custom ((aw-keys . '(?a ?s ?d ?f ?g ?h ?j ?k ?l))
             (aw-scope . 'frame)
             (aw-background . t))
    :config (ace-window-display-mode 1))

  (leaf visual-line-mode :straight nil
    :hook (text-mode . visual-line-mode))

  (leaf dired-filter :straight t)
  (leaf dired-subtree :straight t :after dired)
  (leaf dired :straight nil
    :bind (:dired-mode-map
           ("i"   . dired-subtree-insert)
           ("TAB" . dired-subtree-toggle)
           ("z"   . my/dired-view-file-other-window)))

  (leaf expand-region :straight t :after treesit)
  (leaf aggressive-indent :straight t :hook (prog-mode . aggressive-indent-mode))
  (leaf delsel :straight nil :global-minor-mode delete-selection-mode)

  (leaf autorevert :straight nil
    :custom ((auto-revert-interval . 2)
             (auto-revert-verbose . nil))
    :global-minor-mode global-auto-revert-mode)

  (leaf transient
    :straight t
    :config
    (setq transient-history-file (concat no-littering-var-directory "transient/history.el")
          transient-levels-file  (concat no-littering-var-directory "transient/levels.el")
          transient-values-file  (concat no-littering-var-directory "transient/values.el"))
    (my/ensure-directory-exists (concat no-littering-var-directory "transient/")))

  (provide 'core/editing)
  ;;; core/editing.el ends here
#+end_src

*** core/switches.el
:PROPERTIES:
:CUSTOM_ID: core-switches
:END:

**Purpose**
Unified toggles for UI bundles and LSP client selection via two options: `my:use-ui` (`none`/`doom`/`nano`) and `my:use-lsp` (`eglot`/`lsp`).

**What it does**
- Autoloaded entry points to enable Doom or Nano modeline bundles.
- LSP backends: enable Eglot or lsp-mode (`lsp-ui`), with presence checks (`fboundp`/`locate-library`).
- Messages clarify success, partial presence, or absence.
- Migration: `my:use:modules` → `my:use-ui` (obsolete alias provided).

**Notes**
Set per-machine choices in `personal/<user>.el`.

#+begin_src emacs-lisp :tangle lisp/core/switches.el
  ;;; core/switches.el --- Unified feature switches (UI/LSP) -*- lexical-binding: t; -*-
  ;;
  ;; Copyright (c) 2021-2025
  ;; Author: YAMASHITA, Takao
  ;; License: GNU GPL v3 or later
  ;;
  ;; Category: core
  ;;
  ;;; Commentary:
  ;; Switcher for UI bundles (doom/nano) and LSP backends (eglot/lsp).
  ;;
  ;;; Code:

  (eval-when-compile (require 'subr-x))

  (when (boundp 'my:use:modules)
    (when (or (not (boundp 'my:use-ui)) (eq my:use-ui 'none))
      (setq my:use-ui my:use:modules)))
  (define-obsolete-variable-alias 'my:use:modules 'my:use-ui "2025-10-11")

  (defgroup my:switches nil "Unified switches for UI and LSP." :group 'convenience)

  (defcustom my:use-lsp 'eglot
    "Which LSP client to use. One of: `eglot`, `lsp`."
    :type '(choice (const eglot) (const lsp))
    :group 'my:switches)

  (defcustom my:use-ui 'none
    "Which UI bundle to use. One of: `none`, `doom`, `nano`."
    :type '(choice (const none) (const doom) (const nano))
    :group 'my:switches)

  (autoload 'my/ui-enable-doom  "ui/ui-doom-modeline" "Enable Doom UI bundle." t)
  (autoload 'my/ui-enable-nano  "ui/ui-nano-modeline" "Enable Nano UI bundle." t)
  (autoload 'my/lsp-enable-eglot   "dev/dev-lsp-eglot" "Enable Eglot LSP." t)
  (autoload 'my/lsp-enable-lspmode "dev/dev-lsp-mode"  "Enable lsp-mode LSP." t)

  (defun my/sw--present-p (kind choice)
    (pcase kind
      ('ui (pcase choice
             ('doom (or (fboundp 'my/ui-enable-doom)
                        (locate-library "ui/ui-doom-modeline")
                        (locate-library "doom-modeline")))
             ('nano (or (fboundp 'my/ui-enable-nano)
                        (locate-library "ui/ui-nano-modeline")
                        (locate-library "nano-modeline")))
             (_ t)))
      ('lsp (pcase choice
              ('eglot (or (fboundp 'my/lsp-enable-eglot)
                          (locate-library "dev/dev-lsp-eglot")
                          (locate-library "eglot")))
              ('lsp   (or (fboundp 'my/lsp-enable-lspmode)
                          (locate-library "dev/dev-lsp-mode")
                          (locate-library "lsp-mode")))
              (_ nil)))
      (_ nil)))

  (defun my/sw--enable-ui (choice)
    (pcase choice
      ('doom (cond
              ((fboundp 'my/ui-enable-doom) (my/ui-enable-doom) t)
              ((locate-library "ui/ui-doom-modeline")
               (load (locate-library "ui/ui-doom-modeline") nil 'nomessage)
               (when (fboundp 'my/ui-enable-doom) (my/ui-enable-doom) t))
              (t (message "[switches] Doom UI not found.") nil)))
      ('nano (cond
              ((fboundp 'my/ui-enable-nano) (my/ui-enable-nano) t)
              ((locate-library "ui/ui-nano-modeline")
               (load (locate-library "ui/ui-nano-modeline") nil 'nomessage)
               (when (fboundp 'my/ui-enable-nano) (my/ui-enable-nano) t))
              (t (message "[switches] Nano UI not found.") nil)))
      ('none (message "[switches] UI bundle disabled.") t)
      (_ (message "[switches] Unknown UI choice: %s" choice) nil)))

  (defun my/sw--enable-lsp (choice)
    (pcase choice
      ('eglot (cond
               ((fboundp 'my/lsp-enable-eglot) (my/lsp-enable-eglot) t)
               ((locate-library "dev/dev-lsp-eglot")
                (load (locate-library "dev/dev-lsp-eglot") nil 'nomessage)
                (when (fboundp 'my/lsp-enable-eglot) (my/lsp-enable-eglot) t))
               (t (message "[switches] Eglot setup not found.") nil)))
      ('lsp (cond
             ((fboundp 'my/lsp-enable-lspmode) (my/lsp-enable-lspmode) t)
             ((locate-library "dev/dev-lsp-mode")
              (load (locate-library "dev/dev-lsp-mode") nil 'nomessage)
              (when (fboundp 'my/lsp-enable-lspmode) (my/lsp-enable-lspmode) t))
             (t (message "[switches] lsp-mode setup not found.") nil)))
      (_ (message "[switches] Unknown LSP choice: %s" choice) nil)))

  (when (not (eq my:use-ui 'none))
    (let ((present (my/sw--present-p 'ui my:use-ui)))
      (cond
       ((my/sw--enable-ui my:use-ui) (message "[switches] UI bundle: %s" my:use-ui))
       (present (message "[switches] UI seems present but could not enable: %s" my:use-ui))
       (t (message "[switches] UI bundle unavailable: %s" my:use-ui)))))

  (let ((present (my/sw--present-p 'lsp my:use-lsp)))
    (cond
     ((my/sw--enable-lsp my:use-lsp) (message "[switches] LSP backend: %s" my:use-lsp))
     (present (message "[switches] LSP seems present but could not enable: %s" my:use-lsp))
     (t (message "[switches] LSP backend unavailable: %s" my:use-lsp))))

  (provide 'core/switches)
  ;;; core/switches.el ends here
#+end_src

*** core/custom.el
:PROPERTIES:
:CUSTOM_ID: custom-file
:END:

**Purpose**
Route Customize output to `.etc/custom.el` and provide commands to view or snapshot selected runtime settings/faces.

**What it does**
- Ensures `custom-file` at `.etc/custom.el`, creates with header if missing, and loads it if readable.
- `my/custom-open`: opens the custom file.
- `my/custom-dump-current`: saves a curated set of variables and faces, then runs `custom-save-all`.

**Notes**
This does not auto-run at startup; snapshots are deliberate. `leaf :custom` runtime values are not implicitly persisted.

#+begin_src emacs-lisp :tangle lisp/core/custom.el
;;; core/custom.el --- custom-file helpers -*- lexical-binding: t; -*-
;;
;; Category: core
;;
;;; Commentary:
;; - Route customize output to .etc/custom.el
;; - Provide helpers to open and (optionally) dump current values/faces.

(eval-when-compile (require 'subr-x))

(defconst my:f:custom
  (or (bound-and-true-p my:f:custom)
      (expand-file-name "custom.el" (or (bound-and-true-p my:d:etc)
                                        (expand-file-name ".etc/" user-emacs-directory))))
  "Path to the custom-file (Customize output).")

(defun my/custom--ensure-file ()
  "Ensure `custom-file` exists and has a small header."
  (let* ((dir (file-name-directory my:f:custom)))
    (unless (file-directory-p dir)
      (condition-case err
          (make-directory dir t)
        (error (warn "[custom] failed to create %s: %s" dir (error-message-string err)))))
    (unless (file-exists-p my:f:custom)
      (with-temp-file my:f:custom
        (insert ";;; custom.el --- Customize output -*- lexical-binding: t; -*-\n"
                ";; This file is generated by Customize. Edit with care.\n\n")))))

;; 1) Route Customize output to .etc/custom.el (idempotent)
(setq custom-file my:f:custom)
(my/custom--ensure-file)
(when (file-readable-p custom-file)
  (ignore-errors (load custom-file nil 'nomessage)))

;;;###autoload
(defun my/custom-open ()
  "Open the `custom-file`."
  (interactive)
  (my/custom--ensure-file)
  (find-file my:f:custom))

;;;###autoload
(defun my/custom-dump-current ()
  "Persist a curated set of current settings/faces into `custom-file`.
This is a one-shot snapshot; it won't run automatically."
  (interactive)
  (my/custom--ensure-file)

  ;; ---- Variables you want to persist (add/remove as you like) ----
  (dolist (pair
           `(
             ;; Core UI
             (inhibit-startup-screen             . ,inhibit-startup-screen)
             (frame-resize-pixelwise             . ,(bound-and-true-p frame-resize-pixelwise))
             (display-line-numbers-type          . ,(and (boundp 'display-line-numbers-type) display-line-numbers-type))
             ;; Completion
             (completion-styles                  . ,(and (boundp 'completion-styles) completion-styles))
             (completion-category-overrides      . ,(and (boundp 'completion-category-overrides) completion-category-overrides))
             ;; Org (selected)
             (org-startup-indented               . ,(and (boundp 'org-startup-indented) org-startup-indented))
             (org-hide-leading-stars             . ,(and (boundp 'org-hide-leading-stars) org-hide-leading-stars))
             (org-tags-column                    . ,(and (boundp 'org-tags-column) org-tags-column))
             (org-agenda-tags-column             . ,(and (boundp 'org-agenda-tags-column) org-agenda-tags-column))
             ;; org-modern (selected)
             (org-modern-list                    . ,(and (boundp 'org-modern-list) org-modern-list))
             (org-modern-checkbox                . ,(and (boundp 'org-modern-checkbox) org-modern-checkbox))
             (org-modern-priority                . ,(and (boundp 'org-modern-priority) org-modern-priority))
             (org-modern-replace-stars           . ,(and (boundp 'org-modern-replace-stars) org-modern-replace-stars))
             (org-modern-todo-faces              . ,(and (boundp 'org-modern-todo-faces) org-modern-todo-faces))
             ))
    ;; Only save bound values; skip nil/unbound
    (when (car (last pair))
      (customize-save-variable (car pair) (cdr pair))))

  ;; ---- Faces you want to persist (add/remove as you like) ----
  (let ((faces
         '(
           (org-modern-date-active   ((t (:background "#373844" :foreground "#f8f8f2" :height 0.75 :weight light :width condensed))))
           (org-modern-time-active   ((t (:background "#44475a" :foreground "#f8f8f2" :height 0.75 :weight light :width condensed))))
           (org-modern-date-inactive ((t (:background "#373844" :foreground "#b0b8d1" :height 0.75 :weight light :width condensed))))
           (org-modern-time-inactive ((t (:background "#44475a" :foreground "#b0b8d1" :height 0.75 :weight light :width condensed))))
           (org-modern-tag           ((t (:background "#44475a" :foreground "#b0b8d1" :height 0.75 :weight light :width condensed))))
           (org-modern-statistics    ((t (:foreground "violet" :weight light))))
           )))
    (dolist (f faces)
      (let ((face (nth 0 f)) (spec (nth 1 f)))
        (custom-set-faces `(,face ,spec)))))
  ;; Actually write
  (custom-save-all)
  (message "[custom] Wrote current snapshot to %s" my:f:custom))

(provide 'core/custom)
;;; core/custom.el ends here
#+end_src

**** Wiring
- If your *early-init.el* / *init.el* already points `custom-file` to `.etc/custom.el`, you’re good.
- Ensure `core/custom` is in the module list (e.g. `lisp/modules.el` → add `core/custom` to `my:modules`).

**** Usage
- `M-x my/custom-open` — open `.etc/custom.el`
- `M-x my/custom-dump-current` — write a one-time snapshot of selected settings/faces to `.etc/custom.el` (it does **not** run at startup)

*** ui/ui-font.el
:PROPERTIES:
:CUSTOM_ID: ui-font
:END:

**Purpose**
Apply fonts for default/variable/emoji faces and enable ligatures for programming modes.

**What it does**
- Picks OS-appropriate defaults unless `my:font-*` overrides are set.
- Reports applied fonts to the echo area.
- Daemon-safe application on new frames.
- Ligatures: enables a small, portable set in `prog-mode`.

**Notes**
GUI-only; harmless when run headless.

#+begin_src emacs-lisp :tangle lisp/ui/ui-font.el
  ;;; ui/ui-font.el --- Font configuration -*- lexical-binding: t; -*-
  ;;
  ;; Copyright (c) 2021-2025
  ;; License: GNU GPL v3 or later
  ;;
  ;; Category: ui
  ;;
  ;;; Code:

  (defun my/system-default-font ()
    "Return a default monospace font family depending on OS."
    (cond ((eq system-type 'darwin) "Menlo")
          ((eq system-type 'gnu/linux) "Monospace")
          ((eq system-type 'windows-nt) "Consolas")
          (t "Monospace")))

  (defun my/system-emoji-font ()
    "Return a default emoji font family depending on OS."
    (cond ((eq system-type 'darwin) "Apple Color Emoji")
          ((eq system-type 'gnu/linux) "Noto Color Emoji")
          ((eq system-type 'windows-nt) "Segoe UI Emoji")
          (t "Noto Color Emoji")))

  (defun my/font-setup ()
    "Apply font settings, respecting overrides, and report applied fonts."
    (when (display-graphic-p)
      (set-face-attribute 'default nil
                          :family (or my:font-default (my/system-default-font))
                          :height (* 10 (or my:font-size 16)))
      (message "[font] default: %s, %.1f pt"
               (face-attribute 'default :family)
               (/ (float (face-attribute 'default :height)) 16))

      (set-face-attribute 'variable-pitch nil
                          :family (or my:font-alt (my/system-default-font)))
      (message "[font] variable-pitch: %s"
               (face-attribute 'variable-pitch :family))

      (set-fontset-font t 'emoji
                        (font-spec :family (or my:emoji-font (my/system-emoji-font))))
      (message "[font] emoji: %s"
               (or my:emoji-font (my/system-emoji-font)))))

  (defun my/show-current-font ()
    "Echo the current default font family and point size."
    (interactive)
    (let* ((family (face-attribute 'default :family))
           (height (face-attribute 'default :height))
           (pt (/ height 10.0)))
      (message "Current font: %s, %.1f pt" family pt)))

  (if (daemonp)
      (add-hook 'after-make-frame-functions
                (lambda (frame) (with-selected-frame frame (my/font-setup))))
    (add-hook 'after-init-hook #'my/font-setup))

  (leaf ligature :straight t
    :config
    (ligature-set-ligatures 'prog-mode '("->" "=>" "::" "===" "!=" "&&" "||"))
    (global-ligature-mode 1))

  (provide 'ui/ui-font)
  ;;; ui/ui-font.el ends here
#+end_src

*** ui/ui-theme.el
:PROPERTIES:
:CUSTOM_ID: ui-theme
:END:

**Purpose**
Theme and spacing with safe face normalization.

**What it does**
- Themes: `ef-themes` (defaults to `ef-frost` in GUI, `deeper-blue` in TTY); toggle pair kept via `modus-themes-to-toggle`.
- Padding: `spacious-padding` with wider left/right gutters in GUI.
- Face normalization: converts problematic `nil` face attributes to `'unspecified`; runs on theme enable and at startup.

**Notes**
Prevents “nil value is invalid; use ‘unspecified’” warnings in Emacs 30+.

#+begin_src emacs-lisp :tangle lisp/ui/ui-theme.el
  ;;; ui/ui-theme.el --- Theme configuration -*- lexical-binding: t; -*-
  ;;
  ;; Copyright (c) 2021-2025
  ;; License: GNU GPL v3 or later
  ;;
  ;; Category: ui
  ;;
  ;; Commentary:
  ;; ef-themes + spacious-padding with a face normalizer for Emacs 30+.
  ;;
  ;;; Code:

  (leaf ef-themes :straight t
    :custom ((modus-themes-to-toggle . '(ef-frost ef-spring)))
    :config
    (unless custom-enabled-themes
      (load-theme (if (display-graphic-p) 'ef-frost 'deeper-blue) t)))

  (leaf spacious-padding :straight t
    :if (display-graphic-p)
    :custom ((spacious-padding-widths . '((left . 15) (right . 15)))
             (spacious-padding-subtle-mode-line . t))
    :config (spacious-padding-mode 1))

  (defgroup ui-theme-normalize nil
    "Normalize face attributes set to nil."
    :group 'faces)

  (defcustom ui:normalize-face-attrs
    '((font-lock-doc-markup-face :foreground))
    "List of (FACE ATTR ...) pairs to ensure are not nil."
    :type '(repeat (cons symbol (repeat symbol)))
    :group 'ui-theme-normalize)

  (defun ui--normalize-face-attr (face attr)
    "If FACE's ATTR is nil, set it to \\='unspecified."
    (when (facep face)
      (let ((val (face-attribute face attr nil 'default)))
        (when (null val)
          (set-face-attribute face nil attr 'unspecified)))))

  (defun ui--normalize-faces ()
    "Normalize all faces declared in `ui:normalize-face-attrs`."
    (dolist (entry ui:normalize-face-attrs)
      (let ((face (car entry)) (attrs (cdr entry)))
        (dolist (attr attrs)
          (ui--normalize-face-attr face attr)))))

  (add-hook 'enable-theme-functions (lambda (_theme) (ui--normalize-faces)))
  (add-hook 'emacs-startup-hook #'ui--normalize-faces)

  (provide 'ui/ui-theme)
  ;;; ui/ui-theme.el ends here
#+end_src

*** ui/ui-doom-modeline.el
:PROPERTIES:
:CUSTOM_ID: ui-doom-modeline
:END:

**Purpose**
Compact modeline via `doom-modeline` with `nerd-icons`.

**What it does**
- Reasonable defaults for height, filename style, and word count.
- Autoloaded `my/ui-enable-doom` to turn it on.

**Notes**
Theme-agnostic; only the modeline is affected.

#+begin_src emacs-lisp :tangle lisp/ui/ui-doom-modeline.el
  ;;; ui-doom-modeline.el --- Doom UI bundle entry -*- lexical-binding: t; -*-
  ;;
  ;; Copyright (c) 2021-2025
  ;; Author: YAMASHITA, Takao
  ;; License: GNU GPL v3 or later
  ;;
  ;; Category: ui
  ;;
  ;;; Commentary:
  ;; Enable doom-modeline (with nerd-icons) as a compact UI bundle.
  ;;
  ;;; Code:

  (eval-when-compile (require 'leaf))
  (declare-function doom-modeline-mode "doom-modeline")

  (leaf nerd-icons :straight t)

  (leaf doom-modeline
    :straight t
    :custom ((doom-modeline-height . 28)
             (doom-modeline-buffer-file-name-style . 'truncate-with-project)
             (doom-modeline-minor-modes . nil)
             (doom-modeline-enable-word-count . t))
    :config
    (doom-modeline-mode 1))

  ;;;###autoload
  (defun my/ui-enable-doom ()
    "Enable Doom UI modeline bundle."
    (interactive)
    (unless (bound-and-true-p doom-modeline-mode)
      (doom-modeline-mode 1))
    (message "[ui] Doom modeline enabled."))

  (provide 'ui/ui-doom-modeline)
  ;;; ui/ui-doom-modeline.el ends here
#+end_src

*** ui/ui-nano-modeline.el
:PROPERTIES:
:CUSTOM_ID: ui-nano-modeline
:END:

**Purpose**
Minimal modeline via `nano-modeline`, with guarded, idempotent setup.

**What it does**
- Autoloaded `my/ui-enable-nano` to initialize mode-specific hooks once.
- Installs hooks for common modes (prog/text/org/pdf/mu4e/elfeed/term/xwidget/etc.).
- Tolerates absence at build time; enables automatically once available.

**Notes**
Safe to enable multiple times; does nothing if already initialized.

#+begin_src emacs-lisp :tangle lisp/ui/ui-nano-modeline.el
  ;;; ui-nano-modeline.el --- Nano UI bundle entry -*- lexical-binding: t; -*-
  ;;
  ;; Category: ui
  ;;
  ;;; Commentary:
  ;; Robust loader that tries to require `nano-modeline` and wires all mode hooks.
  ;; Safe even if the package is not available at build time.
  ;;
  ;;; Code:

  (eval-when-compile (require 'leaf))

  (declare-function nano-modeline-mode              "nano-modeline")
  (declare-function nano-modeline-prog-mode         "nano-modeline")
  (declare-function nano-modeline-text-mode         "nano-modeline")
  (declare-function nano-modeline-org-mode          "nano-modeline")
  (declare-function nano-modeline-pdf-mode          "nano-modeline")
  (declare-function nano-modeline-mu4e-headers-mode "nano-modeline")
  (declare-function nano-modeline-mu4e-message-mode "nano-modeline")
  (declare-function nano-modeline-elfeed-entry-mode "nano-modeline")
  (declare-function nano-modeline-elfeed-search-mode "nano-modeline")
  (declare-function nano-modeline-term-mode         "nano-modeline")
  (declare-function nano-modeline-xwidget-mode      "nano-modeline")
  (declare-function nano-modeline-message-mode      "nano-modeline")
  (declare-function nano-modeline-org-capture-mode  "nano-modeline")
  (declare-function nano-modeline-org-agenda-mode   "nano-modeline")

  (defvar ui--nano-modeline-initialized nil
    "Non-nil once nano-modeline hooks have been installed.")

  (defun my/ui--nano-available-p ()
    "Return non-nil if `nano-modeline` can be required."
    (require 'nano-modeline nil 'noerror))

  (defun my/ui--nano-setup ()
    "Install nano-modeline hooks once (idempotent)."
    (when (and (not ui--nano-modeline-initialized)
               (my/ui--nano-available-p))
      (setopt nano-modeline-padding '(0.20 . 0.25))

      (when (fboundp 'nano-modeline-text-mode)
        (nano-modeline-text-mode t))

      (when (fboundp 'nano-modeline-prog-mode)
        (add-hook 'prog-mode-hook            #'nano-modeline-prog-mode))
      (when (fboundp 'nano-modeline-text-mode)
        (add-hook 'text-mode-hook            #'nano-modeline-text-mode))
      (when (fboundp 'nano-modeline-org-mode)
        (add-hook 'org-mode-hook             #'nano-modeline-org-mode))
      (when (fboundp 'nano-modeline-pdf-mode)
        (add-hook 'pdf-view-mode-hook        #'nano-modeline-pdf-mode))
      (when (fboundp 'nano-modeline-mu4e-headers-mode)
        (add-hook 'mu4e-headers-mode-hook    #'nano-modeline-mu4e-headers-mode))
      (when (fboundp 'nano-modeline-mu4e-message-mode)
        (add-hook 'mu4e-view-mode-hook       #'nano-modeline-mu4e-message-mode))
      (when (fboundp 'nano-modeline-elfeed-entry-mode)
        (add-hook 'elfeed-show-mode-hook     #'nano-modeline-elfeed-entry-mode))
      (when (fboundp 'nano-modeline-elfeed-search-mode)
        (add-hook 'elfeed-search-mode-hook   #'nano-modeline-elfeed-search-mode))
      (when (fboundp 'nano-modeline-term-mode)
        (add-hook 'term-mode-hook            #'nano-modeline-term-mode))
      (when (fboundp 'nano-modeline-xwidget-mode)
        (add-hook 'xwidget-webkit-mode-hook  #'nano-modeline-xwidget-mode))
      (when (fboundp 'nano-modeline-message-mode)
        (add-hook 'messages-buffer-mode-hook #'nano-modeline-message-mode))
      (when (fboundp 'nano-modeline-org-capture-mode)
        (add-hook 'org-capture-mode-hook     #'nano-modeline-org-capture-mode))
      (when (fboundp 'nano-modeline-org-agenda-mode)
        (add-hook 'org-agenda-mode-hook      #'nano-modeline-org-agenda-mode))

      (setq ui--nano-modeline-initialized t)
      (message "[ui] nano-modeline initialized.")))

  (leaf nano-modeline
    :straight (nano-modeline :type git :host github :repo "rougier/nano-modeline")
    :require nil
    :init
    (add-hook 'after-init-hook #'my/ui--nano-setup))

  ;;;###autoload
  (defun my/ui-enable-nano ()
    "Enable Nano UI modeline bundle (guarded)."
    (interactive)
    (if (my/ui--nano-available-p)
        (progn
          (my/ui--nano-setup)
          (message "[ui] nano-modeline enabled."))
      (message "[ui] nano-modeline not available; will enable after it is installed.")))

  (provide 'ui/ui-nano-modeline)
  ;;; ui/ui-nano-modeline.el ends here
#+end_src

*** ui/ui-window.el
:PROPERTIES:
:CUSTOM_ID: ui-window
:END:

**Purpose**
Window/layout ergonomics, session save/restore, and zoom.

**What it does**
- `zoom-mode` with consistent pane size (ignores Dired/Treemacs).
- `desktop-save-mode` under `.var/desktop/` with eager restore.
- `winner-mode` with `M-[`/`M-]` to undo/redo window changes.
- Manual layout save/restore helpers.

**Notes**
Desktop directory is created defensively under `.var/`.

#+begin_src emacs-lisp :tangle lisp/ui/ui-window.el
  ;;; ui/ui-window.el --- Window management -*- lexical-binding: t; -*-
  ;;
  ;; Copyright (c) 2021-2025
  ;; License: GNU GPL v3 or later
  ;;
  ;; Category: ui
  ;;
  ;;; Code:

  (leaf zoom :straight t
    :hook (after-init-hook . zoom-mode)
    :custom ((zoom-size . '(0.62 . 0.62))
             (zoom-ignored-major-modes . '(dired-mode treemacs-mode))
             (zoom-ignored-buffer-names . '("*Messages*" "*Help*"))))

  (leaf desktop
    :straight nil
    :config
    (let* ((dir (concat no-littering-var-directory "desktop/")))
      (setq desktop-dirname            dir
            desktop-path               (list dir)
            desktop-base-file-name     "desktop"
            desktop-base-lock-name     "lock"
            desktop-restore-eager      10
            desktop-save               t
            desktop-load-locked-desktop nil
            desktop-auto-save-timeout  300)
      (my/ensure-directory-exists dir)
      (desktop-save-mode 1)))

  (leaf winner
    :straight nil
    :global-minor-mode t
    :bind (("M-[" . winner-undo)
           ("M-]" . winner-redo)))

  (defvar my:saved-window-config nil)

  (defun my/save-window-layout () (interactive)
    (setq my:saved-window-config (window-state-get nil t))
    (message "Window configuration saved."))

  (defun my/restore-window-layout () (interactive)
    (if my:saved-window-config
        (window-state-put my:saved-window-config)
      (message "No saved window configuration found.")))

  (provide 'ui/ui-window)
  ;;; ui/ui-window.el ends here
#+end_src

*** ui/ui-utils.el
:PROPERTIES:
:CUSTOM_ID: ui-utils
:END:

**Purpose**
Status indicators, sidebar explorer, and macOS clipboard plumbing.

**What it does**
- Mode-line: `minions` lighter and auto-activation.
- Indicators: time (24h, date) and battery.
- Sidebar: `treemacs` (GUI only) with filewatch/follow.
- Icons: `nerd-icons-dired` in Dired.
- Clipboard: `pbcopy` on macOS.

**Notes**
Treemacs settings avoid noise and keep indentation small.

#+begin_src emacs-lisp :tangle lisp/ui/ui-utils.el
  ;;; ui/ui-utils.el --- Treemacs configuration & UI utils -*- lexical-binding: t; -*-
  ;;
  ;; Copyright (c) 2021-2025
  ;; License: GNU GPL v3 or later
  ;;
  ;; Category: ui
  ;;
  ;;; Code:

  (leaf minions :straight t
    :custom ((minions-mode-line-lighter . "⚙"))
    :hook (after-init-hook . minions-mode))

  (setq display-time-interval 30
        display-time-day-and-date t
        display-time-24hr-format t)
  (display-time-mode 1)
  (when (fboundp 'display-battery-mode) (display-battery-mode 1))

  (leaf treemacs :straight t
    :if (display-graphic-p)
    :custom ((treemacs-filewatch-mode . t)
             (treemacs-follow-mode . t)
             (treemacs-indentation . 2)
             (treemacs-missing-project-action . 'remove)))

  (leaf nerd-icons-dired :straight t
    :hook (dired-mode . nerd-icons-dired-mode))

  (leaf pbcopy
    :if (memq window-system '(mac ns))
    :straight t
    :config (turn-on-pbcopy))

  (provide 'ui/ui-utils)
  ;;; ui/ui-utils.el ends here
#+end_src

*** completion/completion-core.el
:PROPERTIES:
:CUSTOM_ID: completion-core
:END:

**Purpose**
Global completion style policy.

**What it does**
- Uses `orderless` (with `basic` fallback) globally.
- Category overrides: files → `partial-completion`; symbols/commands → `orderless`.

**Notes**
Keeps defaults minimal and predictable.

#+begin_src emacs-lisp :tangle lisp/completion/completion-core.el
  ;;; completion-core.el --- Completion core settings -*- lexical-binding: t; -*-
  ;;
  ;; Category: completion
  ;;
  (eval-when-compile (require 'leaf))

  (leaf orderless
    :straight t
    :custom
    ((completion-styles . '(orderless basic))
     (completion-category-overrides
      . '((file (styles . (partial-completion)))
          (symbol (styles . (orderless)))
          (command (styles . (orderless)))))))

  (provide 'completion/completion-core)
#+end_src

*** completion/completion-vertico.el
:PROPERTIES:
:CUSTOM_ID: completion-vertico
:END:

**Purpose**
Minibuffer completion UI.

**What it does**
- `vertico-mode` with 15-item list.
- `vertico-posframe` in GUI with a thin border.
- `marginalia` annotations.

**Notes**
TTY remains inline; GUI gets a floating minibuffer list.

#+begin_src emacs-lisp :tangle lisp/completion/completion-vertico.el
  ;;; completion-vertico.el --- Vertico minibuffer UI -*- lexical-binding: t; -*-
  ;;
  ;; Category: completion
  ;;
  (eval-when-compile (require 'leaf))

  (leaf vertico :straight t
    :global-minor-mode vertico-mode
    :custom ((vertico-count . 15)))

  (leaf vertico-posframe :straight t
    :if (display-graphic-p)
    :after vertico
    :custom ((vertico-posframe-border-width . 2))
    :config (vertico-posframe-mode 1))

  (leaf marginalia :straight t
    :global-minor-mode marginalia-mode)

  (provide 'completion/completion-vertico)
#+end_src

*** completion/completion-consult.el
:PROPERTIES:
:CUSTOM_ID: completion-consult
:END:

**Purpose**
Search and xref integration.

**What it does**
- Installs `consult`.
- Sets both xref providers to `consult-xref`.

**Notes**
Pairs naturally with ripgrep helpers and Vertico.

#+begin_src emacs-lisp :tangle lisp/completion/completion-consult.el
  ;;; completion-consult.el --- Consult search/navigation -*- lexical-binding: t; -*-
  ;;
  ;; Category: completion
  ;;
  (eval-when-compile (require 'leaf))

  (leaf consult :straight t
    :custom
    ((xref-show-xrefs-function . #'consult-xref)
     (xref-show-definitions-function . #'consult-xref)))

  (provide 'completion/completion-consult)
#+end_src

*** completion/completion-embark.el
:PROPERTIES:
:CUSTOM_ID: completion-embark
:END:

**Purpose**
Contextual actions from minibuffer and collect views.

**What it does**
- `embark` with prefix help.
- `embark-consult`: enables `consult-preview-at-point` in collect buffers.

**Notes**
Complements `orderless`/`vertico` nicely.

#+begin_src emacs-lisp :tangle lisp/completion/completion-embark.el
  ;;; completion-embark.el --- Embark actions -*- lexical-binding: t; -*-
  ;;
  ;; Category: completion
  ;;
  (eval-when-compile (require 'leaf))

  (leaf embark :straight t
    :custom ((prefix-help-command . #'embark-prefix-help-command)))

  (leaf embark-consult :straight t
    :after (embark consult)
    :hook (embark-collect-mode . consult-preview-at-point-mode))

  (provide 'completion/completion-embark)
#+end_src

*** completion/completion-corfu.el
:PROPERTIES:
:CUSTOM_ID: completion-corfu
:END:

**Purpose**
In-buffer completion UI and sources.

**What it does**
- `global-corfu-mode` with auto popup and cycling.
- Keymap tweaks for `TAB`/`S-TAB` and `RET`.
- Icons: `kind-icon` in Corfu margin.
- Sources: CAPE (`file`, `dabbrev`, `keyword`) appended to `completion-at-point-functions`.

**Notes**
`tab-always-indent` is set to `complete` for smoother TAB behavior.

#+begin_src emacs-lisp :tangle lisp/completion/completion-corfu.el
  ;;; completion/completion-corfu.el --- Corfu popup completion module -*- lexical-binding: t; -*-
  ;;
  ;; Copyright (c) 2021-2025
  ;; Author: YAMASHITA, Takao
  ;; License: GNU GPL v3 or later
  ;;
  ;; Category: completion
  ;;
  ;;; Commentary:
  ;; Corfu-based in-buffer completion with sensible defaults.
  ;;
  ;;; Code:

  (eval-when-compile (require 'leaf))

  (leaf corfu :straight t
    :init
    (setq tab-always-indent 'complete)
    (global-corfu-mode)
    :custom ((corfu-auto . t)
             (corfu-cycle . t))
    :bind (:corfu-map
           ("TAB"     . corfu-next)
           ([tab]     . corfu-next)
           ("S-TAB"   . corfu-previous)
           ([backtab] . corfu-previous)
           ("RET"     . corfu-insert)))

  (leaf kind-icon :straight t
    :after corfu
    :custom ((kind-icon-default-face . 'corfu-default))
    :config (add-to-list 'corfu-margin-formatters #'kind-icon-margin-formatter))

  (leaf cape :straight t
    :init
    (mapc (lambda (fn) (add-to-list 'completion-at-point-functions fn))
          '(cape-file cape-dabbrev cape-keyword)))

  (provide 'completion/completion-corfu)
  ;;; completion/completion-corfu.el ends here
#+end_src

*** completion/completion-icons.el
:PROPERTIES:
:CUSTOM_ID: completion-corfu
:END:

**Purpose**
In-buffer completion UI and sources.

**What it does**
- `global-corfu-mode` with auto popup and cycling.
- Keymap tweaks for `TAB`/`S-TAB` and `RET`.
- Icons: `kind-icon` in Corfu margin.
- Sources: CAPE (`file`, `dabbrev`, `keyword`) appended to `completion-at-point-functions`.

**Notes**
`tab-always-indent` is set to `complete` for smoother TAB behavior.

#+begin_src emacs-lisp :tangle lisp/completion/completion-icons.el
  ;;; completion-icons.el --- Nerd icons for completion -*- lexical-binding: t; -*-
  ;;
  ;; Category: completion
  ;;
  (eval-when-compile (require 'leaf))

  (leaf nerd-icons-ibuffer :straight t
    :hook (ibuffer-mode-hook . nerd-icons-ibuffer-mode))

  (leaf nerd-icons-completion :straight t
    :hook (marginalia-mode-hook . nerd-icons-completion-marginalia-setup)
    :config (nerd-icons-completion-mode))

  (provide 'completion/completion-icons)
#+end_src

*** orgx/org-core.el
:PROPERTIES:
:CUSTOM_ID: orgx-core
:END:

**Purpose**
Foundational Org configuration: directories, agenda, TODO workflow, refile targets, and capture templates.

**What it does**
- Paths: creates `org/`, `journal/`, `org-roam/`, and `pictures/` under `.var/`.
- Agenda files: recursive discovery under `org-directory` (excludes `archives`).
- Workflow: `TODO → SOMEDAY/WAITING → DONE/CANCELED` (time-log on done).
- Refile: to current buffer (limited levels), agenda files, or local headings.
- Capture: inbox todos, notes, journal entries, and meeting notes.
- Archive: central `archive.org` file (whole-file target).

**Notes**
`org-journal` integration is used by the `j` capture template.

#+begin_src emacs-lisp :tangle lisp/orgx/org-core.el
  ;;; orgx/org-core.el --- Org Mode core configuration -*- lexical-binding: t; -*-
  ;;
  ;; Copyright (c) 2021-2025
  ;; License: GNU GPL v3 or later
  ;;
  ;; Category: org
  ;;
  ;;; Code:

  (eval-when-compile
    (require 'leaf)
    (require 'cl-lib))

  (defvar my:d:org (expand-file-name "org/" my:d:var))
  (defvar my:d:org-journal (expand-file-name "journal" my:d:org))
  (defvar my:d:org-roam (expand-file-name "org-roam" my:d:org))
  (defvar my:d:org-pictures (expand-file-name "pictures" my:d:org))
  (defvar my:f:capture-blog-file (expand-file-name "blog.org" my:d:org))

  (my/ensure-directory-exists my:d:org)
  (my/ensure-directory-exists my:d:org-journal)
  (my/ensure-directory-exists my:d:org-roam)
  (my/ensure-directory-exists my:d:org-pictures)

  (defun my/org-buffer-files ()
    "Return a list of *.org files currently visited in live buffers."
    (cl-loop for buf in (buffer-list)
             for file = (buffer-file-name buf)
             when (and file (string-match-p "\\.org\\'" file))
             collect file))

  (leaf org
    :straight nil
    :custom
    ((org-directory . my:d:org)
     (org-default-notes-file . "notes.org")
     (org-log-done . 'time)
     (org-support-shift-select . t)
     (org-return-follows-link . t))
    :config
    (setq org-agenda-files
          (seq-filter (lambda (file)
                        (and (string-match-p "\\.org$" file)
                             (not (string-match-p "archives" file))))
                      (directory-files-recursively org-directory "\\.org$")))
    (unless org-agenda-files
      (setq org-agenda-files (list (expand-file-name "inbox.org" org-directory))))
    (setq org-todo-keywords
          '((sequence "TODO(t)" "SOMEDAY(s)" "WAITING(w)" "|" "DONE(d)" "CANCELED(c@)")))
    (setq org-refile-targets
          '((nil :maxlevel . 3)
            (my/org-buffer-files :maxlevel . 1)
            (org-agenda-files :maxlevel . 3)))
    (setq org-capture-templates
          `(("t" "Todo" entry (file+headline ,(expand-file-name "gtd.org" org-directory) "Inbox")
             "* TODO %?\n %i\n %a")
            ("n" "Note" entry (file+headline ,(expand-file-name "notes.org" org-directory) "Notes")
             "* %?\nEntered on %U\n %i\n %a")
            ("j" "Journal" entry (function org-journal-find-location)
             "* %(format-time-string org-journal-time-format)%^{Title}\n%i%?")
            ("m" "Meeting" entry (file ,(expand-file-name "meetings.org" org-directory))
             "* MEETING with %? :meeting:\n  %U\n  %a"))))

  (with-eval-after-load 'org
    (let* ((central (expand-file-name "archive.org" (or (bound-and-true-p org-directory)
                                                       (expand-file-name "~/org")))))
      (setopt org-archive-location (concat central "::"))))

  (provide 'orgx/org-core)
  ;;; orgx/org-core.el ends here
#+end_src

*** orgx/org-visual.el
:PROPERTIES:
:CUSTOM_ID: orgx-visual
:END:

**Purpose**
Modern Org visuals and friendlier defaults.

**What it does**
- `org-modern` enabled in Org buffers.
- Indentation, hidden markers, pretty entities, safe edits in invisible regions.
- Custom TODO faces (variable setting, not face spec).
- Iconic bullets/checkboxes/priorities (Nerd Font glyphs).
- Agenda layout (grid, separator, “now” marker).

**Notes**
`org-superstar` is intentionally not used.

#+begin_src emacs-lisp :tangle lisp/orgx/org-visual.el
  ;;; orgx/org-visual.el --- Org Mode visual enhancements -*- lexical-binding: t; -*-
  ;;
  ;; Copyright (c) 2021-2025
  ;; License: GNU GPL v3 or later
  ;;
  ;; Category: org
  ;;
  ;;; Code:

  (eval-when-compile (require 'leaf))

  (leaf org-modern
    :straight t
    :hook (org-mode . org-modern-mode)
    :custom
    ((org-startup-indented . t)
     (org-hide-leading-stars . t)
     (org-auto-align-tags . nil)
     (org-tags-column . 0)
     (org-catch-invisible-edits . 'show-and-error)
     (org-special-ctrl-a/e . t)
     (org-insert-heading-respect-content . t)
     (org-hide-emphasis-markers . t)
     (org-pretty-entities . t)
     ;; TODO faces (variable, not face)
     (org-modern-todo-faces
      . '(("TODO" :background "#673AB7" :foreground "#f8f8f2")
          ("WAIT" :background "#6272a4" :foreground "#f8f8f2")
          ("NEXT" :background "#f1fa8c" :foreground "#1E2029")
          ("DONE" :background "#373844" :foreground "#b0b8d1")))
     ;; Nerd Font icons
     (org-modern-list          . '((?+ . "◦") (?- . "–") (?* . "•")))
     (org-modern-checkbox      . '((?X . "") (?- . "") (?\s . "")))
     (org-modern-priority      . '((?A . "") (?B . "") (?C . "")))
     (org-modern-replace-stars . "")
     ;; Agenda
     (org-agenda-tags-column . 0)
     (org-agenda-block-separator . ?─)
     (org-agenda-time-grid
      . '((daily today require-timed)
          (800 1000 1200 1400 1600 1800 2000)
          " ┄┄┄┄┄ " " ┄┄┄┄┄ "))
     (org-agenda-current-time-string
      . "⭠ now ─────────────────────────────────────────────────")))

  (provide 'orgx/org-visual)
  ;;; org-visual.el ends here
#+end_src

*** orgx/org-extensions.el
:PROPERTIES:
:CUSTOM_ID: orgx-extensions
:END:

**Purpose**
Enable Org extensions: Journal, Roam, image download, TOC, and link capture.

**What it does**
- `org-journal` dir under `.var/org/journal`.
- `org-roam` dir + DB path (autosync enabled).
- `org-download` default image dir.
- `toc-org` for Org/Markdown.
- `org-cliplink` bound to `C-x p i`.

**Notes**
Paths align with the central `.var/org/…` layout.

#+begin_src emacs-lisp :tangle lisp/orgx/org-extensions.el
  ;;; orgx/org-extensions.el --- Org Mode extensions -*- lexical-binding: t; -*-
  ;;
  ;; Copyright (c) 2021-2025
  ;; License: GNU GPL v3 or later
  ;;
  ;; Category: org
  ;;
  ;;; Code:

  (eval-when-compile (require 'leaf))

  (leaf org-journal :straight t
    :custom ((org-journal-dir . my:d:org-journal)))

  (leaf org-roam :straight t
    :custom ((org-roam-directory . my:d:org-roam))
    :config
    (setq org-roam-db-location (expand-file-name "org-roam.db" my:d:org-roam))
    (org-roam-db-autosync-mode))

  (leaf org-download :straight t
    :custom ((org-download-image-dir . my:d:org-pictures)))

  (leaf toc-org :straight t
    :hook ((org-mode . toc-org-enable)
           (markdown-mode . toc-org-mode)))

  (leaf org-cliplink :straight t
    :bind ("C-x p i" . org-cliplink))

  (provide 'orgx/org-extensions)
  ;;; orgx/org-extensions.el ends here
#+end_src

*** orgx/org-export.el
:PROPERTIES:
:CUSTOM_ID: orgx-export
:END:

**Purpose**
Export helpers for LaTeX/Hugo/Markdown authoring.

**What it does**
- Hugo: `ox-hugo` with TOML front-matter.
- Markdown: `markdown-mode`, `markdown-preview-mode`, and `edit-indirect`.

**Notes**
LaTeX customization can be added later if needed.

#+begin_src emacs-lisp :tangle lisp/orgx/org-export.el
  ;;; orgx/org-export.el --- Org export configuration -*- lexical-binding: t; -*-
  ;;
  ;; Copyright (c) 2021-2025
  ;; Author: YAMASHITA, Takao
  ;; License: GNU GPL v3 or later
  ;;
  ;; Category: org
  ;;
  ;; Commentary:
  ;; Org export configuration: LaTeX, Hugo, Markdown.
  ;;
  ;;; Code:

  (eval-when-compile (require 'leaf))

  (leaf ox-hugo :straight t
    :after ox
    :custom ((org-hugo-front-matter-format . "toml")))

  (leaf markdown-mode :straight t)
  (leaf markdown-preview-mode :straight t)
  (leaf edit-indirect :straight t)

  (provide 'orgx/org-export)
  ;;; org-export.el ends here
#+end_src

*** vcs/vcs-magit.el
:PROPERTIES:
:CUSTOM_ID: vcs-magit
:END:

**Purpose**
Git porcelain via Magit.

**What it does**
- Binds `C-x g` to `magit-status`.

**Notes**
Pairs with `vcs-gutter.el` for inline diffs.

#+begin_src emacs-lisp :tangle lisp/vcs/vcs-magit.el
  ;;; vcs/vcs-magit.el --- Git integration with Magit -*- lexical-binding: t; -*-
  ;;
  ;; Copyright (c) 2021-2025
  ;; License: GNU GPL v3 or later
  ;;
  ;; Category: vcs
  ;;
  ;;; Code:

  (eval-when-compile (require 'leaf))

  (leaf magit :straight t
    :bind (("C-x g" . magit-status)))

  (provide 'vcs/vcs-magit)
  ;;; vcs/vcs-magit.el ends here
#+end_src

*** vcs/vcs-gutter.el
:PROPERTIES:
:CUSTOM_ID: vcs-gutter
:END:

**Purpose**
Show VC changes in the fringe and keep them in sync with Magit.

**What it does**
- `diff-hl` in prog/text/Dired; integrates with Magit refresh.
- No border drawing for cleaner look.

**Notes**
Supersedes `git-gutter`.

#+begin_src emacs-lisp :tangle lisp/vcs/vcs-gutter.el
  ;;; vcs/vcs-gutter.el --- Show Git changes in fringe -*- lexical-binding: t; -*-
  ;;
  ;; Copyright (c) 2021-2025
  ;; Author: YAMASHITA, Takao
  ;; License: GNU GPL v3 or later
  ;;
  ;; Category: vcs
  ;;
  ;;; Commentary:
  ;; Use `diff-hl` as the sole fringe indicator. Integrates with Magit refresh.
  ;;
  ;;; Code:

  (eval-when-compile (require 'leaf))

  (leaf diff-hl
    :straight t
    :hook ((prog-mode . diff-hl-mode)
           (text-mode . diff-hl-mode)
           (dired-mode . diff-hl-dired-mode)
           (magit-post-refresh . diff-hl-magit-post-refresh))
    :custom ((diff-hl-draw-borders . nil)))

  (provide 'vcs/vcs-gutter)
  ;;; vcs-gutter.el ends here
#+end_src

*** vcs/vcs-forge.el
:PROPERTIES:
:CUSTOM_ID: vcs-forge
:END:

**Purpose**
GitHub/GitLab issues and PR integration.

**What it does**
- Loads `forge` after Magit and stores the database under `.var/forge/`.

**Notes**
Optional; harmless if not used.

#+begin_src emacs-lisp :tangle lisp/vcs/vcs-forge.el
  ;;; vcs/vcs-forge.el --- GitHub/GitLab integration via Forge -*- lexical-binding: t; -*-
  ;;
  ;; Copyright (c) 2021-2025
  ;; License: GNU GPL v3 or later
  ;;
  ;; Category: vcs
  ;;
  ;;; Code:

  (eval-when-compile (require 'leaf))

  (leaf forge
    :straight t
    :after magit
    :config
    (setq forge-database-file
          (expand-file-name "forge/forge-database.sqlite" no-littering-var-directory))
    (my/ensure-directory-exists (expand-file-name "forge" no-littering-var-directory)))

  (provide 'vcs/vcs-forge)
  ;;; vcs/vcs-forge.el ends here
#+end_src

*** dev/dev-lsp-eglot.el
:PROPERTIES:
:CUSTOM_ID: dev-lsp-eglot
:END:

**Purpose**
Lightweight LSP via Eglot, auto-enabling only when a server is detectable.

**What it does**
- Hooks `prog-mode` to probe `eglot--guess-contact`; starts Eglot when a server is known.
- `eglot-autoreconnect` enabled.
- Autoloaded `my/lsp-enable-eglot` for explicit enable.

**Notes**
Gentle default; won’t spam servers for unknown languages.

#+begin_src emacs-lisp :tangle lisp/dev/dev-lsp-eglot.el
;;; dev-lsp-eglot.el --- Eglot setup -*- lexical-binding: t; -*-
;;
;; Copyright (c) 2021-2025
;; Author: YAMASHITA, Takao
;; License: GNU GPL v3 or later
;;
;; Category: dev
;;
;;; Commentary:
;; Eglot baseline with safe auto-enable only when a server is detectable.
;;
;;; Code:

(eval-when-compile (require 'leaf))

(leaf eglot
  :straight t
  :commands (eglot eglot-ensure)
  :custom ((eglot-autoreconnect . t))
  :hook ((prog-mode . (lambda ()
                        (when (fboundp 'eglot--guess-contact)
                          (when (eglot--guess-contact)
                            (eglot-ensure)))))))

;;;###autoload
(defun my/lsp-enable-eglot ()
  "Enable Eglot-based LSP setup."
  (interactive)
  (add-hook 'prog-mode-hook
            (lambda ()
              (when (fboundp 'eglot--guess-contact)
                (when (eglot--guess-contact)
                  (eglot-ensure)))))
  (message "[lsp] Eglot enabled."))

(provide 'dev/dev-lsp-eglot)
;;; dev-lsp-eglot.el ends here
#+end_src

*** dev/dev-lsp-mode.el
:PROPERTIES:
:CUSTOM_ID: dev-lsp-mode
:END:

**Purpose**
Full-featured LSP via `lsp-mode` with `lsp-ui` overlays.

**What it does**
- `prog-mode` → `lsp-deferred`.
- Completion provider disabled (`:none`) to let Corfu handle it.
- `lsp-ui` doc/sideline enabled with short delay.
- Autoloaded `my/lsp-enable-lspmode`.

**Notes**
Choose backend in `core/switches.el`.

#+begin_src emacs-lisp :tangle lisp/dev/dev-lsp-mode.el
;;; dev-lsp-mode.el --- lsp-mode setup -*- lexical-binding: t; -*-
;;
;; Copyright (c) 2021-2025
;; Author: YAMASHITA, Takao
;; License: GNU GPL v3 or later
;;
;; Category: dev
;;
;;; Commentary:
;; lsp-mode baseline + lsp-ui. Completion is delegated to Corfu.
;;
;;; Code:

(eval-when-compile (require 'leaf))

(leaf lsp-mode
  :straight t
  :commands (lsp lsp-deferred)
  :custom ((lsp-keymap-prefix . "C-c l")
           (lsp-enable-file-watchers . t)
           (lsp-file-watch-threshold . 5000)
           (lsp-response-timeout . 5)
           (lsp-diagnostics-provider . :auto)
           (lsp-completion-provider . :none))
  :hook ((prog-mode . lsp-deferred)))

(leaf lsp-ui
  :straight t
  :after lsp-mode
  :custom ((lsp-ui-doc-enable . t)
           (lsp-ui-doc-delay . 0.2)
           (lsp-ui-sideline-enable . t)))

;;;###autoload
(defun my/lsp-enable-lspmode ()
  "Enable lsp-mode-based LSP setup."
  (interactive)
  (add-hook 'prog-mode-hook #'lsp-deferred)
  (message "[lsp] lsp-mode enabled."))

(provide 'dev/dev-lsp-mode)
;;; dev-lsp-mode.el ends here
#+end_src

*** dev/dev-ai.el
:PROPERTIES:
:CUSTOM_ID: dev-ai
:END:

**Purpose**
Aidermacs integration with OpenRouter/OpenAI backends.

**What it does**
- Prefers OpenRouter if `OPENROUTER_API_KEY` is set (sets base and default model); otherwise uses OpenAI if `OPENAI_API_KEY` is present.
- Basic retry policy; vterm backend.

**Notes**
Warns when no API keys are found.

#+begin_src emacs-lisp :tangle lisp/dev/dev-ai.el
  ;;; dev/dev-ai.el --- AI-assisted development -*- lexical-binding: t; -*-
  ;;
  ;; Copyright (c) 2021-2025
  ;; License: GNU GPL v3 or later
  ;;
  ;; Category: dev
  ;;
  ;; Commentary:
  ;; AI-assisted coding via Aidermacs.
  ;;
  ;;; Code:

  (eval-when-compile (require 'leaf))

  (leaf aidermacs :straight t
    :init
    (cond
     ((getenv "OPENROUTER_API_KEY")
      (setenv "OPENAI_API_BASE" "https://openrouter.ai/api/v1")
      (setenv "OPENAI_API_KEY"  (getenv "OPENROUTER_API_KEY"))
      (setopt aidermacs-default-model "openrouter/anthropic/claude-3.5-sonnet"))
     ((getenv "OPENAI_API_KEY")
      (setenv "OPENAI_API_BASE" "https://api.openai.com/v1")
      (setopt aidermacs-default-model "gpt-4o-mini"))
     (t
      (display-warning 'aidermacs
                       "No API keys set. Set OPENROUTER_API_KEY or OPENAI_API_KEY.")))
    (setopt aidermacs-retry-attempts 3
            aidermacs-retry-delay   2.0
            aidermacs-backend       'vterm))

  (provide 'dev/dev-ai)
  ;;; dev/dev-ai.el ends here
#+end_src

*** dev/dev-term.el
:PROPERTIES:
:CUSTOM_ID: dev-term
:END:

**Purpose**
Terminal workflows.

**What it does**
- `vterm` with convenience bindings and themed colors.
- `vterm-toggle` for project-scoped popups and window rules.

**Notes**
Adds display rules so toggles reuse a bottom window.

#+begin_src emacs-lisp :tangle lisp/dev/dev-term.el
  ;;; dev/dev-term.el --- Terminal integration -*- lexical-binding: t; -*-
  ;;
  ;; Copyright (c) 2021-2025
  ;; License: GNU GPL v3 or later
  ;;
  ;; Category: dev
  ;;
  ;; Commentary:
  ;; Provides terminal integration with vterm.
  ;;
  ;;; Code:

  (eval-when-compile (require 'leaf))

  (leaf vterm
    :doc "Emacs libvterm integration"
    :url "https://github.com/akermu/emacs-libvterm"
    :straight t
    :bind
    (:vterm-mode-map
     ("C-c C-l"    . vterm-clear)
     ("C-o"        . previous-window-any-frame))
    :custom-face
    (vterm-color-red     . '((t (:foreground "#ff79c6" :background "#ff9ad4"))))
    (vterm-color-magenta . '((t (:foreground "#bd93f9" :background "#a9a1e1")))))

  (leaf vterm-toggle
    :doc "Toggles between the vterm buffer and whatever buffer you are editing."
    :url "https://github.com/jixiuf/vterm-toggle"
    :straight t
    :bind
    ("<f12>"    . vterm-toggle-cd-show)
    ("C-<f12>"  . vterm-toggle-show)
    (:vterm-mode-map
     ("<f12>"      . vterm-toggle-hide)
     ("C-<enter>"  . vterm-toggle-insert-cd)
     ("S-<right>"  . vterm-toggle-forward)
     ("S-<left>"   . vterm-toggle-backward))
    :custom
    (vterm-toggle-cd-auto-create-buffer . t)
    (vterm-toggle-fullscreen-p          . nil)
    (vterm-toggle-scope                 . 'project)
    :config
    (add-to-list 'display-buffer-alist
                 '((lambda (buffer-or-name _)
                     (let ((buffer (get-buffer buffer-or-name)))
                       (with-current-buffer buffer
                         (or (equal major-mode 'vterm-mode)
                             (string-prefix-p vterm-buffer-name (buffer-name buffer))))))
                   (display-buffer-reuse-window display-buffer-in-direction)
                   (direction       . bottom)
                   (dedicated       . t)
                   (reusable-frames . visible)
                   (window-height   . 0.3))))

  (provide 'dev/dev-term)
  ;;; dev/dev-term.el ends here
#+end_src

*** dev/dev-build.el
:PROPERTIES:
:CUSTOM_ID: dev-build
:END:

**Purpose**
Build/compile integration with Make and ANSI color.

**What it does**
- Makefiles: strict tabs and visible trailing spaces.
- Compile: `compile/recompile/project-compile` keybindings; scroll output; skip noise.
- Auto command: sets `make -k` when a Makefile exists.
- Colorize compilation buffers with `ansi-color`.

**Notes**
Applies to both GNUmakefile and Makefile.

#+begin_src emacs-lisp :tangle lisp/dev/dev-build.el
  ;;; dev/dev-build.el --- Build & Makefile tools -*- lexical-binding: t; -*-
  ;;
  ;; Copyright (c) 2021-2025
  ;; License: GNU GPL v3 or later
  ;;
  ;; Category: dev
  ;;
  ;; Commentary:
  ;; Build system integration.
  ;;
  ;;; Code:

  (eval-when-compile (require 'leaf))

  (leaf make-mode :straight nil
    :mode (("\\`Makefile\\'"    . makefile-gmake-mode)
           ("\\`GNUmakefile\\'" . makefile-gmake-mode)
           ("\\`makefile\\'"    . makefile-gmake-mode))
    :hook ((makefile-mode . (lambda ()
                              (setq-local indent-tabs-mode t
                                          tab-width 8
                                          show-trailing-whitespace t))))
    :config
    (leaf compile :straight nil
      :bind (("C-c c c" . compile)
             ("C-c c r" . recompile)
             ("C-c c p" . project-compile))
      :custom ((compilation-scroll-output . t)
               (compilation-skip-threshold . 2))
      :init
      (defun my/set-make-compile-command ()
        "Use `make -k` when Makefile is present."
        (when (or (derived-mode-p 'makefile-mode)
                  (locate-dominating-file default-directory "Makefile")
                  (locate-dominating-file default-directory "GNUmakefile"))
          (setq-local compile-command "make -k")))
      (add-hook 'after-change-major-mode-hook #'my/set-make-compile-command))
    (leaf ansi-color :straight nil
      :hook (compilation-filter . (lambda ()
                                    (let ((inhibit-read-only t))
                                      (ansi-color-apply-on-region compilation-filter-start (point-max)))))))

  (provide 'dev/dev-build)
  ;;; dev/dev-build.el ends here
#+end_src

*** dev/dev-docker.el
:PROPERTIES:
:CUSTOM_ID: dev-docker
:END:

**Purpose**
Docker authoring and inspection.

**What it does**
- Modes: `dockerfile-mode`, `yaml-mode` for compose.
- Dashboard: `docker.el` with keybindings.
- Remote: `tramp-container` method set to Docker.
- Snippets: `tempel` helper for Dockerfiles.

**Notes**
Composition YAMLs are auto-detected.

#+begin_src emacs-lisp :tangle lisp/dev/dev-docker.el
  ;;; dev/dev-docker.el --- Docker integration -*- lexical-binding: t; -*-
  ;;
  ;; Copyright (c) 2021-2025
  ;; License: GNU GPL v3 or later
  ;;
  ;; Category: dev
  ;;
  ;; Commentary:
  ;; Docker development support.
  ;;
  ;;; Code:

  (eval-when-compile (require 'leaf))

  (leaf dockerfile-mode :straight t
    :mode (("Dockerfile\\(\\..*\\)?\\'" . dockerfile-mode)
           ("\\.dockerfile\\'"         . dockerfile-mode))
    :custom ((dockerfile-mode-command . "docker")))

  (leaf yaml-mode :straight t
    :mode (("\\`docker-compose.*\\.ya?ml\\'" . yaml-mode)
           ("\\.ya?ml\\'"                   . yaml-mode)))

  (leaf docker :straight t
    :commands (docker docker-containers docker-images docker-volumes docker-networks)
    :bind (("C-c d d" . docker)
           ("C-c d c" . docker-containers)
           ("C-c d i" . docker-images)
           ("C-c d v" . docker-volumes)
           ("C-c d n" . docker-networks)))

  (leaf tramp-container :straight nil
    :after tramp
    :init
    (setq tramp-container-method "docker"))

  (leaf tempel :straight t
    :commands (tempel-insert)
    :bind (dockerfile-mode-map
           ("C-c d t" . tempel-insert))
    :init
    (with-eval-after-load 'tempel
      (defvar my:tempel-docker-templates
        '((dockerfile "FROM " p n
                      "WORKDIR /app" n
                      "COPY . /app" n
                      "RUN " p n
                      "CMD [" p "]" n)))
      (add-to-list 'tempel-user-elements my:tempel-docker-templates)))

  (provide 'dev/dev-docker)
  ;;; dev/dev-docker.el ends here
#+end_src

*** dev/web-core.el
:PROPERTIES:
:CUSTOM_ID: dev-web-core
:END:

**Purpose**
Project plumbing and modern syntax highlighting via Tree-sitter.

**What it does**
- `project.el` and file hygiene defaults.
- `editorconfig` globally.
- Remaps major modes to `*-ts-mode` for TS/JS/JSON/CSS/YAML/Bash and sets `tsx-ts-mode`/`typescript-ts-mode` in `auto-mode-alist`.

**Notes**
Install grammars through `M-x treesit-install-language-grammar`.

#+begin_src emacs-lisp :tangle lisp/dev/web-core.el
  ;;; web-core.el --- Treesit & project core -*- lexical-binding: t; -*-
  ;;
  ;; Copyright (c) 2021-2025
  ;; Author: YAMASHITA, Takao
  ;; License: GNU GPL v3 or later
  ;;
  ;; Category: dev
  ;;
  ;; Commentary:
  ;; Core configuration for project management and modern syntax highlighting.
  ;;
  ;;; Code:

  (eval-when-compile (require 'leaf))

  (leaf project :straight nil)
  (leaf files   :straight nil
    :custom ((require-final-newline . t)
             (delete-trailing-lines . t))
    :hook ((before-save-hook . delete-trailing-whitespace)))

  (leaf editorconfig
    :straight t
    :global-minor-mode t)

  (leaf treesit
    :straight nil
    :custom ((major-mode-remap-alist
              . '((typescript-mode . typescript-ts-mode)
                  (js-mode         . js-ts-mode)
                  (json-mode       . json-ts-mode)
                  (css-mode        . css-ts-mode)
                  (yaml-mode       . yaml-ts-mode)
                  (sh-mode         . bash-ts-mode)))))

  (add-to-list 'auto-mode-alist '("\\.tsx\\'" . tsx-ts-mode))
  (add-to-list 'auto-mode-alist '("\\.ts\\'"  . typescript-ts-mode))
  (add-to-list 'auto-mode-alist '("\\.json\\'" . json-ts-mode))
  (add-to-list 'auto-mode-alist '("\\.ya?ml\\'" . yaml-ts-mode))

  (provide 'dev/web-core)
  ;;; web-core.el ends here
#+end_src

*** dev/format.el
:PROPERTIES:
:CUSTOM_ID: dev-format
:END:

**Purpose**
On-save formatting for Web/Markdown via Apheleia.

**What it does**
- Formatters: prefers `prettierd`, falls back to `npx prettier`.
- Maps common Web/Markdown modes to Prettier and enables `apheleia-global-mode`.

**Notes**
Respects file-local configs provided by EditorConfig.

#+begin_src emacs-lisp :tangle lisp/dev/format.el
  ;;; format.el --- Prettier/ESLint via Apheleia -*- lexical-binding: t; -*-
  ;;
  ;; Category: dev
  ;;
  (eval-when-compile (require 'leaf))

  (leaf apheleia
    :straight t
    :require t
    :config
    (setf (alist-get 'prettierd apheleia-formatters)
          '("prettierd" filepath))
    (setf (alist-get 'prettier apheleia-formatters)
          '("npx" "prettier" "--stdin-filepath" filepath))
    (dolist (pair '((typescript-ts-mode . prettierd)
                    (tsx-ts-mode        . prettierd)
                    (json-ts-mode       . prettierd)
                    (css-ts-mode        . prettierd)
                    (markdown-mode      . prettierd)))
      (add-to-list 'apheleia-mode-alist pair))
    (apheleia-global-mode +1))

  (provide 'dev/format)
  ;;; format.el ends here
#+end_src

*** dev/infra-modes.el
:PROPERTIES:
:CUSTOM_ID: dev-infra-modes
:END:

**Purpose**
Syntax modes for infra files.

**What it does**
- Docker Compose, `.env` files, and TOML via `docker-compose-mode`, `dotenv-mode`, and `toml-mode`.
- Built-in `make-mode` handled elsewhere.

**Notes**
Patterns match common filenames (`docker-compose.*.yml`, `.env*`, `.toml`).

#+begin_src emacs-lisp :tangle lisp/dev/infra-modes.el
  ;;; infra-modes.el --- Infra modes (.env / Compose / TOML / Make) -*- lexical-binding: t; -*-
  ;;
  ;; Copyright (c) 2021-2025
  ;; License: GNU GPL v3 or later
  ;;
  ;; Category: dev
  ;;
  ;; Commentary:
  ;; Syntax support for infra files such as Docker Compose, .env, TOML, and Makefiles.
  ;;
  ;;; Code:

  (eval-when-compile (require 'leaf))

  (leaf docker-compose-mode :straight t :mode ("docker-compose\\.*ya?ml\\'"))
  (leaf dotenv-mode :straight t
    :mode (("\\.env\\..*\\'" . dotenv-mode)
           ("\\.env\\'"     . dotenv-mode)))
  (leaf toml-mode :straight t :mode ("\\.toml\\'" . toml-mode))

  (provide 'dev/infra-modes)
  ;;; infra-modes.el ends here
#+end_src

*** dev/sql.el
:PROPERTIES:
:CUSTOM_ID: dev-sql
:END:

**Purpose**
SQL (PostgreSQL-first) editing with indentation and formatting.

**What it does**
- Built-in `sql` with default product `postgres`.
- `sql-indent` minor mode.
- `sqlformat` using `pgformatter` with on-save integration.

**Notes**
Requires `pgformatter` to be installed on the system.

#+begin_src emacs-lisp :tangle lisp/dev/sql.el
  ;;; lisp/dev/sql.el --- SQL/PostgreSQL helpers -*- lexical-binding: t; -*-
  ;;
  ;; Category: dev
  ;;
  (eval-when-compile (require 'leaf))

  (leaf sql :straight nil
    :custom ((sql-product . 'postgres)))

  (leaf sql-indent :straight t
    :hook (sql-mode . sqlind-minor-mode))

  (leaf sqlformat
    :straight t
    :custom ((sqlformat-command . 'pgformatter)
             (sqlformat-args . '("--nostyle")))
    :hook (sql-mode . sqlformat-on-save-mode)
    :hook (sql-ts-mode . sqlformat-on-save-mode))

  (provide 'dev/sql)
  ;;; sql.el ends here
#+end_src

*** dev/rest.el
:PROPERTIES:
:CUSTOM_ID: dev-rest
:END+

**Purpose**
HTTP/API testing inside Emacs.

**What it does**
- `restclient` for `.http` files.
- `restclient-jq` to parse JSON responses with jq.

**Notes**
Great for quick API experiments (e.g., Next.js backends, LLM gateways).

#+begin_src emacs-lisp :tangle lisp/dev/rest.el
  ;;; rest.el --- REST client helpers (Next.js / Ollama / Qdrant) -*- lexical-binding: t; -*-
  ;;
  ;; Copyright (c) 2021-2025
  ;; License: GNU GPL v3 or later
  ;;
  ;; Category: dev
  ;;
  ;; Commentary:
  ;; REST client integration for testing HTTP requests inside Emacs.
  ;; Supports JSON parsing with jq.
  ;;
  ;;; Code:

  (eval-when-compile (require 'leaf))

  (leaf restclient :straight t :mode ("\\.http\\'" . restclient-mode))
  (leaf restclient-jq :straight t :after restclient)

  (provide 'dev/rest)
  ;;; dev/rest.el ends here
#+end_src

*** utils/utils-functions.el
:PROPERTIES:
:CUSTOM_ID: utils-functions
:END:

**Purpose**
General helper functions.

**What it does**
- `my/kill-buffer-smart`: kill buffer and window if more than one window; otherwise just the buffer.

**Notes**
Window-aware and safe.

#+begin_src emacs-lisp :tangle lisp/utils/utils-functions.el
  ;;; utils/utils-functions.el --- General utility functions -*- lexical-binding: t; -*-
  ;;
  ;; Copyright (c) 2021-2025
  ;; License: GNU GPL v3 or later
  ;;
  ;; Category: utils
  ;;
  ;;; Code:

  (defun my/kill-buffer-smart ()
    "Kill buffer and window, or just buffer if only one window."
    (interactive)
    (if (one-window-p)
        (kill-buffer)
      (kill-buffer-and-window)))

  (provide 'utils/utils-functions)
#+end_src

*** utils/utils-scratch.el
:PROPERTIES:
:CUSTOM_ID: utils-scratch
:END:

**Purpose**
Keep `*scratch*` around and make it easy to recreate.

**What it does**
- Recreates `*scratch*` after it’s killed.
- `my/create-scratch-buffer` creates a fresh lisp-interaction buffer with a small banner.

**Notes**
All hooks are local and non-intrusive.

#+begin_src emacs-lisp :tangle lisp/utils/utils-scratch.el
  ;;; utils/utils-scratch.el --- Scratch buffer helpers -*- lexical-binding: t; -*-
  ;;
  ;; Copyright (c) 2021-2025
  ;; License: GNU GPL v3 or later
  ;;
  ;; Category: utils
  ;;
  ;;; Code:

  (leaf *scratch-auto-recreate
    :straight nil
    :init
    (defun my/create-scratch-buffer ()
      "Create a new `*scratch*` buffer with `lisp-interaction-mode`."
      (let ((buf (get-buffer-create "*scratch*")))
        (with-current-buffer buf
          (lisp-interaction-mode)
          (insert ";; This is a new *scratch* buffer\n\n"))
        buf))

    (defun my/kill-scratch-buffer-advice (buf)
      "Recreate *scratch* if BUF is *scratch*."
      (when (string= (buffer-name buf) "*scratch*")
        (run-at-time 0 nil #'my/create-scratch-buffer)))

    (add-hook 'kill-buffer-hook
              (lambda ()
                (my/kill-scratch-buffer-advice (current-buffer)))))

  (provide 'utils/utils-scratch)
  ;;; utils/utils-scratch.el ends here
#+end_src

*** utils/utils-backup.el
:PROPERTIES:
:CUSTOM_ID: utils-backup
:END:

**Purpose**
Prune stale backups.

**What it does**
- On startup, deletes backup files older than 7 days under `.var/backup/`.

**Notes**
Quietly skips if the directory does not exist.

#+begin_src emacs-lisp :tangle lisp/utils/utils-backup.el
  ;;; utils/utils-backup.el --- Backup and auto-save helpers -*- lexical-binding: t; -*-
  ;;
  ;; Copyright (c) 2021-2025
  ;; License: GNU GPL v3 or later
  ;;
  ;; Category: utils
  ;;
  ;;; Code:

  (defun my/delete-old-backups ()
    "Delete backup files older than 7 days."
    (interactive)
    (let ((backup-dir (concat no-littering-var-directory "backup/"))
          (threshold (- (float-time (current-time)) (* 7 24 60 60))))
      (when (file-directory-p backup-dir)
        (dolist (file (directory-files backup-dir t))
          (when (and (file-regular-p file)
                     (< (float-time (file-attribute-modification-time
                                     (file-attributes file)))
                        threshold))
            (delete-file file))))))

  (add-hook 'emacs-startup-hook #'my/delete-old-backups)

  (provide 'utils/utils-backup)
  ;;; utils/utils-backup.el ends here
#+end_src

*** utils/utils-async.el
:PROPERTIES:
:CUSTOM_ID: utils-async
:END:

**Purpose**
Fire-and-forget async task runner with error reporting.

**What it does**
- `my/safe-run-async`: runs a thunk via `run-at-time 0`, catching exceptions and messaging failures.

**Notes**
Good for non-critical deferred work.

#+begin_src emacs-lisp :tangle lisp/utils/utils-async.el
  ;;; utils/utils-async.el --- Async helpers -*- lexical-binding: t; -*-
  ;;
  ;; Copyright (c) 2021-2025
  ;; License: GNU GPL v3 or later
  ;;
  ;; Category: utils
  ;;
  ;;; Code:

  (defun my/safe-run-async (task)
    "Run TASK asynchronously, catching and reporting any errors."
    (run-at-time 0 nil
                 (lambda ()
                   (condition-case err
                       (funcall task)
                     (error (message "[async] error: %s" err))))))

  (provide 'utils/utils-async)
  ;;; utils/utils-async.el ends here
#+end_src

*** utils/search-nav.el
:PROPERTIES:
:CUSTOM_ID: search-nav
:END:

**Purpose**
Project search & navigation.

**What it does**
- `consult-ripgrep` when `rg` is available
- `dumb-jump` as xref fallback
- `multiple-cursors` for multi-edit
- EWW helpers (search, toggle images, highlight after render)

**Notes**
`projectile` removed; rely on built-in `project.el`.

#+begin_src emacs-lisp :tangle lisp/utils/search-nav.el
  ;;; utils/search-nav.el --- Project search & navigation -*- lexical-binding: t; -*-
  ;;
  ;; Copyright (c) 2021-2025
  ;; Author: YAMASHITA, Takao
  ;; License: GNU GPL v3 or later
  ;;
  ;; Category: utils
  ;;
  ;;; Commentary:
  ;; Modern search/navigation helpers using ripgrep (via consult) and dumb-jump fallback.
  ;;
  ;;; Code:

  (eval-when-compile (require 'leaf))

  (leaf dumb-jump :straight t
    :hook (xref-backend-functions . dumb-jump-xref-activate)
    :custom ((dumb-jump-force-searcher  . 'rg)
             (dumb-jump-prefer-searcher . 'rg)))

  (leaf multiple-cursors :straight t)

  (leaf eww :straight nil
    :custom ((eww-search-prefix . "https://duckduckgo.com/html/?kl=jp-jp&k1=-1&kc=1&kf=-1&q=")
             (eww-download-directory . "~/Downloads"))
    :init
    (setq eww-bookmarks-file (expand-file-name "eww-bookmarks" my:d:var))
    (setq eww-history-limit 200)
    (defvar eww-hl-search-word nil "Word to highlight with isearch after EWW loads.")
    (defun my/eww-search (term)
      "Search TERM with EWW and start isearch."
      (interactive "sSearch terms: ")
      (setq eww-hl-search-word term)
      (eww-browse-url (concat eww-search-prefix term)))
    (add-hook 'eww-after-render-hook
              (lambda ()
                (when eww-hl-search-word
                  (isearch-mode t)
                  (isearch-yank-string eww-hl-search-word)
                  (setq eww-hl-search-word nil))))
    (defun my/eww-toggle-images () (interactive)
      (setq shr-inhibit-images (not shr-inhibit-images))
      (eww-reload)))

  (provide 'utils/search-nav)
  ;;; utils-search-nav.el ends here
#+end_src

** personal/user.el
:PROPERTIES:
:CUSTOM_ID: personal-user
:END:

**Purpose**
Per-user (macOS-first) layer: identity, font preferences (consumed by the UI font module), feature switches (UI/LSP), directory policy for cloud/Org/blog, safe `load-path` pruning, macOS input-source integration (sis+macism), cursor color sync after theme loads, pointing-device tuning, and Apple Music control (with a Hydra and Meow leader binding).

**What it does**
- **Identity & perf knobs**
  - Sets `user-full-name`/`user-mail-address`.
  - Tweaks performance/usability flags: `inhibit-compacting-font-caches`, and `plstore-cache-passphrase-for-symmetric-encryption`.
- **Font *preferences*** (values only)
  - Defines `my:font-default` (`JetBrains Mono NL`), `my:font-alt` (`Noto Sans JP`), `my:emoji-font` (`Apple Color Emoji`), and `my:font-size` (`18`).
    These are *read by* the UI font module (`ui/ui-font.el`) and are not directly applied here.
- **Global switches**
  - Chooses **UI bundle** = `nano` and **LSP backend** = `eglot` by setting `my:use-ui` / `my:use-lsp` (consumed by `core/switches.el`).
- **Directories & Org plumbing**
  - Declares and creates:
    - `my:d:cloud` → `~/Documents/`
    - `my:d:org`   → `<cloud>/org/`
    - `my:d:blog`  → `<cloud>/devel/repos/mysite/`
    - `my:f:capture-blog-file` → `<blog>/all-posts.org`
  - Rebuilds **Org roots** for this user:
    - Sets `org-directory` to `my:d:org`.
    - Recomputes `org-agenda-files` by recursively scanning `org-directory` for `*.org` and excluding paths containing `archives`.
- **Safe `load-path` pruning**
  - Defines `my:d:excluded-directories` (e.g. `~/Library/Accounts`) and removes them from `load-path`.
- **macOS IME (sis + macism)**
  - On macOS, configures **ABC** (English) and **Kotoeri Romaji** (Japanese) via `sis-ism-lazyman-config 'macism`.
  - Enables:
    - `sis-global-cursor-color-mode` (cursor color tracks input source),
    - `sis-global-respect-mode`,
    - `sis-global-inline-mode`.
- **Cursor color sync after theming**
  - Hooks `after-load-theme-hook` to set the cursor face background from the frame’s `cursor-color`, keeping it visually consistent across theme toggles.
- **Pointing device (MX Ergo S) & scrolling**
  - Conservative, predictable scroll behavior (`scroll-conservatively`, `scroll-margin`, `scroll-preserve-screen-position`).
  - Smooth/tilt scrolling on macOS; disables progressive acceleration.
  - Mouse bindings:
    - `mouse-2` → `yank`
    - `mouse-4` → `previous-buffer`
    - `mouse-5` → `next-buffer`
- **Apple Music integration (macOS)**
  - **Async AppleScript runner** using `start-process` + sentinel (`my/apple-music-osascript-async`) and a **sync** variant (`my/apple-music-osascript-sync`).
  - Commands:
    - `my/apple-music-play-pause`, `my/apple-music-next-track`, `my/apple-music-previous-track`
    - `my/apple-music-current-track-info` → echoes *Title — Artist [Album]*
    - `my/apple-music-play-playlist` with completing-read over `my/apple-music-get-playlists`.
  - **Hydra**: `my/hydra-apple-music` (`p/n/b/l/i/q`) and global key `C-c M`.
  - **Meow leader**: binds `SPC M` → `my/hydra-apple-music/body` (only when Meow & Hydra are loaded).

**Notes**
- This file defines *preferences and per-user wiring*; other modules (e.g., `ui/ui-font.el`, `core/switches.el`) consume them.
- macOS-only bits are guarded (`(eq system-type 'darwin)`); `osascript`, the Music app, `macism`, and `sis` must be available.
- The **agenda rebuild here overrides** any earlier `org-agenda-files` decisions—useful for per-machine Org layouts.
- The Meow leader binding for Music appears once both **Meow** and **Hydra** are available; otherwise it’s skipped gracefully.

#+begin_src emacs-lisp :tangle (eval (format "personal/%s.el" (user-login-name)))
  ;;; user.el --- Personal configuration -*- lexical-binding: t; -*-
  ;;
  ;; Copyright (c) 2021-2025
  ;; License: GNU GPL v3 or later
  ;;
  ;; Category: personal
  ;;
  ;;; Commentary:
  ;; Personal settings and device-specific configurations.
  ;;
  ;;; Code:

  (eval-when-compile
    (require 'leaf)
    (require 'subr-x))

  (leaf *personals
    :straight nil
    :init
    (setq user-full-name "YAMASHITA, Takao"
          user-mail-address "tjy1965@gmail.com"
          inhibit-compacting-font-caches t
          plstore-cache-passphrase-for-symmetric-encryption t)

    (setq my:font-default "JetBrains Mono NL"
          my:font-alt     "Noto Sans JP"
          my:emoji-font   "Apple Color Emoji"
          my:font-size    18)

    (setq my:use-ui 'nano
          my:use-lsp 'eglot)

    (defvar my:d:cloud
      (expand-file-name "Documents/" (getenv "HOME"))
      "Cloud storage base directory.")
    (defvar my:d:org
      (expand-file-name "org/" my:d:cloud)
      "Org directory.")
    (defvar my:d:blog
      (expand-file-name "devel/repos/mysite/" my:d:cloud)
      "Blog directory.")
    (defvar my:f:capture-blog-file
      (expand-file-name "all-posts.org" my:d:blog)
      "Default Org file for blog captures.")
    (defvar my:d:excluded-directories
      (list (expand-file-name "Library/Accounts" (getenv "HOME")))
      "Directories excluded from `load-path` for safety.")

    (mapc #'my/ensure-directory-exists (list my:d:cloud my:d:org my:d:blog))

    (setq org-directory my:d:org)
    (setq org-agenda-files
          (seq-filter (lambda (file)
                        (and (string-match-p "\\.org\\'" file)
                             (not (string-match-p "archives" file))))
                      (directory-files-recursively org-directory "\\.org\\'")))

    (setq load-path
          (seq-remove (lambda (dir)
                        (member dir my:d:excluded-directories))
                      load-path)))

  (leaf sis
    :if (eq system-type 'darwin)
    :straight t
    :commands (sis-ism-lazyman-config
               sis-global-cursor-color-mode
               sis-global-respect-mode
               sis-global-inline-mode)
    :hook (emacs-startup .
           (lambda ()
             (when (fboundp 'sis-ism-lazyman-config)
               (sis-ism-lazyman-config
                "com.apple.keylayout.ABC"
                "com.apple.inputmethod.Kotoeri.RomajiTyping.Japanese"
                'macism))
             (when (fboundp 'sis-global-cursor-color-mode)
               (sis-global-cursor-color-mode t))
             (when (fboundp 'sis-global-respect-mode)
               (sis-global-respect-mode t))
             (when (fboundp 'sis-global-inline-mode)
               (sis-global-inline-mode t)))))

  (add-hook 'after-load-theme-hook
            (lambda ()
              (set-face-background 'cursor (frame-parameter nil 'cursor-color))))

  (leaf *device/MX_ErgoS
    :straight nil
    :init
    (setq mouse-wheel-scroll-amount '(1 ((shift) . 5) ((control) . 10))
          mouse-wheel-progressive-speed nil
          scroll-conservatively 10000
          scroll-margin 2
          scroll-preserve-screen-position t
          mac-mouse-wheel-smooth-scroll t
          mouse-wheel-tilt-scroll t
          mouse-wheel-flip-direction nil)
    (global-set-key [mouse-2] #'yank)
    (global-set-key [mouse-4] #'previous-buffer)
    (global-set-key [mouse-5] #'next-buffer))

  (when (eq system-type 'darwin)
    (defun my/apple-music-osascript-async (script &optional callback)
      "Run AppleScript SCRIPT asynchronously, invoking CALLBACK with its output."
      (let* ((proc-name "apple-music-async")
             (buffer-name "*Apple Music Async*")
             (osascript-cmd (list "osascript" "-e" script))
             (proc (apply #'start-process proc-name buffer-name osascript-cmd)))
        (when callback
          (set-process-sentinel
           proc
           (lambda (process event)
             (when (string= event "finished\n")
               (with-current-buffer (process-buffer process)
                 (let ((output (string-trim (buffer-string))))
                   (funcall callback output)))
               (kill-buffer (process-buffer process))))))))

    (defun my/apple-music-osascript-sync (script)
      "Run AppleScript SCRIPT synchronously and return trimmed output."
      (string-trim
       (shell-command-to-string
        (format "osascript -e '%s'" script))))

    ;;;###autoload
    (defun my/apple-music-play-pause () (interactive)
      "Toggle play/pause in Apple Music."
      (my/apple-music-osascript-async "tell application \"Music\" to playpause"))

    ;;;###autoload
    (defun my/apple-music-next-track () (interactive)
      "Skip to the next track in Apple Music."
      (my/apple-music-osascript-async "tell application \"Music\" to next track"))

    ;;;###autoload
    (defun my/apple-music-previous-track () (interactive)
      "Return to the previous track in Apple Music."
      (my/apple-music-osascript-async "tell application \"Music\" to previous track"))

    ;;;###autoload
    (defun my/apple-music-current-track-info () (interactive)
      "Echo current track info: Title — Artist [Album]."
      (let ((info (my/apple-music-osascript-sync
                   "tell application \"Music\" \
  to (get name of current track) & \" — \" & (get artist of current track) & \" [\" & (get album of current track) & \"]\"")))
        (message "%s" info)
        info))

    (defun my/apple-music-get-playlists ()
      "Return a list of playlist names from Apple Music."
      (split-string
       (my/apple-music-osascript-sync
        "tell application \"Music\" to get name of playlists")
       ", "))

    ;;;###autoload
    (defun my/apple-music-play-playlist (playlist)
      "Prompt for PLAYLIST and play it in Apple Music."
      (interactive
       (list (completing-read "Playlist: " (my/apple-music-get-playlists))))
      (my/apple-music-osascript-async
       (format "tell application \"Music\" to play playlist \"%s\"" playlist)))

    (with-eval-after-load 'hydra
      (defhydra my/hydra-apple-music (:hint nil)
        "
  Apple Music:
  _p_: Play/Pause  _n_: Next  _b_: Back  _l_: Playlist  _i_: Info  _q_: Quit
  "
        ("p" my/apple-music-play-pause)
        ("n" my/apple-music-next-track)
        ("b" my/apple-music-previous-track)
        ("l" my/apple-music-play-playlist)
        ("i" my/apple-music-current-track-info)
        ("q" nil "quit"))
      (global-set-key (kbd "C-c M") #'my/hydra-apple-music/body)))

  ;; Meow leader: <leader> m -> Apple Music hydra
  (with-eval-after-load 'meow
    (with-eval-after-load 'hydra
      (when (fboundp 'meow-leader-define-key)
        (meow-leader-define-key
         '("M" . my/hydra-apple-music/body)))))

  (provide 'user)
  ;;; user.el ends here
#+end_src

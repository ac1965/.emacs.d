# -*- mode: org; coding: utf-8; -*-

#+TITLE: Modern Emacs Configuration
#+AUTHOR: YAMASHITA, Takao
#+EMAIL: tjy1965@gmail.com
#+LANGUAGE: en
#+OPTIONS: toc:3 num:t
#+STARTUP: overview
#+PROPERTY: header-args :results silent :exports code :mkdirp yes :padline no :tangle no
#+PROPERTY: header-args:emacs-lisp :lexical t :noweb no-export

# Tangling policy (for documentation only; block-level :tangle always takes precedence)
# - early-init.el  : Startup performance & low-level toggles (GC, file-name-handler, native-comp)
# - init.el        : Package bootstrap + leaf configuration entry
# - lisp/
# ├─ general.el    : Miscellaneous (uncategorized or general settings)
# ├─ ui.el         : Appearance and theme-related configuration
# ├─ completion.el : Completion and minibuffer (vertico, orderless, marginalia, etc.)
# ├─ org.el        : Org mode (org, org-roam, org-agenda)
# ├─ lsp.el        : LSP / programming support (eglot, lsp-mode, treesit, flycheck, etc.)
# └─ tools.el      : Utility tools (vterm, magit, git-gutter, etc.)
# - user.el        : Personal, machine-specific overrides (optional)
# - Makefile       : Reproducible tangle/clean/compile pipeline

* Introduction
:PROPERTIES:
  :CUSTOM_ID: introduction
  :END:

A modern, literate Emacs configuration using Org Mode's Babel format, emphasizing performance, language server integration, AI assistance, and productivity.

** Features
:PROPERTIES:
   :CUSTOM_ID: features
   :END:

- *Performance & Native Compilation* - JIT compilation with optimized settings, intelligent GC via GCMH, and async compilation
- *Language Server Protocol* - Configurable LSP backends (Eglot/LSP-Mode) with automatic server management
- *AI Integration* - Aidermacs with vterm backend supporting GPT-4, Claude 3.5 Sonnet, and OpenRouter APIs
- *Modern UI & Editing* - Tree-Sitter syntax highlighting, ef-themes, Nerd Icons, and advanced completion
- *Productivity Tools* - GTD-style Org workflow, Org-roam networked notes, and modern styling

[[file:demo.png]]

** Installation
:PROPERTIES:
   :CUSTOM_ID: installation
   :END:

*** Prerequisites
- Emacs 30.0+ with native compilation support
- Git, make, gcc (10+), libgccjit
- Optional: ripgrep, aspell, pass, Homebrew (macOS)

*** Building Emacs

Use the provided build script:
[[https://github.com/ac1965/dotfiles/blob/master/.local/bin/build-emacs.sh][build-emacs.sh]]

#+begin_src shell
build-emacs.sh --native-compilation
#+end_src

*** Quick Start

1. Clone the repository:
   #+begin_src shell
   git clone --depth 1 https://github.com/ac1965/.emacs.d ~/.emacs.d
   #+end_src

2. Tangle configuration:
   #+begin_src shell
   cd ~/.emacs.d/
   EMACS=/Applications/Emacs.app/Contents/MacOS/Emacs make
   #+end_src

*** Makefile

#+begin_src text :tangle Makefile :comments no
  # Makefile for Emacs config build
  # Emacs 30+, Org Babel (tangle), byte-compilation
  # Safe, minimal, maintainable

  # Variables
  EMACS       ?= emacs
  ORG         ?= README.org
  LISPDIR     ?= lisp
  PERSONALDIR ?= personal
  ELFILES     = $(wildcard $(LISPDIR)/*.el) $(wildcard $(PERSONALDIR)/*.el)
  ELCFILES    = $(ELFILES:.el=.elc)

  # Default target
  all: tangle

  # Tangle all .el files from README.org
  tangle: $(ORG)
  	$(EMACS) --batch -Q \
  		--eval "(require 'org)" \
  		--eval "(org-babel-tangle-file \"$(ORG)\")"

  # Byte-compile all tangled .el files
  compile: tangle $(ELCFILES)

  $(LISPDIR)/%.elc: $(LISPDIR)/%.el
  	$(EMACS) --batch -Q \
  		--eval "(byte-compile-file \"$<\")"

  $(PERSONALDIR)/%.elc: $(PERSONALDIR)/%.el
  	$(EMACS) --batch -Q \
  		--eval "(byte-compile-file \"$<\")"

  # Remove compilation artifacts
  clean:
  	rm -f $(LISPDIR)/*.elc $(PERSONALDIR)/*.elc

  .PHONY: all tangle compile clean
#+end_src

*** System Information

**** Apple Silicon (Primary)
- GNU Emacs *31.0.50*

|Property|Value|
|--------|-----|
|Commit|65fb5798960201d247063f38c460a69253a00264|
|Branch|master|
|System|aarch64-apple-darwin24.6.0|
|Date|2025-09-20 18:02:32 (JST)|
|Patch|N/A ns-inline.patch|
|Features|ACL DBUS GLIB GNUTLS LCMS2 LIBXML2 MODULES NATIVE_COMP NOTIFY KQUEUE NS PDUMPER PNG RSVG SQLITE3 THREADS TOOLKIT_SCROLL_BARS TREE_SITTER WEBP XIM ZLIB|
|Options|--with-native-compilation --with-gnutls=ifavailable --with-json --with-modules --with-tree-sitter --with-xml2 --with-librsvg --with-mailutils --with-native-image-api --with-ns CPPFLAGS=-I/opt/homebrew/opt/llvm/include 'LDFLAGS=-L/opt/homebrew/opt/llvm/lib -L/opt/homebrew/opt/llvm/lib/c++ -Wl,-rpath,/opt/homebrew/opt/llvm/lib/c++'|

**** Intel (Secondary)
- GNU Emacs *31.0.50*

|Property|Value|
|--------|-----|
|Commit|aa12cebaa684d7b3ea7e131666d33bcc71b45625|
|Branch|master|
|System|x86_64-apple-darwin24.4.0|
|Date|2025-03-23 10:35:38 (JST)|
|Patch|N/A ns-inline.patch|
|Features|ACL DBUS GIF GLIB GMP GNUTLS JPEG LCMS2 LIBXML2 MODULES NATIVE_COMP NOTIFY KQUEUE NS PDUMPER PNG RSVG SQLITE3 THREADS TIFF TOOLKIT_SCROLL_BARS TREE_SITTER WEBP XIM XWIDGETS ZLIB|
|Options|--with-native-compilation --with-gnutls=ifavailable --with-json --with-modules --with-tree-sitter --with-xml2 --with-xwidgets --with-librsvg CFLAGS=-I/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include CPPFLAGS=-I/usr/local/opt/llvm/include 'LDFLAGS=-L/usr/local/opt/llvm/lib -L/usr/local/opt/llvm/lib/c++ -Wl,-rpath,/usr/local/opt/llvm/lib/c++'|
* Configuration Files
:PROPERTIES:
:CUSTOM_ID: structure
:END:

This Emacs configuration is modular and organized for **Emacs 30+**.

- `early-init.el` → startup optimizations & directories
- `init.el` → package bootstrap & base settings
- `lisp/` → modular configs (general, ui, completion, org, lsp, tools)
- `personal/` → user-specific settings

** Core Setup
:PROPERTIES:
:CUSTOM_ID: core
:END:

*** early-init.el
#+begin_src emacs-lisp :tangle early-init.el
  ;;; early-init.el --- Early initialization -*- lexical-binding: t; -*-

  ;; Copyright (c) 2021-2025 YAMASHITA, Takao
  ;; Licensed under the GNU GPL v3 or later.

  ;;; Commentary:
  ;; Minimal early startup optimizations and directory setup
  ;; for Emacs 30+ with straight.el + leaf.el

  ;;; Code:

  (setopt package-enable-at-startup nil)

  ;; Temporarily relax GC during startup; restore on first frame
  (defvar my:orig:gc-cons-threshold gc-cons-threshold)
  (defvar my:orig:gc-cons-percentage gc-cons-percentage)
  (setopt gc-cons-threshold most-positive-fixnum
  	gc-cons-percentage 0.6) ; aggressive only at startup
  (add-hook 'emacs-startup-hook
  	  (lambda ()
  	    (setopt gc-cons-threshold my:orig:gc-cons-threshold
  		    gc-cons-percentage my:orig:gc-cons-percentage)))

  ;; Disable costly file handlers during load; restore after init
  (defvar my:orig:file-name-handler-alist file-name-handler-alist)
  (setq file-name-handler-alist nil)
  (add-hook 'emacs-startup-hook
  	  (lambda ()
  	    (setq file-name-handler-alist my:orig:file-name-handler-alist)))

  ;; Utility Functions
  (defun my/ensure-directory-exists (dir)
    "Ensure DIR exists, creating if necessary."
    (unless (file-directory-p dir)
      (condition-case err
          (make-directory dir t)
        (error (warn "Failed to create directory: %s - %s" dir err)))))

  (defvar my:d (or (and load-file-name
                        (file-name-directory (file-chase-links load-file-name)))
                   user-emacs-directory))

  (defvar my:d:cache   (expand-file-name ".cache/"       my:d))
  (defvar my:d:etc     (expand-file-name ".etc/"         my:d))
  (defvar my:d:var     (expand-file-name ".var/"         my:d))
  (defvar my:d:lisp    (expand-file-name "lisp/"         my:d))
  (defvar my:d:eln     (expand-file-name "eln-cache/"    my:d:cache))
  (defvar my:d:treesit (expand-file-name "tree-sitter/"  my:d:var))
  (defvar my:d:treesit-build (expand-file-name "treesit-build/" my:d:cache))
  (defvar my:f:custom  (expand-file-name "custom.el"     my:d:etc))

  (dolist (dir (list my:d:cache my:d:etc my:d:var my:d:lisp
                     my:d:eln my:d:treesit my:d:treesit-build))
    (my/ensure-directory-exists dir))

  (add-to-list 'load-path my:d:lisp)

  (when (featurep 'native-compile)
    (setopt native-comp-async-report-warnings-errors 'silent)
    (add-to-list 'native-comp-eln-load-path my:d:eln))

  (when (eq system-type 'darwin)
    (let ((brew-libgccjit
           (expand-file-name "lib/gcc/current"
                             (string-trim (shell-command-to-string "brew --prefix")))))
      (when (file-directory-p brew-libgccjit)
        (setenv "LIBRARY_PATH"
                (concat brew-libgccjit
                        (when-let* ((orig (getenv "LIBRARY_PATH")))
                          (concat ":" orig)))))))

  ;; Disable heavyweight UI toggles *after* startup to avoid flicker
  (add-hook 'emacs-startup-hook
            (lambda ()
              (dolist (mode '(menu-bar-mode tool-bar-mode scroll-bar-mode))
                (when (fboundp mode)
                  (funcall mode -1)))))

  (setopt straight-base-dir my:d:cache
          straight-use-package-by-default t
          straight-profiles '((nil . "default.el")))


  (provide 'early-init)
  ;;; early-init.el ends here
#+end_src

*** init.el
#+begin_src emacs-lisp :tangle init.el
  ;;; init.el --- Main initialization -*- lexical-binding: t; -*-

  ;; Copyright (c) 2021-2025 YAMASHITA, Takao <tjy1965@gmail.com>
  ;; Licensed under the GNU General Public License version 3 or later.

  ;; $Lastupdate: 2025/09/28 09:07:02 $

  ;;; Commentary:
  ;; It includes package management, user-specific settings, and modular design.

  ;;; Code:

  ;; straight.el bootstrap (package.el is disabled in early-init.el)
  (defvar bootstrap-version)
  (let ((bootstrap-file
         (expand-file-name
          "straight/repos/straight.el/bootstrap.el"
          (or (bound-and-true-p straight-base-dir)
              user-emacs-directory)))
        (bootstrap-version 7))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
          (url-retrieve-synchronously
           "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
           'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))

  ;;;; Integrate straight.el with leaf
  (dolist (pkg '(leaf leaf-keywords leaf-convert blackout org))
    (straight-use-package pkg))
  (require 'org)

  (eval-when-compile
    (require 'leaf)
    (require 'leaf-keywords))
  (leaf-keywords-init)

  ;;; Define a customization group for all personal settings
  ;;; All `defcustom` variables belonging to this group can be
  ;;; managed together via: M-x customize-group RET my RET
  (defgroup my nil
    "User customizations."
    :group 'convenience)

  ;;; Choose which LSP client Emacs should use
  ;;; - Default: `eglot` (lightweight, built into Emacs 29+)
  ;;; - Alternative: `lsp` (lsp-mode, feature-rich but heavier)
  ;;; This variable is used in init.el / lsp.el with :when
  ;;; conditions to load the appropriate client.
  (defcustom my:use-lsp 'eglot
    "Select which LSP client to use. Valid values: 'eglot or 'lsp."
    :type '(choice (const :tag "Eglot" eglot)
                   (const :tag "lsp-mode" lsp))
    :group 'my)

  ;; Larger pipe buffer for LSP/rg/git; restore after startup.
  ;; Note: This belongs in init.el (not early-init.el), since
  ;; external processes (LSP, rg, git) are launched *after* init.
  (defvar my:orig:read-process-output-max (and (boundp 'read-process-output-max)
  					     read-process-output-max))
  (when (boundp 'read-process-output-max)
    (setq read-process-output-max (* 4 1024 1024))) ; 4 MiB during init
  (add-hook 'emacs-startup-hook
  	  (lambda ()
  	    (when (boundp 'read-process-output-max)
  	      (setq read-process-output-max my:orig:read-process-output-max))))

  ;;;; Base settings
  (leaf emacs
    :straight nil
    :init
    ;; Disable disruptive default key bindings
    (dolist (k '("C-z" "C-x C-z" "M-z" "M-m" "M-/"))
      (keymap-global-unset k))
    (when (fboundp 'cape-dabbrev)
      (keymap-global-set "M-/" #'cape-dabbrev))

    ;; UI toggles are in early-init to avoid flicker.
    (pixel-scroll-precision-mode)

    ;; Basic behavior
    (setopt inhibit-startup-screen  t
            initial-scratch-message nil
            use-short-answers       t
            create-lockfiles        nil
            make-backup-files       t
            delete-old-versions     t
            version-control         t
            idle-update-delay       0.2
            ring-bell-function      #'ignore
            display-line-numbers-type 'relative
            auto-save-default       t
            auto-save-visited-interval 2)
    (electric-pair-mode 1)
    (add-hook 'prog-mode-hook #'display-line-numbers-mode)
    (auto-save-visited-mode 1)

    (leaf my:modifier
      :config
      (cond
       ;; macOS
       ((eq system-type 'darwin)
        (setq mac-option-modifier 'meta   ;; Option → Meta
  	    mac-command-modifier 'super     ;; Command → Super
  	    mac-control-modifier 'control   ;; Control → Control
  	    mac-function-modifier 'hyper))  ;; Fn → Hyper
       ;; Windows
       ((eq system-type 'windows-nt)
        (setq w32-lwindow-modifier 'super ;; Left Win → Super
  	    w32-rwindow-modifier 'super     ;; Right Win → Super
  	    w32-apps-modifier   'hyper))    ;; Apps/Menu → Hyper
       ;; Linux
       ((eq system-type 'gnu/linux)
        ;; Linux: handled at XKB/DE level
        (setq my:os "linux")))))

  ;;;; No-Littering
  (leaf no-littering
    :straight t
    :require t
    :init
    ;; Set directories before package loads things that compute paths.
    (setq no-littering-etc-directory my:d:etc
          no-littering-var-directory my:d:var))

  ;;;; macOS integration

  ;; 1) Import shell environment for GUI Emacs
  (leaf exec-path-from-shell
    :straight t
    :if (memq window-system '(mac ns))
    :init
    (defvar my:shell-env-vars
      '("PATH" "LANG" "PASSWORD_STORE_DIR" "GPG_KEY_ID"
        "OPENROUTER_API_KEY" "OPENAI_API_KEY"))
    :config
    (setq exec-path-from-shell-check-startup-files nil
          exec-path-from-shell-arguments '("-l" "-i")
          exec-path-from-shell-variables my:shell-env-vars)
    (exec-path-from-shell-initialize))

  ;; 2) Fallback PATH for CLI/edge cases
  ;; Append typical Homebrew bins on macOS if missing
  (when (eq system-type 'darwin)
    (dolist (p '("/opt/homebrew/bin" "/usr/local/bin"))
      (when (and (file-directory-p p) (not (member p exec-path)))
        (add-to-list 'exec-path p)
        (setenv "PATH" (concat p ":" (getenv "PATH"))))))

  ;; 3) Dired + GNU ls (gls) integration
  (leaf dired
    :custom ((dired-listing-switches . "-aBhl --group-directories-first"))
    :config
    (when (and (eq system-type 'darwin) (executable-find "gls"))
      (setq insert-directory-program "gls"
            dired-use-ls-dired t)))

  ;;;; Garbage Collection Magic Hack
  (leaf gcmh
    :straight t
    :hook (emacs-startup . gcmh-mode)
    :init
    ;; Safe defaults: gentle collection
    (setq gcmh-idle-delay 2
          gcmh-high-cons-threshold (* 64 1024 1024)))

  ;;;; Hydra
  (leaf hydra
    :straight t
    :commands (defhydra))

  ;; Load user customizations from cache/etc; keep init clean
  (setq custom-file my:f:custom)
  (when (file-readable-p custom-file)
    (load custom-file nil 'nomessage))

  ;;;; User-specific config
  (setq user-specific-config (concat my:d "personal/" user-login-name ".el"))
  (if (file-exists-p user-specific-config) (load user-specific-config))

  ;;;; Modularized config loading
  (let* ((root (cond
                ((and (boundp 'my:d) (stringp my:d) (file-directory-p my:d))
                 (file-name-as-directory my:d))
                (t (file-name-as-directory user-emacs-directory))))
         (lisp-dir (expand-file-name "lisp" root)))
    (unless (file-directory-p lisp-dir)
      (make-directory lisp-dir t))

    ;; Add lisp directory to load-path, but not root
    (dolist (p (list (file-name-as-directory user-emacs-directory)
                     (directory-file-name user-emacs-directory)))
      (setq load-path (delete p load-path)))
    (add-to-list 'load-path lisp-dir)

    ;; Load modularized files instead of monolithic README.el
    (dolist (file '("general" "ui" "completion" "org" "lsp" "tools"))
      (let ((path (expand-file-name (format "%s.el" file) lisp-dir)))
        (when (file-exists-p path)
          (load path nil 'nomessage)))))

  ;; Report startup time and GC count after init (after epa-file etc.)
  (add-hook 'after-init-hook
            (lambda ()
              (run-with-idle-timer
               0 nil
               (lambda ()
                 (let ((elapsed (float-time (time-subtract after-init-time before-init-time)))
                       (gc-count gcs-done))
                   (message "Emacs ready in %.2f seconds with %d GCs." elapsed gc-count))))))



  (provide 'init)
  ;;; init.el ends here
#+end_src

** Modular Configuration
:PROPERTIES:
:CUSTOM_ID: modules
:END:

All modular configs are stored under `lisp/`.
Each file has a clear, single responsibility and can be maintained independently.
This modular design improves maintainability, readability, and startup performance.

*** general.el
:PROPERTIES:
:CUSTOM_ID: general
:END:

This module contains **general-purpose utilities and global settings** that do not fit into other categories.
It centralizes cross-cutting concerns such as **Hydra menus, authentication, TRAMP, backups, and keybindings**.

- **Hydra Menus**: Provides transient menus for text scaling and Apple Music.
- **Authentication**: Secure management of credentials with `auth-source`, `password-store`, and GPG integration.
- **TRAMP**: Clean remote editing setup with per-user cache locations.
- **Backups**: Redirect auto-save and backup files into clean directories (`.var/`).
- **Key Bindings**: Defines global navigation, editing, and Org Mode shortcuts in one place.
- **Winner Mode**: Window configuration undo/redo.

#+begin_src emacs-lisp :tangle lisp/general.el
  ;;; General Setup -*- lexical-binding: t; -*-

  ;; Copyright (c) 2021-2025 YAMASHITA, Takao
  ;; Licensed under the GNU General Public License version 3 or later.

  ;;; Code:

  (eval-when-compile (require 'leaf))
  ;; -----------------------------------------------------------------------------
  ;; Hydra for Text Scaling
  (leaf hydra
    :straight t
    :config
    (defhydra hydra-text-scale (:hint nil :color red)
      "
  ^Text Scaling^
  [_+_] Increase   [_-_] Decrease   [_0_] Reset   [_q_] Quit
  "
      ("+" text-scale-increase)
      ("-" text-scale-decrease)
      ("0" (text-scale-set 0) :color blue)
      ("q" nil "quit" :color blue)))

  ;; -----------------------------------------------------------------------------
  ;;; Common Key Bindings

  ;; Centralized keybindings with proper load order.
  (leaf my:keys
    :doc "Centralized keybindings via `leaf-keys`, ordered by map lifetime."
    :emacs>= 30.0
    :bind
    (;; Global key bindings
     ("<f1>"    . help)
     ("<f5>"    . my/revert-buffer-quick)
     ("<f8>"    . treemacs)
     ("C-h"     . backward-delete-char)

     ;; Undo/redo
     ("C-/"     . undo-fu-only-undo)
     ("C-?"     . undo-fu-only-redo)

     ;; Text scaling
     ("C-c z"   . hydra-text-scale/body)

     ;; Buffer navigation
     ("C-c b"   . consult-buffer)
     ("M-n"     . forward-paragraph)
     ("M-p"     . backward-paragraph)
     ("s-<down>". end-of-buffer)
     ("s-<up>"  . beginning-of-buffer)
     ("s-<right>" . next-buffer)
     ("s-<left>"  . previous-buffer)

     ;; Window management
     ("C-."     . other-window)
     ("C-c 2"   . my/toggle-window-split)
     ("s-."     . ace-window)
     ("s-w"     . ace-swap-window)
     ("s-d"     . delete-frame)
     ("s-m"     . (lambda () (interactive)
                    (let ((frame (make-frame)))
                      (with-selected-frame frame
                        (switch-to-buffer (generate-new-buffer "untitled"))))))

     ;; File operations
     ("s-j"     . find-file-other-window)
     ("s-o"     . find-file-other-frame)
     ("C-c o"   . find-file)
     ("C-c v"   . find-file-read-only)
     ("C-c V"   . view-file-other-window)
     ("C-c k"   . kill-buffer-and-window)

     ;; Search
     ("C-s"     . consult-line)
     ("C-c r"   . consult-ripgrep)

     ;; Text manipulation
     ("C-="     . er/expand-region)
     ("C-c M-a" . align-regexp)
     ("C-c ;"   . comment-or-uncomment-region)
     ("C-c l"   . display-line-numbers-mode)

     ;; Org mode & Roam
     ("C-c d a" . org-agenda)
     ("C-c d c" . org-capture)
     ("C-c d i" . org-roam-node-insert)
     ("C-c d f" . org-roam-node-find)

     ;; Aider
     ("C-c a a" . aidermacs-transient-menu)

     ;; EWW (global bindings for browsing)
     ("C-c w w" . eww)                ;; Open EWW (prompt URL/search)
     ("C-c w s" . eww-search)         ;; Search + start isearch
     ("C-c w o" . eww-open-file)      ;; Open local HTML
     ("C-c w b" . eww-list-bookmarks) ;; Bookmarks
     ("C-c w r" . eww-readable)       ;; Readable mode
     ("C-c w u" . my/eww-toggle-images) ;; Toggle Image

     ;; Misc
     ("C-x g"   . magit-status)
     ("s-r"     . restart-emacs)
     ("M-x"     . execute-extended-command))

    :init
    ;; Enable directional window navigation with Shift + arrow keys.
    (windmove-default-keybindings))

  ;; -----------------------------------------------------------------------------
  ;; Dired enhancements
  (leaf dired
    :bind (:dired-mode-map
           ("i"   . dired-subtree-insert)
           ("TAB" . dired-subtree-toggle)
           ("z"   . my/dired-view-file-other-window)))

  ;; -----------------------------------------------------------------------------
  ;; Winner mode
  (leaf winner
    :straight t
    :global-minor-mode t
    :bind (("M-[" . winner-undo)
           ("M-]" . winner-redo)))
  ;; -----------------------------------------------------------------------------
    ;;; Basic Editor Configuration

  ;; Display relative line numbers in programming and text modes
  (leaf display-line-numbers
    :hook ((prog-mode text-mode) . display-line-numbers-mode)
    :init (setq display-line-numbers-type 'relative))

  ;; -----------------------------------------------------------------------------
    ;;; File Management Configuration

  ;; TRAMP setup for remote file editing
  (leaf tramp
    :pre-setq
    `((tramp-persistency-file-name . ,(concat no-littering-var-directory "tramp"))
      (tramp-auto-save-directory . ,(concat no-littering-var-directory "tramp-autosave")))
    :custom
    `((tramp-default-method . "scp")
      (tramp-verbose . 3)))

  ;; Auto-save and backup configuration
  (leaf files
    :custom
    `((auto-save-file-name-transforms . '((".*" ,(concat no-littering-var-directory "backup") t)))
      (auto-save-list-file-prefix . ,(concat no-littering-var-directory "backup/.saves-"))
      (backup-directory-alist . '(("." . ,(concat no-littering-var-directory "backup"))))
      (delete-old-versions . t)))

  ;; -----------------------------------------------------------------------------
    ;;; Authentication Management
  ;; Secure credential management using `auth-source`, `pass`, and GPG.

  (defvar my:d:password-store
    (or (getenv "PASSWORD_STORE_DIR")
        (concat no-littering-var-directory "password-store/"))
    "Path to the password store.")

  (defun my/auth-check-env ()
    "Validate authentication environment and warn if misconfigured."
    (unless (getenv "GPG_KEY_ID")
      (display-warning 'auth "GPG_KEY_ID is not set." :level 'debug))
    (unless (file-directory-p my:d:password-store)
      (display-warning 'auth
                       (format "Password store directory does not exist: %s"
                               my:d:password-store)
                       :level 'warning)))

  (leaf *authentication
    :init
    (my/auth-check-env)

    ;; GPG & auth-source
    (leaf epa-file
      :commands (epa-file-enable)
      :init
      ;; Configure pinentry mode safely before library load
      (setq epa-pinentry-mode
            (if (getenv "USE_GPG_LOOPBACK") 'loopback 'default))
      ;; Enable encrypted file support after startup; avoids init-time I/O
      (add-hook 'emacs-startup-hook #'epa-file-enable))

    (leaf auth-source
      :init
      ;; Don't force load; apply only when the library is actually loaded.
      (with-eval-after-load 'auth-source
        (let ((key (getenv "GPG_KEY_ID")))
    	(if key
              (setq auth-source-gpg-encrypt-to key)
    	  (display-warning 'auth-source
    			   "GPG_KEY_ID is not set. Authentication backends may be limited.")))))

    ;; Password-store and auth-source-pass
    (leaf password-store :straight t)
    (leaf auth-source-pass
      :straight t
      :commands (auth-source-pass-enable)
      :hook (emacs-startup-hook . (lambda ()
    				  (when (executable-find "pass")
    				    (auth-source-pass-enable)))))

    ;; Secure plstore
    (leaf plstore
      :init
      ;; Set options only when plstore is loaded; avoids eager require.
      (with-eval-after-load 'plstore
        (setq plstore-secret-keys 'silent
              plstore-encrypt-to (getenv "GPG_KEY_ID")))))
  (provide 'general)
  ;;; etc.el ends here
#+end_src

*** completion.el
:PROPERTIES:
:CUSTOM_ID: completion
:END:

This module configures a **modern completion stack** for Emacs 30+.
It provides a fast, flexible, and extensible completion experience by combining multiple frameworks.

- **Prescient**: Persistent history-based sorting and filtering.
- **Vertico + Posframe**: Vertical completion UI with floating frame support.
- **Marginalia**: Annotations for candidates.
- **Consult**: Advanced search and navigation commands.
- **Embark**: Context-sensitive actions and live collect.
- **Embark-Consult**: Integrated previews and context menus.
- **Corfu + Kind-icon**: Popup completions with icons.
- **Cape**: Extra completion sources (file, dabbrev, keyword).
- **Orderless**: Flexible and fuzzy matching styles.
- **Nerd Icons**: Icons for ibuffer and marginalia completions.

#+begin_src emacs-lisp :tangle lisp/completion.el
  ;;; Completion Setup -*- lexical-binding: t; -*-

  ;; Copyright (c) 2021-2025 YAMASHITA, Takao
  ;; Licensed under the GNU General Public License version 3 or later.

  ;;; Completion Frameworks
  ;; - Configures a modern completion stack: Vertico, Corfu, Orderless, etc.

  ;;; Code:

  (eval-when-compile (require 'leaf))
  (leaf completion-settings
    :init
    ;; Prescient: persistent sorting & filtering
    (leaf prescient
      :straight t
      :custom ((prescient-aggressive-file-save . t))
      :global-minor-mode prescient-persist-mode)

    ;; Vertico: vertical completion UI
    (leaf posframe :straight t)  ;; Ensure dependency is installed
    (leaf vertico
      :straight t
      :global-minor-mode vertico-mode
      :custom ((vertico-count . 15))
      :config
      (leaf vertico-posframe
        :straight t
        :if (display-graphic-p)
        :after vertico
        :require posframe
        :custom ((vertico-posframe-border-width . 2)
                 (vertico-posframe-parameters . '((left-fringe . 4) (right-fringe . 4))))
        :config (vertico-posframe-mode 1)))

    (leaf vertico-prescient
      :straight t
      :after (vertico prescient)
      :global-minor-mode t)

    ;; Marginalia: add annotations to completion candidates
    (leaf marginalia
      :straight t
      :global-minor-mode marginalia-mode)

    ;; Consult: powerful search & navigation
    (leaf consult
      :straight t
      :custom
      ((xref-show-xrefs-function . #'consult-xref)
       (xref-show-definitions-function . #'consult-xref)))

    ;; Embark: context-sensitive actions
    (leaf embark
      :straight t
      :custom
      ((prefix-help-command . #'embark-prefix-help-command)
       (embark-collect-live-update . t))
      :hook (embark-collect-mode . embark-collect-live-mode)
      :init
      ;; Enable icons if available
      (with-eval-after-load 'all-the-icons
        (setq embark-indicators
              '(embark-minimal-indicator
                embark-highlight-indicator
                embark-isearch-highlight-indicator))))

    ;; Integration: Embark + Consult
    (leaf embark-consult
      :straight t
      :after (embark consult)
      :hook (embark-collect-mode . consult-preview-at-point-mode)
      :custom (consult-preview-key . "M-."))

    ;; Embark keybindings inside Vertico
    (defun my/setup-embark-vertico-directory ()
      "Integrate embark commands inside Vertico minibuffer."
      (when (and (boundp 'vertico-map) (require 'embark nil t))
        (define-key vertico-map (kbd "C-.") #'embark-act)
        (define-key vertico-map (kbd "C-;") #'embark-dwim)))

    (add-hook 'vertico-mode-hook #'my/setup-embark-vertico-directory)

    ;; Corfu: popup completions
    (leaf corfu
      :straight t
      :init
      (global-corfu-mode)
      :custom
      ((corfu-auto . t)
       (corfu-auto-delay . 0)
       (corfu-auto-prefix . 2)
       (corfu-cycle . t))
      :config
      ;; Add icons to Corfu completions
      (leaf kind-icon
        :straight t
        :after corfu
        :custom
        ((kind-icon-default-face . 'corfu-default))
        :config
        (add-to-list 'corfu-margin-formatters #'kind-icon-margin-formatter)))

    ;; Cape: extra completion sources for Corfu
    (leaf cape
      :straight t
      :init
      (mapc (lambda (fn) (add-to-list 'completion-at-point-functions fn))
            '(cape-file cape-dabbrev cape-keyword)))

    ;; Orderless: fuzzy matching
    (leaf orderless
      :straight t
      :custom
      ((completion-styles . '(orderless basic flex))
       (completion-category-defaults . nil)
       (completion-category-overrides .
  				    '((file    (styles . (partial-completion)))
  				      (symbol  (styles . (flex)))
  				      (project (styles . (basic)))
  				      (command (styles . (orderless)))))))

    ;; nerd-icons-{ibuffer,completion}
    (leaf nerd-icons-ibuffer
      :straight t
      :hook (ibuffer-mode-hook . nerd-icons-ibuffer-mode))
    (leaf nerd-icons-completion
      :straight t
      :hook (marginalia-mode-hook . nerd-icons-completion-marginalia-setup)
      :config
      (nerd-icons-completion-mode)))
  (provide 'completion)
  ;;; completion.el ends here
#+end_src

*** lsp.el
:PROPERTIES:
:CUSTOM_ID: lsp
:END:

This module provides **Language Server Protocol (LSP) support and development tools**.
It enables intelligent code assistance, AI integration, build system support, and containerized workflows.

- **LSP Clients**: Switch between lightweight `eglot` or feature-rich `lsp-mode` via `my:use-lsp`.
- **Process Optimization**: Utility to temporarily enlarge `read-process-output-max` for heavy I/O.
- **Aidermacs**: AI-assisted coding with OpenRouter or OpenAI backends.
- **Vterm**: Terminal emulator integration.
- **Makefile Support**: Enhanced `make-mode` with compile commands and ANSI color.
- **Docker & TRAMP**: Dockerfile editing, container management, and container-based TRAMP connections.
- **Templates**: Quick snippet insertion for Dockerfiles with Tempel.

#+begin_src emacs-lisp :tangle lisp/lsp.el
  ;;; --- -*- lexical-binding: t; -*-

  ;; Copyright (c) 2021-2025 YAMASHITA, Takao
  ;; Licensed under the GNU General Public License version 3 or later.

  ;;; Code:

  ;;; LSP Configuration (Eglot or LSP-Mode)
  ;; Provides Language Server Protocol (LSP) support for intelligent code features.
  ;; `my:use-lsp` determines which backend to use:
  ;; - `eglot` (default, lightweight)
  ;; - `lsp`   (LSP-Mode, feature-rich)

  (eval-when-compile (require 'leaf))
  ;; -----------------------------------------------------------------------------
  ;; Eglot: lightweight LSP client, enabled only if `my:use-lsp' is 'eglot
  (leaf eglot
    :when (eq my:use-lsp 'eglot)
    :commands (eglot eglot-ensure) ; autoload only these
    :hook ((prog-mode . (lambda ()
                          ;; Enable only when a server contact is known
                          (when (eglot--guess-contact) (eglot-ensure)))))
    :custom
    ((eglot-autoreconnect . t))
    :config
    ;; Per-language hooks
    (add-hook 'python-mode-hook #'eglot-ensure)     ; Python
    (add-hook 'rust-mode-hook   #'eglot-ensure)     ; Rust
    (add-hook 'go-mode-hook     #'eglot-ensure)     ; Go
    (add-hook 'js-mode-hook     #'eglot-ensure)     ; JavaScript
    (add-hook 'typescript-mode-hook #'eglot-ensure)) ; TypeScript

  ;; lsp-mode: heavier alternative, loaded only if `my:use-lsp' is 'lsp
  (leaf lsp-mode
    :when (eq my:use-lsp 'lsp)
    :commands (lsp lsp-deferred) ; autoload entry points
    :custom
    ((lsp-keymap-prefix . "C-c l")) ; unified prefix
    :hook ((python-mode-hook . lsp-deferred)     ; Python
           (rust-mode-hook   . lsp-deferred)     ; Rust
           (go-mode-hook     . lsp-deferred)     ; Go
           (js-mode-hook     . lsp-deferred)     ; JavaScript
           (typescript-mode-hook . lsp-deferred))) ; TypeScript

  ;; Utility: temporarily enlarge `read-process-output-max`
  ;; Useful for bandwidth-heavy subprocesses like LSP servers or ripgrep.
  ;; Example:
  ;;   (my/with-larger-rpom (* 8 1024 1024)
  ;;     (lambda () (eglot-ensure)))
  ;;
  (defun my/with-larger-rpom (size-bytes fn)
    "Call FN with `read-process-output-max' temporarily set to SIZE-BYTES.
  Restores the original value afterwards, even if FN signals an error."
    (let* ((sym 'read-process-output-max)
           (orig (and (boundp sym) (symbol-value sym))))
      ;; Set temporary value only if the variable exists
      (when (boundp sym) (set sym size-bytes))
      (unwind-protect
          (funcall fn)
        ;; Always restore original value
        (when (boundp sym) (set sym orig)))))

  ;; -----------------------------------------------------------------------------
  ;; Aidermacs configuration

  (leaf aidermacs
    :straight t
    :init
    ;; Prefer OpenRouter when available; fallback to OpenAI.
    (cond
     ((getenv "OPENROUTER_API_KEY")
      (setenv "OPENAI_API_BASE" "https://openrouter.ai/api/v1")
      (setenv "OPENAI_API_KEY"  (getenv "OPENROUTER_API_KEY"))
      (setopt aidermacs-default-model "openrouter/anthropic/claude-3.5-sonnet"))
     ((getenv "OPENAI_API_KEY")
      (setenv "OPENAI_API_BASE" "https://api.openai.com/v1")
      (setopt aidermacs-default-model "gpt-4o-mini"))
     (t
      (display-warning 'aidermacs
                       "No API keys set. Set OPENROUTER_API_KEY or OPENAI_API_KEY.")))
    (setopt aidermacs-retry-attempts 3
            aidermacs-retry-delay   2.0
            aidermacs-backend       'vterm
            aidermacs-vterm-use-theme-colors nil))

  ;; -----------------------------------------------------------------------------
  ;;; Vterm

  (leaf vterm :straight t)

  ;; --- Makefile productivity --------------------------------------------------
  (leaf make-mode
    :doc "Built-in makefile-mode with strict tabs and better compile UX."
    :mode (("\\`Makefile\\'" . makefile-gmake-mode)
           ("\\`GNUmakefile\\'" . makefile-gmake-mode)
           ("\\`makefile\\'" . makefile-gmake-mode))
    :hook ((makefile-mode . (lambda ()
                              ;; Makefiles require hard tabs.
                              (setq-local indent-tabs-mode t)
                              (setq-local tab-width 8)
                              ;; Show trailing whitespace to catch mistakes.
                              (setq-local show-trailing-whitespace t))))
    :config
    ;; Compilation quality-of-life.
    (leaf compile
      :bind (("C-c m c" . compile)            ; run compile
             ("C-c m r" . recompile)          ; rerun last
             ("C-c m p" . project-compile))   ; project-aware
      :custom
      ;; Scroll compilation output automatically until first error.
      ((compilation-scroll-output . t)
       ;; Keep previous compilation buffer position.
       (compilation-skip-threshold . 2))
      :init
      ;; Prefer `make -k` when a Makefile is present; do not clobber globally.
      (defun my/set-make-compile-command ()
        "Use `make -k` by default when in a Makefile/project."
        (when (or (derived-mode-p 'makefile-mode)
                  (locate-dominating-file default-directory "Makefile")
                  (locate-dominating-file default-directory "GNUmakefile"))
          (setq-local compile-command "make -k")))
      (add-hook 'after-change-major-mode-hook #'my/set-make-compile-command))
    ;; Colorize ANSI escapes in *Compilation* buffer.
    (leaf ansi-color
      :hook (compilation-filter . (lambda ()
                                    ;; Apply color to the chunk just inserted.
                                    (let ((inhibit-read-only t))
                                      (ansi-color-apply-on-region compilation-filter-start (point-max)))))))

  ;; --- Docker: files, TRAMP, and TUI -----------------------------------------
  (leaf dockerfile-mode :straight t
    :doc "Major mode for editing Dockerfiles."
    :mode (("Dockerfile\\(\\..*\\)?\\'" . dockerfile-mode)
           ("\\.dockerfile\\'"         . dockerfile-mode))
    :custom ((dockerfile-mode-command . "docker")))
  ;; For compose files we start minimal with yaml-mode.
  (leaf yaml-mode :straight t
    :mode (("\\`docker-compose\\(-\\w+\\)?\\.ya?ml\\'" . yaml-mode)
           ("\\.ya?ml\\'"                               . yaml-mode)))

  (leaf docker :straight t :commands (docker docker-containers docker-images docker-volumes docker-networks)
    :doc "Manage Docker from Emacs: containers/images/volumes/networks."
    :bind (("C-c d d" . docker)             ; main dashboard
           ("C-c d c" . docker-containers)
           ("C-c d i" . docker-images)
           ("C-c d v" . docker-volumes)
           ("C-c d n" . docker-networks))
    :custom ((docker-container-shell-file-name . "/bin/sh")))

  ;; Container-based TRAMP support (builtin since Emacs 29)
  (leaf tramp-container
    ;; Do NOT use :straight t because it's not an external package in most archives
    :commands (tramp-container-tramp-file-p)
    :after tramp
    :init
    ;; Set which container engine to use, e.g. "docker" or "podman"
    (setq tramp-container-method "docker"))

  ;; Optional: quick insertion helpers for common Dockerfile snippets.
  (leaf tempel :straight t
    :doc "Lightweight templates for quick boilerplate."
    :commands (tempel-insert)
    :bind (dockerfile-mode-map
           ("C-c d t" . tempel-insert))
    :init
    (with-eval-after-load 'tempel
      (defvar my:tempel-docker-templates
        '((dockerfile "FROM " p n
                      "WORKDIR /app" n
                      "COPY . /app" n
                      "RUN " p n
                      "CMD [" p "]" n)))
      (add-to-list 'tempel-user-elements my:tempel-docker-templates)))
  (provide 'lsp)
  ;;; lsp.el ends here
#+end_src

*** org.el
:PROPERTIES:
:CUSTOM_ID: org
:END:

This module provides **Org Mode configuration** for a GTD-style workflow with notes, tasks, agendas, and publishing.
It integrates multiple packages to enhance productivity, visuals, and export capabilities.

- **Directories & Variables**: Centralized paths for Org, Journal, Roam, and media.
- **Core Org Mode**: GTD workflow, agenda, capture templates, and keybindings.
- **Visual Enhancements**: `org-modern` and `org-superstar`.
- **Code Execution**: Org Babel with multiple languages.
- **Extensions**: Journal, Roam, Download, TOC, Cliplink.
- **Export**: LaTeX and Hugo integration.
- **Markdown**: Support and live preview.

#+begin_src emacs-lisp :tangle lisp/org.el
  ;;; Org Setup -*- lexical-binding: t; -*-

  ;; Copyright (c) 2021-2025 YAMASHITA, Takao
  ;; Licensed under the GNU General Public License version 3 or later.

  ;;; Org Mode Configuration
  ;; Provides a GTD-style workflow with notes, tasks, agendas, and capture templates.

  ;;; Code:

  (eval-when-compile (require 'leaf))
  ;; -----------------------------------------------------------------------------
  ;; Path variables for Org ecosystem
  (defvar my:d:org
      (expand-file-name "org/"
                        (if (boundp 'my:d:cloud) my:d:cloud my:d:var))
      "Main Org directory. Falls back to `my:d:var` if `my:d:cloud` is undefined.")
  (defvar my:d:org-journal (expand-file-name "journal" my:d:org)
    "Org journal directory.")
  (defvar my:d:org-roam (expand-file-name "org-roam" my:d:org)
    "Org Roam directory.")
  (defvar my:d:org-pictures (expand-file-name "pictures" my:d:org)
    "Org pictures directory.")
  (defvar my:f:capture-blog-file (expand-file-name "blog.org" my:d:org)
    "Default Org file for Hugo blog captures.")

  (my/ensure-directory-exists my:d:org)
  (my/ensure-directory-exists my:d:org-journal)
  (my/ensure-directory-exists my:d:org-roam)
  (my/ensure-directory-exists my:d:org-pictures)

  ;; -----------------------------------------------------------------------------
  ;;; Org Mode
  (leaf org
    :straight t
    :leaf-defer t
    :preface
    ;; Utility: List all open Org files
    (defun my/org-buffer-files ()
      "Return a list of currently open Org files."
      (delq nil (mapcar #'buffer-file-name (org-buffer-list 'files))))

    ;; Utility: Show a specific Org file in current buffer
    (defun my/show-org-buffer (file)
      "Display an Org FILE from `org-directory`."
      (interactive (list (read-file-name "Org file: " org-directory nil t)))
      (let ((filepath (expand-file-name file org-directory)))
        (if (get-file-buffer filepath)
            (switch-to-buffer (get-file-buffer filepath))
          (find-file filepath))))

    :custom
    ((org-support-shift-select . t)
     (org-directory . my:d:org)
     (org-return-follows-link . t)
     (org-mouse-1-follows-link . t)
     (org-cycle-emulate-tab . 'white-space)
     (org-default-notes-file . "notes.org")
     (org-enforce-todo-dependencies . t)
     (org-idle-time . 0.3)
     (org-log-done . 'time)
     (org-startup-folded . 'content)
     (org-startup-truncated . nil)
     (org-use-speed-commands . t)
     (org-link-frame-setup . '((file . find-file))))
    :init
    ;; Suppress noisy cache warnings
    (setq warning-suppress-types
          (append warning-suppress-types '((org-element-cache))))
    :bind
    (("C-M--" . (lambda () (interactive) (my/show-org-buffer "gtd.org")))
     ("C-M-^" . (lambda () (interactive) (my/show-org-buffer "notes.org")))
     ("C-M-~" . (lambda () (interactive) (my/show-org-buffer "kb.org"))))
    :config
    ;; Agenda files (exclude archives)
    (setq org-agenda-files
          (seq-filter (lambda (file)
                        (not (string-match-p "archives" file)))
                      (directory-files-recursively org-directory "\\.org$")))
    ;; TODO keywords
    (setq org-todo-keywords
          '((sequence "TODO(t)" "SOMEDAY(s)" "WAITING(w)" "|" "DONE(d)" "CANCELED(c@)")))
    ;; Refile targets
    (setq org-refile-targets
          '((nil :maxlevel . 3)
            (my/org-buffer-files :maxlevel . 1)
            (org-agenda-files :maxlevel . 3)))
    ;; Capture templates
    (setq org-capture-templates
          `(("t" "Todo" entry (file+headline ,(expand-file-name "gtd.org" org-directory) "Inbox")
             "* TODO %?\n %i\n %a")
            ("n" "Note" entry (file+headline ,(expand-file-name "notes.org" org-directory) "Notes")
             "* %?\nEntered on %U\n %i\n %a")
            ("j" "Journal" entry (function my/org-journal-find-location)
             "* %(format-time-string org-journal-time-format)%^{Title}\n%i%?")
            ("m" "Meeting" entry (file ,(expand-file-name "meetings.org" org-directory))
             "* MEETING with %? :meeting:\n  %U\n  %a"))))

  ;; -----------------------------------------------------------------------------
  ;;; Org Modern (visual tweaks)
  (leaf org-modern
    :straight t
    :hook (org-mode . org-modern-mode)
    :custom
    ((org-startup-indented . t)
     (org-hide-leading-stars . t)
     (org-auto-align-tags . nil)
     (org-tags-column . 0)
     (org-catch-invisible-edits . 'show-and-error)
     (org-special-ctrl-a/e . t)
     (org-insert-heading-respect-content . t)
     (org-hide-emphasis-markers . t)
     (org-pretty-entities . t)
     (org-agenda-tags-column . 0)
     (org-agenda-block-separator . ?─)
     (org-agenda-time-grid .
                           '((daily today require-timed)
                             (800 1000 1200 1400 1600 1800 2000)
                             " ┄┄┄┄┄ " " ┄┄┄┄┄ "))
     (org-agenda-current-time-string
      . "⭠ now ─────────────────────────────────────────────────")))

  ;; -----------------------------------------------------------------------------
  ;;; Org Superstar (optional pretty bullets)
  (leaf org-superstar
    :after org
    :hook (org-mode . org-superstar-mode)
    :custom
    ((org-superstar-headline-bullets-list . '("◉" "★" "○" "▷"))
     (org-superstar-remove-leading-stars . nil)))
  ;; -----------------------------------------------------------------------------
  ;;; Org Babel (code execution)
  (leaf ob
    :after org
    :config
    (org-babel-do-load-languages
     'org-babel-load-languages
     '((emacs-lisp . t) (shell . t) (python . t)
       (R . t) (ditaa . t) (plantuml . t))))

  ;; -----------------------------------------------------------------------------
  ;;; Org Journal
  (leaf org-journal
    :straight t
    :after org
    :custom
    ((org-journal-dir . my:d:org-journal)
     (org-journal-enable-agenda-integration . t))
    :config
    (defun my/org-journal-find-location ()
      "Open today's journal entry."
      (org-journal-new-entry t)))

  ;; -----------------------------------------------------------------------------
  ;;; Org Roam
  (leaf org-roam
    :straight t
    :after org
    :custom ((org-roam-directory . my:d:org-roam))
    :config
    (org-roam-db-autosync-mode))

  ;; -----------------------------------------------------------------------------
  ;;; Org Download
  (leaf org-download
    :straight t
    :after org
    :custom ((org-download-image-dir . my:d:org-pictures)))

  ;; -----------------------------------------------------------------------------
  ;;; TOC-Org
  (leaf toc-org
    :straight t
    :after (org markdown-mode)
    :hook ((org-mode . toc-org-enable)
           (markdown-mode . toc-org-mode)))

  ;; -----------------------------------------------------------------------------
  ;;; Org Cliplink
  (leaf org-cliplink
    :straight t
    :after org
    :bind ("C-x p i" . org-cliplink))

  ;; -----------------------------------------------------------------------------
  ;;; Org LaTeX Export
  (leaf org-latex
    :after org
    :custom
    ((org-latex-packages-alist
      '(("" "graphicx" t)
        ("" "longtable" nil)
        ("" "wrapfig" nil)))
     (org-latex-pdf-process
      '("pdflatex -interaction nonstopmode -output-directory %o %f"
        "bibtex %b"
        "pdflatex -interaction nonstopmode -output-directory %o %f"
        "pdflatex -interaction nonstopmode -output-directory %o %f"))))

  ;; -----------------------------------------------------------------------------
  ;;; Hugo Export
  (leaf ox-hugo
    :straight t
    :after ox
    :custom ((org-hugo-front-matter-format . "toml")))

  (leaf *ox-hugo--capture
    :after org-capture
    :config
    (defun my/generate-safe-filename ()
      "Generate a unique, safe filename for Hugo export."
      (format "%s-%s" (format-time-string "%Y")
              (string-trim (shell-command-to-string "uuidgen | cut -c1-8"))))
    (add-to-list 'org-capture-templates
                 `("b" "Create new blog post" entry
                   (file+headline ,my:f:capture-blog-file "blog")
                   "** TODO %?\n  :PROPERTIES:\n  :EXPORT_FILE_NAME: %(my/generate-safe-filename)\n  :EXPORT_DATE:\n  :EXPORT_HUGO_TAGS:\n  :EXPORT_HUGO_CATEGORIES:\n  :EXPORT_HUGO_LASTMOD:\n  :EXPORT_HUGO_CUSTOM_FRONT_MATTER: :pin false\n  :END:\n\n")))

  ;; -----------------------------------------------------------------------------
  ;;; Markdown
  (leaf markdown-mode
    :straight t
    :mode ("\\.md\\'" . markdown-mode))

  (leaf markdown-preview-mode
    :straight t
    :after markdown-mode
    :custom
    ((markdown-preview-stylesheets
      . '("https://cdnjs.cloudflare.com/ajax/libs/github-markdown-css/4.0.0/github-markdown.min.css"))))
  (provide 'org)
  ;;; org.el ends here
#+end_src

*** tools.el
:PROPERTIES:
:CUSTOM_ID: tools
:END:

This module provides **utility functions and development tools** to enhance daily Emacs usage.
It covers automation, scratch buffer handling, file cleanup, UI helpers, external integrations, and common developer utilities.

- **Utility Functions**: Auto timestamp, tangle Org, async helpers, backup cleanup.
- **Scratch Management**: Ensure `*scratch*` buffer, quick revert.
- **Automatic Settings**: Lexical binding insertion, read-only handling.
- **Navigation/UI**: Line numbers, window split toggle, keybinding conflict finder.
- **External Tools**: Treesit grammar builds, VSCode opener, build info display.
- **Org Helpers**: Folding shortcuts, auto-tangle on save.
- **Developer Tools**: Saveplace, recentf, history, Paredit, Puni, Tree-sitter, Which-key, Undo, Ace-window.
- **Editing Tools**: Expand region, aggressive indent, delete selection.
- **Search & Navigation**: Ripgrep, Dumb-jump.
- **Project & VCS**: Projectile, Magit, Multiple Cursors.
- **Syntax/Spell**: Flycheck, Flyspell.
- **Snippets**: YASnippet with centralized snippet dir.
- **Web & LaTeX**: EWW custom search, AUCTeX integration.

#+begin_src emacs-lisp :tangle lisp/tools.el
  ;;; Tools Setup -*- lexical-binding: t; -*-

  ;; Copyright (c) 2021-2025 YAMASHITA, Takao
  ;; Licensed under the GNU General Public License version 3 or later.

  ;;; Code:

  (eval-when-compile (require 'leaf))
  ;;; ---------------------------------------------------------------------------
  ;;; Utility Functions

  ;; Insert timestamp on save
  (defun my/save-buffer-wrapper ()
    "Insert or update a `$Lastupdate` timestamp at the top of the buffer."
    (interactive)
    (let ((timestamp (concat "$Lastupdate: " (format-time-string "%Y/%m/%d %H:%M:%S") " $")))
      (save-excursion
        (goto-char (point-min))
        (while (re-search-forward "\\$Lastupdate: [0-9/: ]*\\$" nil t)
          (replace-match timestamp t nil)))))

  (defun my/auto-tangle-updated-src-blocks ()
    "Automatically tangle updated Org source blocks when saving `README.org`."
    (when (and buffer-file-name
               (string= (file-name-nondirectory buffer-file-name) "README.org"))
      (let ((org-confirm-babel-evaluate nil))
        (org-babel-tangle))))

  ;; -----------------------------------------------------------------------------
  ;;; Scratch Buffer Management
  ;; Ensures that the `*scratch*` buffer always exists, and allows recreation.

  (defun my/create-scratch-buffer ()
    "Ensure that a `*scratch*` buffer exists."
    (unless (get-buffer "*scratch*")
      (with-current-buffer (get-buffer-create "*scratch*")
        (funcall initial-major-mode)
        (when (and initial-scratch-message
                   (not (string-empty-p initial-scratch-message)))
          (insert initial-scratch-message))
        (current-buffer))))

  (defun my/recreate-scratch-buffer ()
    "Kill and recreate the `*scratch*` buffer."
    (interactive)
    (when (get-buffer "*scratch*")
      (kill-buffer "*scratch*"))
    (my/create-scratch-buffer)
    (switch-to-buffer "*scratch*"))

  (defun my/after-kill-buffer-advice (&rest _)
    "Ensure `*scratch*` buffer exists after any buffer is killed."
    (run-at-time 0.1 nil #'my/create-scratch-buffer))

  (add-hook 'kill-buffer-hook #'my/create-scratch-buffer)

  ;; Simple no-prompt revert for the current buffer.
  (defun my/revert-buffer-quick ()
    "Revert current buffer without confirmation."
    (interactive)
    (revert-buffer :ignore-auto :noconfirm))

  ;; -----------------------------------------------------------------------------
  ;;; Automatic Lexical Binding
  ;; Inserts a `lexical-binding: t` header into `.el` files in `no-littering-var-directory`.

  (defun my/auto-insert-lexical-binding ()
    "Automatically insert `lexical-binding: t` in Emacs Lisp files under `no-littering-var-directory`."
    (when (and (stringp buffer-file-name)
               (boundp 'no-littering-var-directory)
               (string-prefix-p (expand-file-name no-littering-var-directory)
                                (expand-file-name buffer-file-name))
               (string-match-p "\\.el\\'" buffer-file-name)
               (not (save-excursion
                      (goto-char (point-min))
                      (re-search-forward "lexical-binding" (line-end-position 5) t))))
      (save-excursion
        (goto-char (point-min))
        (insert ";; -*- lexical-binding: t; -*- \n"))))

  ;; -----------------------------------------------------------------------------
  ;;; Asynchronous Task Execution Helper

  (defun my/safe-run-async (task)
    "Run TASK asynchronously, catching and reporting any errors."
    (run-at-time 0 nil
                 (lambda ()
                   (condition-case err
                       (funcall task)
                     (error (message "Async error: %s" err))))))

  ;; -----------------------------------------------------------------------------
  ;;; Backup File Cleanup
  ;; Deletes old backup files (older than 7 days) asynchronously.

  (defun my/delete-old-backups ()
    "Delete backup files older than 7 days."
    (interactive)
    (my/safe-run-async
     (lambda ()
       (let ((backup-dir (concat no-littering-var-directory "backup/"))
             (threshold (- (float-time (current-time)) (* 7 24 60 60))))
         (when (file-directory-p backup-dir)
           (dolist (file (directory-files backup-dir t))
             (when (and (file-regular-p file)
                        (< (float-time (file-attribute-modification-time
                                        (file-attributes file)))
                           threshold))
               (delete-file file))))))))

  ;; -----------------------------------------------------------------------------
  ;;; Read-Only Buffer Handling
  ;; Automatically enables `view-mode` for read-only buffers.

  (defun my/enable-view-mode-on-read-only ()
    "Enable `view-mode` when buffer is read-only."
    (if buffer-read-only
        (view-mode 1)
      (view-mode -1)))
  (add-hook 'read-only-mode-hook #'my/enable-view-mode-on-read-only)

  ;; -----------------------------------------------------------------------------
  ;;; UI & Navigation Helpers

  (defun my/toggle-linum-lines ()
    "Toggle line numbers using `display-line-numbers-mode`."
    (interactive)
    (display-line-numbers-mode 'toggle))

  (defun my/toggle-window-split ()
    "Toggle between horizontal and vertical split for two windows."
    (interactive)
    (when (= (count-windows) 2)
      (let* ((this-buf (window-buffer))
             (next-buf (window-buffer (next-window)))
             (this-edges (window-edges))
             (next-edges (window-edges (next-window)))
             (split-vert (= (car this-edges) (car next-edges)))
             (split-fn (if split-vert
                           #'split-window-horizontally
                         #'split-window-vertically)))
        (delete-other-windows)
        (funcall split-fn)
        (set-window-buffer (selected-window) this-buf)
        (set-window-buffer (next-window) next-buf)
        (select-window (selected-window)))))

  (defun my/find-keybinding-conflicts ()
    "Find and display conflicting keybindings in active keymaps."
    (interactive)
    (let ((conflicts (make-hash-table :test 'equal))
          (maps (current-active-maps t))
          (buffer-name "*Keybinding Conflicts*"))
      (dolist (map maps)
        (map-keymap
         (lambda (key cmd)
           (when (commandp cmd)
             (let ((desc (key-description (vector key)))
                   (existing (gethash desc conflicts)))
               (puthash desc (delete-dups (cons cmd existing))
                        conflicts))))
         map))
      (with-current-buffer (get-buffer-create buffer-name)
        (read-only-mode -1)
        (erase-buffer)
        (insert "* Keybinding Conflicts *\n\n")
        (maphash (lambda (key cmds)
                   (when (> (length cmds) 1)
                     (insert (format "%s => %s\n"
                                     key
                                     (mapconcat #'symbol-name cmds ", ")))))
                 conflicts)
        (read-only-mode 1))
      (pop-to-buffer buffer-name)))

  ;; -----------------------------------------------------------------------------
  ;;; Dired Helper

  (defun my/dired-view-file-other-window ()
    "Open selected Dired file or directory in another window."
    (interactive)
    (let ((file (dired-get-file-for-visit)))
      (if (file-directory-p file)
          (or (and (cdr dired-subdir-alist)
                   (dired-goto-subdir file))
              (dired file))
        (view-file-other-window file))))

  ;; -----------------------------------------------------------------------------
  ;;; External Integration

  (defun my/treesit--call-with-outdir (orig-fn &rest args)
    "Advice ORIG-FN to force OUT-DIR to `my:d:treesit` when omitted.
  Also run the build in `my:d:treesit-build` to avoid polluting `default-directory`."
    ;; treesit-install-language-grammar signature (Emacs 29/30):
    ;; (LANG &optional URL REV SRC CC CXX OUT-DIR)
    (let* ((len (length args))
           (have-out-dir (>= len 7))
           ;; Pad args to at least 7 elements so nth 6 is safe
           (args* (append args (make-list (max 0 (- 7 len)) nil)))
           (out-dir (or (nth 6 args*) my:d:treesit)))
      (setf (nth 6 args*) out-dir)
      (my/ensure-directory-exists out-dir)
      (let ((default-directory my:d:treesit-build))
        (apply orig-fn args*))))

  (defun my/open-by-vscode ()
    "Open current file in Visual Studio Code at line/column."
    (interactive)
    (when (buffer-file-name)
      (async-shell-command
       (format "code -r -g %s:%d:%d"
               (buffer-file-name)
               (line-number-at-pos)
               (current-column)))))

  (defun my/show-env-variable (var)
    "Display the value of environment variable VAR."
    (interactive "sEnvironment variable: ")
    (let ((val (getenv var)))
      (message "%s = %s" var (or val "Not set"))))

  (defun my/print-build-info ()
    "Display Emacs build details (commit, branch, system, features, options)."
    (interactive)
    (let ((buf (get-buffer-create "*Build Info*")))
      (with-current-buffer buf
        (let ((inhibit-read-only t))
          (erase-buffer)
          ;; Core info
          (insert (format "- GNU Emacs *%s*\n\n" emacs-version))
          (insert "|Property|Value|\n|--------|-----|\n")
          (insert (format "|Commit|%s|\n" (emacs-repository-get-version)))
          (insert (format "|Branch|%s|\n" (emacs-repository-get-branch)))
          (insert (format "|System|%s|\n" system-configuration))
          (insert (format "|Date|%s|\n"
                          (format-time-string "%Y-%m-%d %T (%Z)" emacs-build-time)))
          ;; Patch detection
          (insert (format "|Patch|%s ns-inline.patch|\n"
                          (cond
                           ((boundp 'mac-ime--cursor-type) "with")
                           (t "N/A"))))
          ;; Features & options
          (insert (format "|Features|%s|\n" system-configuration-features))
          (insert (format "|Options|%s|\n" system-configuration-options)))
        (view-mode 1))
      (switch-to-buffer buf)))

  ;; -----------------------------------------------------------------------------
  ;;; Org Mode Folding Shortcuts
  (with-eval-after-load 'org
    (require 'org-fold)
    (defun my/org-fold-subtree ()   (interactive) (org-fold-subtree t))
    (defun my/org-unfold-subtree () (interactive) (org-show-subtree))
    (defun my/org-toggle-fold ()
      "Toggle fold for current Org subtree."
      (interactive)
      (save-excursion
        (org-back-to-heading t)
        (if (org-fold-folded-p (point))
            (org-show-subtree)
          (org-fold-subtree t))))
    (define-key org-mode-map (kbd "C-c C-f") #'my/org-fold-subtree)
    (define-key org-mode-map (kbd "C-c C-e") #'my/org-unfold-subtree)
    (define-key org-mode-map (kbd "C-c C-t") #'my/org-toggle-fold))

  ;; -----------------------------------------------------------------------------
  ;;; Hooks

  (add-hook 'org-mode-hook
            (lambda ()
              (add-hook 'after-save-hook #'my/auto-tangle-updated-src-blocks
                        nil 'make-it-local)))
  (add-hook 'emacs-startup-hook #'my/delete-old-backups)
  (add-hook 'find-file-hook #'my/auto-insert-lexical-binding)
  (add-hook 'prog-mode-hook 'goto-address-prog-mode)
  (add-hook 'text-mode-hook 'goto-address-mode)
  (add-hook 'before-save-hook 'delete-trailing-whitespace)
  (add-hook 'before-save-hook #'my/save-buffer-wrapper)
  ;;; Tools -*- lexical-binding: t; -*-
    ;;; Saveplace (Remember Cursor Positions)
  ;; Restores the last cursor position when reopening files.

  (leaf saveplace
    :init
    (setq save-place-file (concat no-littering-var-directory "saveplace"))
    (save-place-mode +1))

  ;; Maintain list of recently opened files
  (leaf recentf
    :init
    (setq recentf-max-saved-items 100
          recentf-save-file (concat no-littering-var-directory "recentf"))
    (recentf-mode +1))

  ;; Save minibuffer history across sessions
  (leaf savehist
    :custom
    `((savehist-file . ,(concat no-littering-var-directory "savehist"))
      (savehist-additional-variables '(kill-ring search-ring regexp-search-ring))
      (savehist-autosave-interval . 300))
    :global-minor-mode t)

  ;; -----------------------------------------------------------------------------
    ;;; Parentheses and Pair Management

  ;; Structured editing for Emacs Lisp
  (leaf paredit
    :straight t
    :hook (emacs-lisp-mode . (lambda ()
                               (enable-paredit-mode)
                               (electric-pair-local-mode -1))))  ;; prevent double pairing

  ;; Highlight matching parentheses
  (leaf paren
    :custom
    ((show-paren-delay . 0)
     (show-paren-style . 'expression)
     (show-paren-highlight-openparen . t))
    :global-minor-mode show-paren-mode)

  ;; Smart pair handling (disabled in minibuffer)
  (leaf puni
    :straight t
    :global-minor-mode puni-global-mode
    :hook ((minibuffer-setup . (lambda () (puni-global-mode -1)))))

  ;; -----------------------------------------------------------------------------
    ;;; Tree-Sitter Configuration

  (when (featurep 'treesit)
    ;; 1) Teach Emacs to look in my:d:var first for grammars.
    ;;    Emacs searches treesit-extra-load-path first, then UED/tree-sitter, then system libs.
    ;;    Keeping our grammars in my:d:var keeps ~/.emacs.d tidy and portable.
    (with-eval-after-load 'treesit
      (add-to-list 'treesit-extra-load-path my:d:treesit)
      (advice-add 'treesit-install-language-grammar :around #'my/treesit--call-with-outdir))

    (defun my/treesit-install (lang)
      (interactive
       (list (intern (completing-read "Language: "
                                      (mapcar #'car treesit-language-source-alist)))))
      (treesit-install-language-grammar lang))

    ;; Optionally: define language sources here (kept minimal to respect user's setup).
    ;; (setopt treesit-language-source-alist
    ;;         '((bash "https://github.com/tree-sitter/tree-sitter-bash")
    ;;           (json "https://github.com/tree-sitter/tree-sitter-json")
    ;;           ...))

    (leaf treesit-auto
      :straight t
      :require t
      :custom
      ((treesit-auto-install . t))            ;; auto-install missing grammars
      :config
      (global-treesit-auto-mode 1)
      (setopt treesit-font-lock-level 3)))

  ;; -----------------------------------------------------------------------------
    ;;; Auto-Revert
  ;; Automatically reloads files when changed on disk (silent refresh every 2s).

  (leaf autorevert
    :custom
    ((auto-revert-interval . 2)
     (auto-revert-verbose . nil))
    :global-minor-mode global-auto-revert-mode)

  ;; -----------------------------------------------------------------------------
    ;;; Which-Key (Key Binding Hints)
  ;; Shows available keybindings in a popup for the current prefix.

  (leaf which-key
    :straight t
    :global-minor-mode t
    :custom ((which-key-idle-delay . 0.5)))

  ;; -----------------------------------------------------------------------------
    ;;; Undo-Fu (Advanced Undo/Redo)
  ;; Provides linear undo/redo history with better region handling.

  (leaf undo-fu
    :straight t
    :custom ((undo-fu-allow-undo-in-region . t)))

  ;; -----------------------------------------------------------------------------
    ;;; Vundo
  ;; Visualize undo history as a tree

  (leaf vundo
    :straight t
    ;; Visualize undo history as a tree.
    ;; Easier to navigate than the default linear undo system.
    :bind (("C-c u" . vundo)))

  ;; -----------------------------------------------------------------------------
    ;;; Ace Window (Window Navigation)
  ;; Provides quick window switching with visual hints.

  (leaf ace-window
    :straight t
    :custom
    ((aw-keys . '(?a ?s ?d ?f ?g ?h ?j ?k ?l))
     (aw-scope . 'frame)
     (aw-background . t))
    :config
    (ace-window-display-mode 1))

  ;; -----------------------------------------------------------------------------
    ;;; Visual Line Mode
  ;; Enables soft line wrapping for text-based buffers.

  (leaf visual-line-mode
    :hook (text-mode . visual-line-mode))

  ;; -----------------------------------------------------------------------------
    ;;; macOS Clipboard Integration
  ;; Ensures Emacs uses the macOS clipboard via `pbcopy`.

  (leaf pbcopy
    :if (memq window-system '(mac ns))
    :straight t
    :config
    (turn-on-pbcopy))

  ;; -----------------------------------------------------------------------------
    ;;; Dired Enhancements
  ;; Adds filtering and subtree expansion to Dired.

  (leaf dired-filter :straight t)
  (leaf dired-subtree
    :after dired)
  ;; key bindings are centralized (see my:keys below)

  ;; -----------------------------------------------------------------------------
    ;;; Editing Tools
  ;; Region expansion, aggressive indentation, and selection overwrite.

  (leaf expand-region
    :straight t
    :after treesit)
  (leaf aggressive-indent
    :straight t
    :hook (prog-mode . aggressive-indent-mode))
  (leaf delsel
    :global-minor-mode delete-selection-mode)

  ;; -----------------------------------------------------------------------------
    ;;; Search Tools
  ;; Configures `rg` (ripgrep) as the default search backend.

  (when (executable-find "rg")
    (setopt grep-program "rg")
    (leaf rg :straight t))

  ;; -----------------------------------------------------------------------------
    ;;; Code Navigation
  ;; Uses Dumb-Jump with `rg` for fast symbol navigation.

  (leaf dumb-jump
    :straight t
    :hook (xref-backend-functions . dumb-jump-xref-activate)
    :custom
    `((dumb-jump-force-searcher  . 'rg)
      (dumb-jump-prefer-searcher . 'rg)))

  ;; -----------------------------------------------------------------------------
    ;;; Multiple Cursors
  ;; Enables simultaneous editing with multiple cursors.

  (leaf multiple-cursors :straight t)

  ;; -----------------------------------------------------------------------------
    ;;; Magit (Git Integration)
  ;; A powerful and user-friendly Git interface.

  (leaf magit :straight t)

  ;; -----------------------------------------------------------------------------
    ;;; Syntax & Spell Checking
  ;; Configures Flycheck (syntax) and Flyspell (spelling).

  (leaf flycheck
    :straight t
    :hook (prog-mode . flycheck-mode))

  (leaf flyspell
    :straight t
    :hook (text-mode . flyspell-mode)
    :custom ((ispell-program-name . "aspell")))

  ;; -----------------------------------------------------------------------------
    ;;; Project Management
  ;; Projectile for project navigation and search.

  (leaf projectile
    :straight t
    :global-minor-mode t)

  ;; -----------------------------------------------------------------------------
    ;;; Snippet Management (YASnippet)
  ;; Loads user-defined snippets from `my:d:yas-snippet` under `my:d:var`.

  (leaf yasnippet
    :straight t
    :global-minor-mode yas-global-mode
    :init
    ;; Store user snippets under my:d:var for portability and cleanup.
    (defvar my:d:yas-snippet (expand-file-name "snippets/" my:d:var)
      "Default directory for YASnippet user snippets under my:d:var.")
    ;; Create snippet dir if it doesn't exist (idempotent).
    (unless (file-directory-p my:d:yas-snippet)
      (make-directory my:d:yas-snippet t))
    :config
    ;; Use only our centralized snippet dir.
    (setq yas-snippet-dirs (list my:d:yas-snippet))
    (yas-reload-all))

  (leaf yasnippet-snippets
    :straight t
    :after yasnippet)
  (leaf eww
    :straight nil
    :custom ((eww-search-prefix . "https://duckduckgo.com/html/?kl=jp-jp&k1=-1&kc=1&kf=-1&q=")
  	   (eww-download-directory . "~/Downloads"))                ;; Download directory
    :config
    ;; Save history and bookmarks
    (setq eww-bookmarks-file (expand-file-name "eww-bookmarks" my:d:var))
    (setq eww-history-limit 200)

    ;; Variable to store search term
    (defvar eww-hl-search-word nil
      "Word to highlight and search with isearch after EWW loads.")

    ;; Custom search command
    (defun my/eww-search (term)
      "Search TERM with `eww' and start `isearch`."
      (interactive "sSearch terms: ")
      (setq eww-hl-search-word term)
      (eww-browse-url (concat eww-search-prefix term)))

    ;; After rendering, automatically start isearch with the search term
    (add-hook 'eww-after-render-hook
              (lambda ()
                (when eww-hl-search-word
                  (isearch-mode t)
                  (isearch-yank-string eww-hl-search-word)
                  (setq eww-hl-search-word nil))))

    ;; Toggle images on/off
    (defun my/eww-toggle-images ()
      "Toggle whether images are loaded in EWW."
      (interactive)
      (setq shr-inhibit-images (not shr-inhibit-images))
      (eww-reload)))
  ;; -----------------------------------------------------------------------------
  ;;; AUCTeX (LaTeX Editing)
  ;; Configures AUCTeX for PDF-based workflows with `latexmk`.

  (leaf auctex
    :straight t
    :init
    (setq TeX-auto-save t
          TeX-parse-self t
          TeX-save-query nil
          TeX-PDF-mode t)
    (setq-default TeX-master nil)
    :config
    (setq TeX-command-default "LatexMk")
    (add-hook 'LaTeX-mode-hook
              (lambda ()
                (push
                 '("LatexMk" "latexmk -pdf -interaction=nonstopmode -synctex=1 %s"
                   TeX-run-TeX nil t :help "Run latexmk for automated PDF generation")
                 TeX-command-list))))
  (provide 'tools)
  ;;; tools.el ends here
#+end_src

*** ui.el
:PROPERTIES:
:CUSTOM_ID: ui
:END:

This module configures **fonts, UI appearance, and window management**.
It ensures a modern, clean, and consistent visual experience across platforms.

- **Font Management**: Detects OS defaults, applies user overrides, emoji, ligatures, and themed faces.
- **UI Enhancements**: Fullscreen mode, dynamic window zoom, spacious padding, minions, doom-modeline.
- **Navigation**: Tab-bar, tab-line, Treemacs file explorer.
- **Session Handling**: Desktop save/restore, custom window layouts.
- **Icons**: Nerd Icons for Dired, ligatures for programming.
- **Themes**: Ef-themes with auto-load and toggle support.

#+begin_src emacs-lisp :tangle lisp/ui.el
  ;;; UI,Font Setup -*- lexical-binding: t; -*-

  ;; Copyright (c) 2021-2025 YAMASHITA, Takao
  ;; Licensed under the GNU General Public License version 3 or later.

  ;;; Code:

  (eval-when-compile (require 'leaf))
  ;; -----------------------------------------------------------------------------
  ;; Default font configuration

  (defun my/system-default-font ()
    "Return a default monospace font family depending on the OS."
    (cond
     ((eq system-type 'darwin)   "Menlo")     ;; macOS
     ((eq system-type 'gnu/linux) "Monospace") ;; Linux generic
     ((eq system-type 'windows-nt) "Consolas") ;; Windows
     (t "Monospace"))) ;; fallback

  (defun my/system-emoji-font ()
    "Return a default emoji font family depending on the OS."
    (cond
     ((eq system-type 'darwin)    "Apple Color Emoji")  ;; macOS
     ((eq system-type 'gnu/linux) "Noto Color Emoji")   ;; Linux
     ((eq system-type 'windows-nt) "Segoe UI Emoji")    ;; Windows
     (t "Noto Color Emoji"))) ;; fallback

  ;; -----------------------------------------------------------------------------
  ;; Utility function to check if a font is available on the system.

  (defun my/font-exists-p (font-name)
    "Return t if FONT-NAME is available on the system."
    (when (find-font (font-spec :family font-name))
      t))

  (defun my/font-setup ()
    "Apply font settings using user overrides if available, and log to *Messages*."
    (when (display-graphic-p)
      ;; Default font
      (set-face-attribute 'default nil
                          :family (or my:font-default (my/system-default-font))
                          :height (* 10 (or my:font-size 16)))
      (message "[Font] ✔ Default: %s (%dpt)"
               (or my:font-default (my/system-default-font))
               (or my:font-size 16))

      ;; Variable-pitch font
      (set-face-attribute 'variable-pitch nil
                          :family (or my:font-alt (my/system-default-font)))
      (message "[Font] ✔ Variable-pitch: %s"
               (or my:font-alt (my/system-default-font)))

      ;; Emoji font
      (set-fontset-font t 'emoji
                        (font-spec :family (or my:emoji-font (my/system-emoji-font))))
      (message "[Font] ✔ Emoji: %s"
               (or my:emoji-font (my/system-emoji-font)))))

  (defun my/font-setup-on-frame (frame)
    "Apply `my/font-setup` to newly created FRAME in daemon sessions."
    (when (display-graphic-p frame)
      (with-selected-frame frame
        (my/font-setup))))

  ;; Ensure font setup runs once, respecting daemon vs GUI
  (if (daemonp)
      (add-hook 'after-make-frame-functions #'my/font-setup-on-frame)
    (add-hook 'after-init-hook #'my/font-setup))

  ;; -----------------------------------------------------------------------------
  ;; Adjust font-lock faces after loading a theme
  (add-hook 'after-load-theme-hook
            (lambda ()
              (when (my/font-exists-p my:font-alt)
                (custom-theme-set-faces
                 'user
                 `(font-lock-comment-face ((t (:family ,my:font-alt :slant italic))))
                 `(font-lock-doc-face     ((t (:family ,my:font-alt :slant italic)))))
                (message "Comment/doc font set to: %s" my:font-alt))))

  ;; -----------------------------------------------------------------------------
  ;;; Nerd Icons Setup
  (defvar my:nerd-icons-font "JetBrainsMono Nerd Font Mono"
    "Font used for Nerd Icons.")

  (leaf nerd-icons
    :straight t
    :if (display-graphic-p)
    :custom ((nerd-icons-color-icons . (my/font-exists-p my:nerd-icons-font))))

  ;; Show icons in Dired using nerd-icons.
  (leaf nerd-icons-dired
    :straight t
    :hook (dired-mode . nerd-icons-dired-mode)
    :config
    ;; Run once manually if fonts are missing:
    ;; M-x nerd-icons-install-fonts
    )

  ;; -----------------------------------------------------------------------------
  ;;; Ligature Setup
  (defvar my:ligature-font "Fira Code"
    "Font used for programming ligatures.")

  (leaf ligature
    :straight t
    :config
    (when (and (my/font-exists-p my:font-default)
               (my/font-exists-p my:ligature-font))
      (ligature-set-ligatures 'prog-mode
                              '("->" "=>" "::" "===" "!=" "&&" "||"
                                ":::" "!!" "??" "-->" "<--" "->>" "<<-"))
      (global-ligature-mode 1)))
  ;; ---------------------------------------------------------------------------
  ;;; Fullscreen Mode Configuration
  ;; Ensures Emacs starts in fullscreen mode.
  (defun my/set-frame-fullscreen (&optional frame)
    "Always set FRAME (or current frame if nil) to fullscreen."
    (when (display-graphic-p frame)
      (set-frame-parameter (or frame (selected-frame)) 'fullscreen 'fullboth)))

  (leaf fullscreen
    :init
    (if (daemonp)
        ;; Daemon: apply to each new frame
        (add-hook 'after-make-frame-functions #'my/set-frame-fullscreen)
      ;; Normal GUI startup: apply once
      (add-hook 'emacs-startup-hook #'my/set-frame-fullscreen)))

  ;; ---------------------------------------------------------------------------
  ;;; Dynamic Window Resizing (Zoom)
  ;; Automatically resizes windows, focusing the current one.
  (leaf zoom
    :straight t
    :hook (after-init-hook . zoom-mode)
    :custom
    ;; Keep the selected window around golden-ratio size (width . height).
    ((zoom-size . '(0.62 . 0.62))
     ;; Ignore auxiliary modes/buffers.
     (zoom-ignored-major-modes . '(ediff-mode dired-mode treemacs-mode))
     (zoom-ignored-buffer-names . '("*Messages*" "*Help*"))
     ;; Safety: skip in minibuffer or when only one window.
     (zoom-ignored-predicates . '((lambda () (window-minibuffer-p))
                                  (lambda () (< (count-windows) 2))))))

  ;; ---------------------------------------------------------------------------
  ;;; Theme Configuration (ef-themes)
  ;; Loads `ef-frost` in GUI or `deeper-blue` in terminal.
  (leaf ef-themes
    :straight t
    :custom ((ef-themes-to-toggle . '(ef-frost ef-spring)))
    :config
    (unless custom-enabled-themes
    (load-theme (if (display-graphic-p) 'ef-frost 'deeper-blue) t)))

  ;; ---------------------------------------------------------------------------
  ;;; Spacious Padding
  ;; Adds extra padding around UI elements for a clean look.
  (leaf spacious-padding
    :straight t
    :if (display-graphic-p)
    :custom ((spacious-padding-widths . '((left . 15) (right . 15) (top . 10) (bottom . 10)))
             (spacious-padding-subtle-mode-line . t)
             (spacious-padding-mode-line-active-border-width . 1)
             (spacious-padding-mode-line-inactive-border-width . 0))
    :config
    (spacious-padding-mode 1))

  ;; ---------------------------------------------------------------------------
  ;;; Minions (Mode Line Management)
  ;; Consolidates minor modes into a single menu.
  (leaf minions
    :straight t
    :custom ((minions-mode-line-lighter . "⚙"))
    :hook (after-init-hook . minions-mode))

  ;; ---------------------------------------------------------------------------
  ;;; Doom-modeline
  (leaf doom-modeline
    :straight t
    :hook (after-init-hook . doom-modeline-mode))

  (leaf time-and-battery
    :after doom-modeline
    :init
    (setq display-time-interval 30
          display-time-day-and-date t
          display-time-24hr-format t
          ;; Use default battery format; doom-modeline reads display-battery-mode.
          )
    :config
    (display-time-mode 1)
    (when (fboundp 'display-battery-mode)
      (display-battery-mode 1)))

  ;; ---------------------------------------------------------------------------
  ;;; Tab Bar & Tab Line
  ;; Enables tab-bar and tab-line with custom format.
  (leaf tab-bar
    :custom ((tab-bar-show . 1)
             (tab-bar-new-tab-choice . "*scratch*")
             (tab-bar-format . '(tab-bar-format-tabs tab-bar-separator tab-bar-format-align-right)))
    :hook (after-init-hook . tab-bar-mode))

  (leaf tab-line
    ;; Consider disabling one of bar/line if UI feels redundant.
    :hook (after-init-hook . global-tab-line-mode))

  ;; ---------------------------------------------------------------------------
  ;;; Treemacs (Project Drawer)
  ;; Provides a sidebar file explorer.
  (leaf treemacs
    :straight t
    :if (display-graphic-p)
    :custom ((treemacs-no-png-images . nil)
             (treemacs-filewatch-mode . t)
             (treemacs-follow-mode . t)
             (treemacs-indentation . 2)
             (treemacs-missing-project-action . 'remove)))
  ;; key bindings are centralized (see my:keys below)

  ;; ---------------------------------------------------------------------------
  ;;; Desktop Session Management
  ;; Saves and restores window layouts and open files.
  (leaf desktop
    :custom `((desktop-dirname . ,(concat no-littering-var-directory "desktop"))
              (desktop-save . 'if-exists)
              (desktop-load-locked-desktop . t)
              (desktop-auto-save-timeout . 180)
              (desktop-restore-eager . 10))
    :hook ((kill-emacs-hook . desktop-save-in-desktop-dir)
           (after-init-hook . (lambda ()
                                (make-directory desktop-dirname t)
                                (desktop-read))))
    :config
    (desktop-save-mode 1))

  ;; ---------------------------------------------------------------------------
  ;;; Custom Window Layout Utilities
  (defvar my:saved-window-config nil
    "Stores the current window configuration for later restoration.")

  (defun my/save-window-layout ()
    "Save the current window configuration persistently."
    (interactive)
    (setq my:saved-window-config (window-state-get nil t))
    (message "Window configuration saved."))

  (defun my/restore-window-layout ()
    "Restore the previously saved window configuration."
    (interactive)
    (if my:saved-window-config
        (progn
          (window-state-put my:saved-window-config)
          (message "Window configuration restored."))
      (message "No saved window configuration found.")))

  (defun my/toggle-window-dedication ()
    "Toggle the dedicated status of the currently selected window."
    (interactive)
    (let ((window (selected-window)))
      (set-window-dedicated-p window (not (window-dedicated-p window)))
      (message "Window dedication %s"
               (if (window-dedicated-p window) "enabled" "disabled"))))
  (provide 'ui)
  ;;; ui.el ends here
#+end_src

** Personal Configuration
:PROPERTIES:
:CUSTOM_ID: personal
:END:

This module defines **personal settings and device-specific configurations**.
It customizes identity, fonts, input sources, device preferences, and Apple Music control.

- **User Identity**: Name, email, encryption, and font overrides.
- **Directories**: Cloud, blog, and excluded paths.
- **Input Source (macOS)**: Automatic IME switching with `sis`.
- **Device Settings**: Logitech MX Ergo S mouse behavior.
- **Apple Music Control (macOS)**: Play, pause, skip, playlist, and track info integration via AppleScript.
- **Hydra Menu**: Quick keybindings for music controls.

#+begin_src emacs-lisp :tangle personal/user.el
  ;;; Personal Configuration -*- lexical-binding: t; -*-

  ;; Copyright (c) 2021-2025 YAMASHITA, Takao
  ;; Licensed under the GNU General Public License version 3 or later.

  ;;; Commentary:
  ;; Personal settings and device-specific configurations
  ;;; Code:

  (eval-when-compile (require 'leaf))

  ;; Personal Settings
  (leaf *personals
    :init
    (setq user-full-name "YAMASHITA, Takao"
  	user-mail-address "tjy1965@gmail.com"
  	inhibit-compacting-font-caches t
  	plstore-cache-passphrase-for-symmetric-encryption t)

    ;; Font overrides (optional; only apply if available)
    (setq my:font-default "JetBrains Mono NL"
  	my:font-alt "Noto Sans JP"
  	my:emoji-font "Apple Color Emoji"
  	my:font-size 16)

    (defvar my:d:cloud
      (expand-file-name "Documents/" (getenv "HOME"))
      "Cloud storage base directory.")
    (defvar my:d:blog
      (concat my:d:cloud "devel/repos/mysite/")
      "Blog directory.")
    (defvar my:f:capture-blog-file
      (expand-file-name "all-posts.org" my:d:blog))
    (defvar my:d:excluded-directories
      (list (expand-file-name "Library/Accounts" (getenv "HOME")))
      "Exclude directory.")

    (mapc #'my/ensure-directory-exists (list my:d:cloud my:d:blog))

    ;; Clean up load-path (exclude unwanted directories)
    (setq load-path (seq-remove (lambda (dir)
                                  (member dir my:d:excluded-directories))
                                load-path)))

  ;; Smart Input Source (auto switch input source, e.g. English <-> Japanese)
  ;; macOS requirement: `brew tap laishulu/homebrew && brew install macism`
  (leaf sis
    :straight t
    :commands (sis-ism-lazyman-config sis-global-cursor-color-mode
                                      sis-global-respect-mode sis-global-inline-mode)
    ;; Use `emacs-startup` (not `emacs-startup-hook`) in leaf's :hook syntax.
    :hook (emacs-startup .
  		       (lambda ()
  			 ;; Defer IME wiring until after startup; avoid blocking init.
  			 (when (fboundp 'sis-ism-lazyman-config)
  			   (sis-ism-lazyman-config
  			    "com.apple.keylayout.ABC"
  			    "com.apple.inputmethod.Kotoeri.RomajiTyping.Japanese"
  			    'macism))
  			 (when (fboundp 'sis-global-cursor-color-mode)
  			   (sis-global-cursor-color-mode t))
  			 (when (fboundp 'sis-global-respect-mode)
  			   (sis-global-respect-mode t))
  			 (when (fboundp 'sis-global-inline-mode)
  			   (sis-global-inline-mode t)))))

  (add-hook 'after-load-theme-hook
            (lambda ()
              (set-face-background 'cursor (frame-parameter nil 'cursor-color))))

  ;; Logitech MX Ergo S Configuration
  (leaf *device/MX_ErgoS
    :init
    (setq mouse-wheel-scroll-amount '(1 ((shift) . 5) ((control) . 10))
          mouse-wheel-progressive-speed nil
          scroll-conservatively 10000
          scroll-margin 2
          scroll-preserve-screen-position t
          mac-mouse-wheel-smooth-scroll t
          mouse-wheel-tilt-scroll t
          mouse-wheel-flip-direction nil)

    (global-set-key [mouse-2] 'yank)
    (global-set-key [mouse-4] 'previous-buffer)
    (global-set-key [mouse-5] 'next-buffer))

  ;; Apple Music Controller (macOS only)
  (when (eq system-type 'darwin)
    ;; Core functions for AppleScript execution
    (defun my/apple-music-osascript-async (script &optional callback)
      "Run AppleScript SCRIPT asynchronously, calling CALLBACK with output."
      (let* ((proc-name "apple-music-async")
             (buffer-name "*Apple Music Async*")
             (osascript-cmd (list "osascript" "-e" script))
             (proc (apply #'start-process proc-name buffer-name osascript-cmd)))
        (when callback
          (set-process-sentinel
           proc
           (lambda (process event)
             (when (string= event "finished\n")
               (with-current-buffer (process-buffer process)
                 (let ((output (string-trim (buffer-string))))
                   (funcall callback output)))
               (kill-buffer (process-buffer process))))))))

    (defun my/apple-music-osascript-sync (script)
      "Run AppleScript SCRIPT synchronously and return trimmed output."
      (string-trim
       (shell-command-to-string
        (format "osascript -e '%s'" script))))

    ;; Player controls
    (defun my/apple-music-play-pause () (interactive)
      (my/apple-music-osascript-async "tell application \"Music\" to playpause"))

    (defun my/apple-music-next-track () (interactive)
      (my/apple-music-osascript-async "tell application \"Music\" to next track"))

    (defun my/apple-music-previous-track () (interactive)
      (my/apple-music-osascript-async "tell application \"Music\" to previous track"))

    ;; Track info
    (defun my/apple-music-current-track-info ()
      "Return current track info: Title — Artist [Album]."
      (interactive)
      (let ((info (my/apple-music-osascript-sync
                   "tell application \"Music\" \
  to (get name of current track) & \" — \" & (get artist of current track) & \" [\" & (get album of current track) & \"]\"")))
        (if (called-interactively-p 'any)
            (message "%s" info)
          info)))

    ;; Playlist support
    (defun my/apple-music-get-playlists ()
      "Return a list of playlist names from Apple Music."
      (split-string
       (my/apple-music-osascript-sync
        "tell application \"Music\" to get name of playlists")
       ", "))

    (defun my/apple-music-play-playlist (playlist)
      "Play the Apple Music playlist named PLAYLIST."
      (interactive
       (list (completing-read "Playlist: " (my/apple-music-get-playlists))))
      (my/apple-music-osascript-async
       (format "tell application \"Music\" to play playlist \"%s\"" playlist)))

    ;; Hydra interface
    (with-eval-after-load 'hydra
      (defhydra hydra-apple-music (:hint nil)
        "
  Apple Music:
  _p_: Play/Pause  _n_: Next  _b_: Back  _l_: Playlist  _i_: Info  _q_: Quit
  "
        ("p" my/apple-music-play-pause)
        ("n" my/apple-music-next-track)
        ("b" my/apple-music-previous-track)
        ("l" my/apple-music-play-playlist)
        ("i" my/apple-music-current-track-info)
        ("q" nil "quit"))

      (global-set-key (kbd "C-c m") #'hydra-apple-music/body)))

  (provide 'user)
  ;;; user.el ends here
#+end_src

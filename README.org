# -*- mode: org; coding: utf-8-unix; indent-tabs-mode: nil -*-
#+title: ac1965's Emacs literate configuration =.emacs.d=
#+startup: content
#+author: YAMASHITA Takao
#+options: auto-id:t H:6

[[file:demo.png]]

* Installation
This section documents the setup required to build and install Emacs from source.

#+begin_src shell :eval never
  $ git clone https://github.com/ac1965/.emacs.d ~/.emacs.d
#+end_src

You are cloning a GitHub repository (https://github.com/ac1965/.emacs.d) into the =~/.emacs.d= directory on your local machine.

- *Build Emacs*

You build Emacs using a script (=build-emacs.sh=) and want to specify the location of your GitHub repositories.

[[https://github.com/ac1965/dotfiles/blob/master/.local/bin/build-emacs.sh][build-emacs.sh]]

The following script builds Emacs with native compilation enabled. You need to set the `GITHUB_REPOS` environment variable to point to your source repository.

#+begin_src shell :eval never
  $ GITHUB_REPOS=/Users/ac1965/devel/src build-emacs.sh --native-compilation
#+end_src

- *System Information*

Below are the system details and Emacs build configurations for two machines.

#+begin_src shell :eval never
  uname -a
  Darwin pooh.local 24.2.0 Darwin Kernel Version 24.2.0: Fri Dec  6 19:04:03 PST 2024; root:xnu-11215.61.5~2/RELEASE_ARM64_T8132 arm64
#+end_src

- GNU Emacs 31.0.50
|-+-|
| Commit | 279a7d950ffff1b4f4a420848502a018b3998ee1 |
| Branch | master |
| System | aarch64-apple-darwin24.2.0 |
| Date | 2025-01-03 21:45:14 (JST) |
| Patch | without ns-inline.patch |
| Features | ACL DBUS GLIB GNUTLS LCMS2 LIBXML2 MODULES NATIVE_COMP NOTIFY KQUEUE NS PDUMPER PNG RSVG SQLITE3 THREADS TOOLKIT_SCROLL_BARS TREE_SITTER WEBP XIM XWIDGETS ZLIB |
|-+-|

*OLD Machine*

#+begin_src shell :eval never
  uname -a
  Darwin alice.local 24.3.0 Darwin Kernel Version 24.3.0: Fri Dec  9 19:45:54 PST 2024; root:xnu-11215.80.501.2~1/RELEASE_x86_64 x86_64
#+end_src

- GNU Emacs 31.0.50
|-+-|
| Commit | 63cc335a524ab5b6fb8e9bc93041382baf1321db |
| Branch | master |
| System | x86_64-apple-darwin24.1.0 |
| Date | 2024-12-28 21:12:21 (JST) |
| Patch | without ns-inline.patch |
| Features | ACL DBUS GIF GLIB GMP GNUTLS JPEG LCMS2 LIBXML2 MODULES NATIVE_COMP NOTIFY KQUEUE NS PDUMPER PNG RSVG SQLITE3 THREADS TIFF TOOLKIT_SCROLL_BARS TREE_SITTER WEBP XIM ZLIB |
|-+-|

* Emacs Configuration
** Header
#+begin_src emacs-lisp
  ;;; README.el --- Emacs.d -*- lexical-binding: t; -*-

  ;; Copyright (c) 2021-2025 YAMASHITA Takao <ac1965@ty07.net>
  ;; Licensed under the GNU General Public License version 3 or later.

  ;; $Lastupdate: 2025/01/04 21:47:31 $

  ;;; Commentary:

  ;;; Code:
#+end_src

** Leaf
/This Emacs configuration sets up package management and defines essential packages using `leaf` for a more structured approach. Here's a summary/

- *Package Management*
  - Sets the package directory with `package-user-dir` using `my:d:cache`.
  - Configures package archives (GNU and MELPA) and initializes the package system with `package-initialize`.

- *Leaf Setup*
  - Installs and initializes `leaf`, a package that simplifies package configuration in Emacs.
  - Adds support for additional ~leaf~ keywords using ~leaf-keywords~.


#+begin_src emacs-lisp
  ;;; Package Management
  (eval-and-compile
    (customize-set-variable
     'package-archives '(("gnu" . "https://elpa.gnu.org/packages/")
                         ("melpa" . "https://melpa.org/packages/")))
    (package-initialize)
    (use-package leaf :ensure t)
    (leaf leaf-keywords
      :ensure t
      :config (leaf-keywords-init)))
#+end_src

** User define
*Use Case:*
- This is useful in multi-user environments where different users have distinct Emacs preferences.
- Each user can have their own configuration file (e.g., `john.el`, `jane.el`), and this code will automatically load the appropriate one when they start Emacs.

*Explanation:*
- **`user-login-name`**: This is a built-in variable that contains the current user's login name.
- **`my:d`**: The directory where the user-specific configuration files are stored.
- **`user-specific-config`**: A variable that concatenates the user's login name with `.el` to determine the path of their individual configuration file (e.g., `john.el` for user "john").
- **`file-exists-p`**: This function checks whether the file exists at the computed path.
- **`load`**: If the file exists, the `load` function loads the user-specific configuration file.

*Purpose:*
- This setup allows each user to have a customized Emacs configuration file while still using a common Emacs setup. It can be especially useful in shared environments or multi-user systems.

Let me know if you need further adjustments or if this integrates well with your setup!


#+begin_src emacs-lisp
  
  ;; Loading user-specific settings.

  (setq user-specific-config (concat my:d user-login-name ".el"))
  (if (file-exists-p user-specific-config) (load user-specific-config))
#+end_src

** UI/Fonts
*** UI
*UI setting*
A modern look is achieved with golden-ratio, ef-themes, and teemacs. These packages adjust window sizes, set themes, and add a sidebar for file navigation.

*Explanation:*

- **Golden Ratio:**
  - Adjusts window sizes dynamically for an ideal viewing ratio using the `golden-ratio` package.

- **Themes:**
  - Loads the `ef-themes` package with the 'ef-frost' theme.

- **Modeline Enhancements:**
  - `minions` package for a clean and minimal modeline.
  - Displays time and battery status in the modeline.

- **Spacious Padding:**
  - Adds spacious padding to improve readability with the `spacious-padding` package.

- **Treemacs:**
  - Configures the Treemacs file explorer for easy navigation.

*Purpose:*
This setup enhances the Emacs user interface with a modern theme, dynamic window management, and a visually appealing modeline. It also integrates a file navigation sidebar (Treemacs), and adds features like spacious padding and tab line mode for a more comfortable and productive experience.


#+begin_src emacs-lisp
  ;;; UI Configurations using `leaf`

  (leaf UI
    :preface
    ;; Save and restore the window layout configuration.
    (defun my/save-window-layout ()
      "Save the current window configuration."
      (interactive)
      (setq my/saved-window-config (current-window-configuration))
      (message "Window configuration saved."))

    (defun my/restore-window-layout ()
      "Restore the saved window configuration.
  If no configuration is saved, notify the user."
      (interactive)
      (if my/saved-window-config
          (progn
            (set-window-configuration my/saved-window-config)
            (message "Window configuration restored."))
        (message "No window configuration to restore.")))

    ;; Function to display a buffer in the same window if possible.
    (defun my/display-buffer-same-window (buffer alist)
      "Reuse the currently selected window if possible."
      (unless (or (cdr (assq 'inhibit-same-window alist))
                  (window-minibuffer-p)
                  (window-dedicated-p))
        (window--display-buffer buffer (selected-window) 'reuse alist)))

    ;; Split the window below, starting from the root or parent window.
    (defun my/split-below (arg)
      "Split window below from the parent or root with ARG."
      (interactive "P")
      (split-window (if arg (frame-root-window)
                      (window-parent (selected-window)))
                    nil 'below nil))

    ;; Toggle the 'dedicated' status of the selected window.
    (defun my/toggle-window-dedication ()
      "Toggle window dedication for the selected window."
      (interactive)
      (set-window-dedicated-p (selected-window)
                              (not (window-dedicated-p (selected-window)))))

    :config
    ;; Set fullscreen mode when in a graphical display environment.
    (when (display-graphic-p)
      (set-frame-parameter nil 'fullscreen 'fullboth))

    ;; Use golden-ratio mode for dynamically resizing windows.
    (leaf golden-ratio
      :ensure t
      :global-minor-mode golden-ratio-mode
      :custom ((golden-ratio-adjust-factor . 1.2)
               (golden-ratio-auto-scale . t)))

    ;; Load a visually appealing theme (ef-frost).
    (leaf ef-themes
      :ensure t
      :config
      (load-theme 'ef-frost t))

    ;; Configure modeline for better visibility.
    (leaf modeline
      :config
      (leaf minions
        :ensure t
        :config
        (minions-mode 1)
        (setq minions-mode-line-lighter "[+]"))

      ;; Enable display of time and battery status in the mode-line.
      (setq display-time-interval 30
            display-time-day-and-date t
            display-time-24hr-format t)
      (display-time-mode 1)
      (when (display-battery-mode)
        (display-battery-mode 1)))

    ;; Add subtle padding to the mode-line and toggle with F7.
    (leaf spacious-padding
      :ensure t
      :config
      (setq spacious-padding-subtle-mode-line
            '( :mode-line-active 'default
               :mode-line-inactive vertical-border))
      (setq spacious-padding-widths '( :internal-border-width 15))
      (spacious-padding-mode 1)
      (define-key global-map (kbd "<f7>") #'spacious-padding-mode))

    ;; Enable global tab line mode.
    (leaf tabmode
      :config
      (global-tab-line-mode t))

    ;; Configure Treemacs for file and project navigation.
    (leaf treemacs
      :ensure t
      :bind
      (:treemacs-mode-map
       ([mouse-1] . #'treemacs-single-click-expand-action))
      :custom
      ((treemacs-no-png-images . nil)
       (treemacs-filewatch-mode . t)
       (treemacs-follow-mode . t)
       (treemacs-tag-follow-mode . nil)
       (treemacs-tag-follow-cleanup . nil)
       (treemacs-expand-after-init . t)
       (treemacs-indentation . 2)
       (treemacs-missing-project-action . 'remove))
      :hook
      (treemacs-mode-hook . (lambda ()
                              (setq mode-line-format nil)
                              (display-line-numbers-mode 0)))))
#+end_src
*** Fonts
*Fon ts setting*
nerd-icons provides icons in file listings. emojify adds emoji support in Org mode. Font settings are applied across frames.

*Explanation:*

- **Font Setup:**
  - `font-setup`: Sets up the font family and size, and also configures a Unicode font for emoji support with `Noto Color Emoji`.
  - `font-exists-p`: A utility function to check whether a given font exists in the system.
  - `conf:font-family` and `conf:font-size` are used to define the default font and size.

- **Nerd Icons:**
  - `nerd-icons`: Uses the `nerd-icons` package to display icons in file listings. A warning message appears if the Nerd Font is not installed.
  - `nerd-icons-dired`: Displays icons in `dired-mode` buffers.

- **Ligature (Ligatures):**
  - `ligature`: Defines ligatures for programming modes (e.g., `->`, `=>`, `&&`) and enables ligatures globally.

*Purpose:*
This configuration sets up attractive fonts and visual enhancements in Emacs. It supports file navigation with icons, displays emojis in Org mode, and defines ligatures to improve code readability. The overall user experience is enhanced with a clean and modern look.


#+begin_src emacs-lisp
  ;;; Font Configuration using `leaf` for improved font management and icon support.

  (leaf Fonts
    :preface
    ;; Check if a font exists on the system.
    (defun font-exists-p (font)
      "Check if FONT exists on the system."
      (member font (font-family-list)))

    ;; Set up the default font and icon fonts for a specific frame.
    (defun font-setup (&optional frame)
      "Set up the default font and icon fonts for FRAME."
      (when (font-exists-p conf:font-family)
        (set-face-attribute 'default frame :family conf:font-family
                            :height (* conf:font-size 10))
        ;; Configure Unicode fonts, such as emojis.
        (set-fontset-font t 'unicode
                          (font-spec :family "Noto Color Emoji") nil 'prepend)))

    :config
    ;; Default font family and size.
    (unless (boundp 'conf:font-family)
      (setq conf:font-family "JetBrains Mono")) ;; Default font family
    (unless (boundp 'conf:font-size)
      (setq conf:font-size 16)) ;; Default font size

    ;; Ensure fonts are loaded correctly in daemon mode or GUI startup.
    (if (daemonp)
        (add-hook 'after-make-frame-functions #'font-setup)
      (font-setup))

    ;; Configure Nerd Fonts for icons and UI enhancements.
    (leaf nerd-icons
      :if (display-graphic-p)
      :ensure t
      :config
      (unless (font-exists-p "Symbols Nerd Font Mono")
        (message "Nerd Font is not installed. Some icons may not display correctly.")))

    ;; Enable Nerd Icons in Dired mode for file management.
    (leaf nerd-icons-dired
      :if (display-graphic-p)
      :ensure t
      :hook (dired-mode-hook . nerd-icons-dired-mode))

    ;; Enable ligatures (special character combinations) for programming modes.
    (leaf ligature
      :ensure t
      :config
      (ligature-set-ligatures 'prog-mode '("->" "=>" "::" "===" "!=" "&&" "||" "|||"
                                           ":::" "!!" "??" "-->" "<--" "->>" "<<-"))
      (global-ligature-mode t)))
#+end_src

** Basic
/This configuration script includes basic settings and utilities aimed at improving the functionality and cleanliness of the Emacs environment. Here's a summary of the key components/

- *Basic*
  Editing and font settings improve readability and usability.
  We define settings for auto-saving, backup management, and basic editing features.


#+begin_src emacs-lisp
  ;;; Basic Configuration with `leaf`
  ;;; Refactored for Emacs 30+ using `leaf` and improved structure.

  ;; -----------------------------------------------------------------------------
  ;; 1. Insert a timestamp before saving the buffer
  ;; -----------------------------------------------------------------------------
  (leaf *lastupdate
    :doc "Automatically insert a last update timestamp before saving."
    :preface
    (defun my/save-buffer-wrapper ()
      "Insert a last update timestamp at the top of the buffer before saving."
      (interactive)
      (let ((tostr (concat "$Lastupdate: " (format-time-string "%Y/%m/%d %H:%M:%S") " $")))
        (save-excursion
          (goto-char (point-min))
          (while (re-search-forward "\\$Lastupdate\\([0-9/: ]*\\)?\\$" nil t)
            (replace-match tostr nil t)))))
    :hook (before-save-hook . my/save-buffer-wrapper))

  ;; -----------------------------------------------------------------------------
  ;; 2. macOS-specific environment variable integration
  ;; -----------------------------------------------------------------------------
  (leaf exec-path-from-shell
    :doc "Fetch environment variables from shell (macOS)."
    :if (memq window-system '(mac ns))
    :ensure t
    :commands (exec-path-from-shell-getenvs exec-path-from-shell-setenv)
    :custom ((exec-path-from-shell-check-startup-files . nil))
    :config
    (exec-path-from-shell-initialize))

  ;; -----------------------------------------------------------------------------
  ;; 3. Organize Emacs config and cache files using `no-littering`
  ;; -----------------------------------------------------------------------------
  (leaf no-littering
    :doc "Keep configuration and cache files cleanly organized."
    :ensure t
    :require t)

  ;; Safely load custom settings from `custom.el`
  (leaf cus-edit
    :doc "Load custom settings from a clean location."
    :custom `((custom-file . ,(concat no-littering-etc-directory "custom.el")))
    :config
    (ignore-errors (load custom-file)))

  ;; -----------------------------------------------------------------------------
  ;; 4. Desktop session management
  ;; -----------------------------------------------------------------------------
  (leaf *desktop
    :doc "Save and restore desktop sessions."
    :preface
    (defun my/save-desktop-session ()
      "Save the current desktop session."
      (interactive)
      (desktop-save desktop-dirname)
      (message "Desktop session saved."))
    (defun my/restore-desktop-session ()
      "Restore a previously saved desktop session."
      (interactive)
      (desktop-read)
      (message "Desktop session restored."))
    :config
    (setq desktop-dirname (concat no-littering-var-directory "desktop")
          desktop-save 'if-exists
          desktop-auto-save-timeout 180
          desktop-restore-eager 10
          desktop-restore-forces-onscreen nil)
    (desktop-save-mode 1)   ; Enable desktop saving
    (winner-mode 1))        ; Enable winner mode for window management

  ;; -----------------------------------------------------------------------------
  ;; 5. Automatically revert buffers when files change externally
  ;; -----------------------------------------------------------------------------
  (leaf autorevert
    :doc "Automatically reload buffers when files change."
    :global-minor-mode global-auto-revert-mode)

  ;; -----------------------------------------------------------------------------
  ;; 6. Automatic parenthesis pairing and highlighting
  ;; -----------------------------------------------------------------------------
  (leaf elec-pair
    :doc "Enable automatic pairing of parentheses."
    :global-minor-mode electric-pair-mode)

  (leaf paren
    :doc "Highlight matching parentheses."
    :custom ((show-paren-delay . 0)
             (show-paren-style . 'expression))
    :global-minor-mode show-paren-mode)

  (leaf puni
    :doc "Advanced parenthesis editing."
    :ensure t
    :global-minor-mode puni-global-mode)

  ;; -----------------------------------------------------------------------------
  ;; 7. Auto-save and backup settings
  ;; -----------------------------------------------------------------------------
  (leaf files
    :doc "Manage auto-save and backup settings."
    :preface
    (defun toggle-auto-save-visited-mode ()
      "Toggle `auto-save-visited-mode`."
      (interactive)
      (if auto-save-visited-mode
          (progn
            (auto-save-visited-mode -1)
            (message "auto-save-visited-mode disabled"))
        (progn
          (auto-save-visited-mode 1)
          (message "auto-save-visited-mode enabled"))))
    :custom `((auto-save-file-name-transforms . '((".*" ,(concat no-littering-var-directory "backup") t)))
              (backup-directory-alist . '(("." . ,(concat no-littering-var-directory "backup"))))
              (delete-old-versions . t)
              (auto-save-visited-interval . 1))
    :global-minor-mode auto-save-visited-mode)

  ;; -----------------------------------------------------------------------------
  ;; 8. Remote file editing with Tramp
  ;; -----------------------------------------------------------------------------
  (leaf tramp
    :doc "Edit remote files over SSH, SCP, etc."
    :pre-setq
    `((tramp-persistency-file-name . ,(concat no-littering-var-directory "tramp"))
      (tramp-auto-save-directory . ,(concat no-littering-var-directory "tramp-autosave")))
    :setq ((tramp-default-method . "scp")
           (tramp-encoding-shell . "/bin/bash")
           (tramp-debug-buffer . t)
           (tramp-verbose . 10)
           (tramp-shell-prompt-pattern . "\\(?:^\\|\r\\)[^]#$%>\n]*#?[]#$%>] *\\(^[\\[[0-9;]*[a-zA-Z] *\\)*")
           (tramp-use-ssh-controlmaster-options . nil)
           (tramp-password-prompt-regexp . '(concat
                                             "^.*"
                                             (regexp-opt
                                              '("passphrase" "Passphrase"
                                                "password" "Password"
                                                "Verification code")
                                              t)
                                             ".*:\0? *"))))

  ;; -----------------------------------------------------------------------------
  ;; 9. Miscellaneous settings for startup and history
  ;; -----------------------------------------------------------------------------
  (leaf startup
    :doc "Configure startup options."
    :custom `((auto-save-list-file-prefix . ,(concat no-littering-var-directory "backup/.saves-"))))

  (leaf savehist
    :doc "Save minibuffer history across sessions."
    :custom `((savehist-file . ,(concat no-littering-var-directory "savehist")))
    :global-minor-mode t)

  ;; -----------------------------------------------------------------------------
  ;; 10. Display keybindings in a helpful popup
  ;; -----------------------------------------------------------------------------
  (leaf which-key
    :doc "Display keybinding hints in a popup."
    :ensure t
    :global-minor-mode t)

  ;; -----------------------------------------------------------------------------
  ;; 11. Tree-sitter for advanced syntax highlighting
  ;; -----------------------------------------------------------------------------
  (leaf tree-sitter
    :doc "Enable Tree-sitter for better syntax highlighting and parsing."
    :ensure t
    :config
    (global-tree-sitter-mode)
    (add-hook 'tree-sitter-after-on-hook #'tree-sitter-hl-mode))

  (leaf tree-sitter-langs
    :doc "Install and load language grammars for Tree-sitter."
    :ensure t
    :config
    (tree-sitter-langs-install-grammars))
#+end_src

** Completion Framework
/This configuration script sets up a sophisticated *completion framework* for Emacs, utilizing a combination of packages to provide fast, flexible, and user-friendly completion across various contexts. Here's an overview of the key components/


#+begin_src emacs-lisp
  ;;; Completion Framework Configuration - Optimized for minimal keystrokes

  (leaf completion-settings
    :config
    ;; Prescient: Sort and filter candidates based on usage
    (leaf prescient
      :ensure t
      :custom
      ((prescient-aggressive-file-save . t))  ;; Save history after each update
      :global-minor-mode prescient-persist-mode)  ;; Enable persistence globally

    ;; Vertico: Vertical completion menu
    (leaf vertico
      :ensure t
      :global-minor-mode vertico-mode
      :custom
      ((vertico-count . 15))  ;; Show up to 15 candidates
      :config
      ;; Enable extensions for Vertico
      (leaf vertico-directory
        :after vertico)
      ;; Integrate prescient sorting with Vertico
      (leaf vertico-prescient
        :ensure t
        :after (vertico prescient)
        :global-minor-mode t)
      ;; Use posframe for cleaner display of completion candidates
      (leaf vertico-posframe
        :ensure t
        :custom
        ((vertico-posframe-border-width . 2)  ;; Thin borders for minimalism
         (vertico-posframe-parameters . '((left-fringe . 4)
                                          (right-fringe . 4))))
        :global-minor-mode vertico-posframe-mode))

    ;; Marginalia: Annotate completion options with useful information
    (leaf marginalia
      :ensure t
      :custom
      ((marginalia-annotators . '(marginalia-annotators-heavy
                                  marginalia-annotators-light
                                  nil)))
      :global-minor-mode marginalia-mode)

    ;; Consult: Powerful search and navigation tool
    (leaf consult
      :ensure t
      :custom
      ((xref-show-xrefs-function . #'consult-xref)
       (xref-show-definitions-function . #'consult-xref)))

    ;; Embark: Context-aware actions for completions
    (leaf embark
      :ensure t
      :custom
      ((prefix-help-command . #'embark-prefix-help-command))  ;; Use Embark for prefix help
      :config
      (leaf embark-consult
        :ensure t
        :after (embark consult)
        :hook (embark-collect-mode . consult-preview-at-point-mode)))  ;; Preview in Embark

    ;; Corfu: Minimal completion UI with support for inline suggestions
    (leaf corfu
      :ensure t
      :global-minor-mode global-corfu-mode
      :custom
      ((corfu-auto . t)  ;; Enable automatic popup for completion
       (corfu-auto-delay . 0)  ;; Instant popup after typing
       (corfu-auto-prefix . 2)  ;; Show popup after typing 2 characters
       (corfu-cycle . t))  ;; Allow cycling through candidates
      :config
      (corfu-popupinfo-mode)  ;; Display detailed information in popup
      ;; Key bindings for navigation and completion
      (define-key corfu-map (kbd "TAB") 'corfu-next)
      (define-key corfu-map (kbd "<tab>") 'corfu-next)
      (define-key corfu-map (kbd "S-TAB") 'corfu-previous)
      (define-key corfu-map (kbd "<backtab>") 'corfu-previous)
      (define-key corfu-map (kbd "RET") 'corfu-complete)
      ;; Prescient integration for sorting in Corfu
      (leaf corfu-prescient
        :ensure t
        :after (corfu prescient)
        :config
        (corfu-prescient-mode 1)))  ;; Enable prescient sorting in Corfu

    ;; Kind-icon: Add icons to completion candidates for better visualization
    (leaf kind-icon
      :ensure t
      :after corfu
      :custom
      ((kind-icon-default-face . 'corfu-default))  ;; Match corfu's UI for icons
      :config
      (add-to-list 'corfu-margin-formatters #'kind-icon-margin-formatter))  ;; Display icons in the margin

    ;; Cape: Extra completions at point for various use cases
    (leaf cape
      :ensure t
      :init
      (add-to-list 'completion-at-point-functions #'cape-file)  ;; Completion for file names
      (add-to-list 'completion-at-point-functions #'cape-dabbrev)  ;; Dynamic abbreviation completion
      (add-to-list 'completion-at-point-functions #'cape-keyword))  ;; Completion for keywords

    ;; Orderless: Enable fuzzy and flexible matching for completions
    (leaf orderless
      :ensure t
      :custom
      ((completion-styles . '(orderless basic))  ;; Use fuzzy matching by default
       (completion-category-defaults . nil)
       (completion-category-overrides . '((file (styles . (partial-completion))))))))

  ;; Auxiliary features for emacs-lisp-mode to improve editing
  (add-hook 'emacs-lisp-mode-hook #'eldoc-mode)
  (add-hook 'emacs-lisp-mode-hook #'xref-etags-mode)
  (add-hook 'emacs-lisp-mode-hook #'flycheck-mode)
  (when (executable-find "parinfer-rust-server")
    (add-hook 'emacs-lisp-mode-hook #'parinfer-rust-mode))
#+end_src

** Utilties Package
/Miscellaneous functions that improve user experience and add extra utility./

These include toggling line numbers, switching window layouts, and custom functions for buffer management and Dired mode.


#+begin_src emacs-lisp
  ;;; Utilities Package Configuration with `leaf`
  ;;; Refactored for Emacs 30+ using `leaf` and added proper documentation.

  ;; -----------------------------------------------------------------------------
  ;; 1. Enable `visual-line-mode` globally for better word wrapping
  ;; -----------------------------------------------------------------------------
  (leaf visual-line-mode
    :doc "Enable global visual-line-mode for improved word wrapping."
    :global-minor-mode t)

  ;; -----------------------------------------------------------------------------
  ;; 2. macOS clipboard integration using `pbcopy`
  ;; -----------------------------------------------------------------------------
  (leaf pbcopy
    :doc "Support macOS clipboard integration via pbcopy."
    :if (memq window-system '(mac ns))
    :ensure t)

  ;; -----------------------------------------------------------------------------
  ;; 3. Utility packages for editing and file management
  ;; -----------------------------------------------------------------------------

  ;; Enhance Dired capabilities
  (leaf dired-filter
    :doc "Add filtering capabilities to Dired."
    :ensure t)

  ;; Quickly expand the selected region
  (leaf expand-region
    :doc "Expand the selection region incrementally."
    :ensure t)

  ;; Undo management with redo support
  (leaf undo-fu
    :doc "Provides enhanced undo/redo functionality."
    :ensure t)

  ;; Enable aggressive indentation globally
  (leaf aggressive-indent
    :doc "Automatically and aggressively indent code as you type."
    :ensure t
    :global-minor-mode global-aggressive-indent-mode)

  ;; Enable deletion of selected text when typing
  (leaf delsel
    :doc "Replace the selected region when typing."
    :global-minor-mode delete-selection-mode)

  ;; -----------------------------------------------------------------------------
  ;; 4. Search and navigation utilities
  ;; -----------------------------------------------------------------------------

  ;; Ripgrep integration for fast searching
  (leaf rg
    :doc "Integrate Ripgrep for fast file searching."
    :ensure t)

  ;; Dumb Jump integration for quick navigation
  (leaf dumb-jump
    :doc "Enable context-aware code navigation using dumb-jump."
    :ensure t
    :after rg
    :hook ((xref-backend-functions . dumb-jump-xref-activate))
    :custom ((dumb-jump-force-searcher . 'rg)))

  ;; -----------------------------------------------------------------------------
  ;; 5. Multi-cursor editing support
  ;; -----------------------------------------------------------------------------
  (leaf multiple-cursors
    :doc "Enable multi-cursor editing."
    :ensure t)

  ;; -----------------------------------------------------------------------------
  ;; 6. Version control with Magit
  ;; -----------------------------------------------------------------------------
  (leaf magit
    :doc "Version control interface for Git."
    :ensure t)

  ;; -----------------------------------------------------------------------------
  ;; 7. Syntax checking utilities
  ;; -----------------------------------------------------------------------------

  ;; Built-in Flymake syntax checker
  (leaf flymake
    :doc "Enable Flymake for on-the-fly syntax checking."
    :ensure t
    :global-minor-mode t)

  ;; Flycheck for advanced syntax checking
  (leaf flycheck
    :doc "Enable Flycheck for enhanced syntax checking."
    :ensure t
    :global-minor-mode t)

  ;; -----------------------------------------------------------------------------
  ;; 8. Spell checking with Flyspell
  ;; -----------------------------------------------------------------------------
  (leaf flyspell
    :doc "Enable Flyspell for spell checking in text modes."
    :ensure t
    :hook (text-mode . flyspell-mode)
    :custom ((ispell-program-name . "aspell")))

  ;; -----------------------------------------------------------------------------
  ;; 9. Project management with Projectile
  ;; -----------------------------------------------------------------------------
  (leaf projectile
    :doc "Enable Projectile for project management."
    :ensure t
    :global-minor-mode t)

  ;; -----------------------------------------------------------------------------
  ;; 10. Snippet management with Yasnippet
  ;; -----------------------------------------------------------------------------
  (leaf yasnippet
    :doc "Enable Yasnippet for snippet expansion."
    :ensure t
    :global-minor-mode yas-global-mode)

  ;; -----------------------------------------------------------------------------
  ;; 11. EasyPG (GPG encryption) configuration
  ;; -----------------------------------------------------------------------------
  (leaf epa-file
    :doc "Enable EasyPG for encrypted file handling."
    :require t
    :config
    (epa-file-enable)
    (custom-set-variables '(epg-gpg-program "gpg"))
    (setq epa-pinentry-mode 'loopback))

  ;; -----------------------------------------------------------------------------
  ;; 12. Advanced AI-assisted utilities with Ellama
  ;; -----------------------------------------------------------------------------
  (leaf ellama
    :doc "Enable Ellama for AI-assisted tasks such as translation."
    :after llm-ollama
    :ensure t
    :init
    (setopt ellama-language "Japanese")
    (setopt ellama-sessions-directory (concat no-littering-var-directory "ellama-sessions"))
    (setopt ellama-naming-scheme 'ellama-generate-name-by-llm)
    (setopt ellama-provider (make-llm-ollama
                             :chat-model "codestral:22b-v0.1-q4_K_S"
                             :embedding-model "codestral:22b-v0.1-q4_K_S"))
    (setopt ellama-translation-provider (make-llm-ollama
                                         :chat-model "llama3:8b-instruct-q8_0"
                                         :embedding-model "llama3:8b-instruct-q8_0"))
    (setopt ellama-providers
            '(("codestral" . (make-llm-ollama
                              :chat-model "codestral:22b-v0.1-q4_K_S"
                              :embedding-model "codestral:22b-v0.1-q4_K_S"))
              ("gemma2" . (make-llm-ollama
                           :chat-model "gemma2:27b-instruct-q4_K_S"
                           :embedding-model "gemma2:27b-instruct-q4_K_S"))
              ("llama3.2-vision" . (make-llm-ollama
                                    :chat-model "llama3:8b-instruct-q8_0"
                                    :embedding-model "llama3:8b-instruct-q8_0")))))

  ;; -----------------------------------------------------------------------------
  ;; 13. Language support and programming utilities
  ;; -----------------------------------------------------------------------------

  ;; Enable useful minor modes in all programming modes
  (leaf prog-mode
    :doc "Enable useful minor modes for all programming languages."
    :hook
    (prog-mode-hook . (lambda ()
                        (display-line-numbers-mode)
                        (electric-pair-mode))))

  ;; LSP mode for advanced language support
  (leaf lsp-mode
    :doc "Enable LSP for advanced language support."
    :ensure t
    :commands lsp
    :hook
    ((python-mode-hook go-mode-hook rust-mode-hook) . lsp)
    :config
    (setq lsp-enable-symbol-highlighting t
          lsp-signature-auto-activate nil
          lsp-disabled-clients '(copilot-ls)))

  (leaf lsp-ui
    :doc "Enhance LSP mode with UI features."
    :ensure t
    :after lsp-mode
    :custom
    ((lsp-ui-doc-enable . t)
     (lsp-ui-doc-delay . 0.2)
     (lsp-ui-sideline-enable . t)))

  (leaf parinfer-rust-mode
    :doc "Enable Parinfer for Lisp editing."
    :ensure t
    :hook (clojure-mode emacs-lisp-mode common-lisp-mode scheme-mode lisp-mode)
    :init
    (setq parinfer-rust-auto-download t))

  ;; Eglot as an alternative LSP client
  (leaf eglot
    :doc "Enable Eglot as an alternative LSP client."
    :ensure t
    :config
    (add-to-list 'eglot-server-programs '((js-mode js-ts-mode typescript-mode typescript-ts-mode) . (eglot-deno "deno" "lsp")))
    (setq eglot-ignored-server-capabilities '(:documentHighlightProvider :inlayHintProvider)
          eldoc-echo-area-use-multiline-p nil)
    :hook
    ((sh-mode c-mode c++-mode python-mode ruby-mode rust-mode html-mode css-mode js-mode) . eglot-ensure))
#+end_src

** Keybind
/This Emacs configuration defines custom key bindings using the `leaf` package to streamline common tasks. Here's a summary of the key aspects/

- *Key Bindings*
  Custom keybindings provide shortcuts for common actions, improving efficiency by reducing the need to rely on menus or commands.
  Here we set up custom bindings for window navigation, editing, and more.


#+begin_src emacs-lisp
  (leaf KeyBinding
    :preface
    (defun my/toggle-linum-lines ()
      "Toggle display line number."
      (interactive)
      (display-line-numbers-mode (if display-line-numbers-mode -1 1)))

    (defun my/toggle-window-split ()
      "Toggle window split between horizontal and vertical."
      (interactive)
      (if (= (count-windows) 2)
          (let* ((this-win-buffer (window-buffer))
                 (next-win-buffer (window-buffer (next-window)))
                 (this-win-edges (window-edges (selected-window)))
                 (next-win-edges (window-edges (next-window)))
                 (this-win-2nd
                  (not (and (<= (car this-win-edges)
                                (car next-win-edges))
                            (<= (cadr this-win-edges)
                                (cadr next-win-edges)))))
                 (splitter
                  (if (= (car this-win-edges)
                         (car (window-edges (next-window))))
                      'split-window-horizontally
                    'split-window-vertically)))
            (delete-other-windows)
            (let ((first-win (selected-window)))
              (funcall splitter)
              (if this-win-2nd (other-window 1))
              (set-window-buffer (selected-window) this-win-buffer)
              (set-window-buffer (next-window) next-win-buffer)
              (select-window first-win)
              (if this-win-2nd (other-window 1))))))

    (defun my/dired-view-file-other-window ()
      "Open the selected file or directory in another window.

  If the target is a directory, navigate to it.
  If the target is a file, open it in read-only mode in another window."
      (interactive)
      (let ((file (dired-get-file-for-visit)))
        (if (file-directory-p file)
            (or (and (cdr dired-subdir-alist)
                     (dired-goto-subdir file))
                (dired file))
          (view-file-other-window file))))

    (defun my/find-keybinding-conflicts ()
      "Find and display keybinding conflicts in all active keymaps."
      (interactive)
      (let ((conflicts (make-hash-table :test 'equal))
            (buffer-name "*Keybinding Conflicts*"))
        ;; Collect conflicts from all active keymaps
        (mapatoms (lambda (keymap)
                    (when (and (boundp keymap) (keymapp (symbol-value keymap)))
                      (map-keymap (lambda (_ key-binding)
                                    (when (keymapp key-binding)
                                      (map-keymap
                                       (lambda (key cmd)
                                         ;; Only process valid commands
                                         (when (or (symbolp cmd) (functionp cmd))
                                           (let* ((key (vector key))
                                                  (existing (gethash key conflicts)))
                                             (if existing
                                                 (puthash key (cons cmd existing) conflicts)
                                               (puthash key (list cmd) conflicts)))))
                                       key-binding)))
                                  (symbol-value keymap)))))
        ;; Create and populate the result buffer
        (with-current-buffer (get-buffer-create buffer-name)
          (read-only-mode -1) ; Ensure the buffer is writable
          (erase-buffer)      ; Clear any previous content
          (insert "Keybinding Conflicts:\n\n")
          (maphash (lambda (key cmds)
                     (when (> (length cmds) 1)
                       (insert (format "%s => %s\n"
                                       (key-description key)
                                       (mapconcat (lambda (cmd)
                                                    (if (symbolp cmd)
                                                        (symbol-name cmd)
                                                      (format "%s" cmd)))
                                                  cmds ", ")))))
                   conflicts)
          (read-only-mode 1)) ; Make the buffer read-only for safety
        ;; Display the buffer
        (switch-to-buffer buffer-name)))

    (defun my/replace-string-in-buffer ()
      "Prompt the user for a string to replace and its replacement,
  then replace all occurrences in the buffer."
      (interactive)
      (let ((from (read-string "Replace: "))
            (to (read-string "With: ")))
        (save-excursion
          (goto-char (point-min))
          (while (search-forward from nil t)
            (replace-match to nil t)))))

    (defun my/open-init-file ()
      "Open the init file for quick access."
      (interactive)
      (find-file user-init-file))

    :config
    (leaf-keys
     ;; Basic editing operations
     (("C-h"           . backward-delete-char)  ;; Delete character before the cursor
      ("C-?"           . help-command)          ;; Open help
      ("C-/"           . undo-fu-only-undo)     ;; Undo
      ("C-z"           . undo-fu-only-redo)     ;; Redo
      ("C-c i"         . my/open-init-file)     ;; Open init file

      ;; Window navigation
      ("M-o"          . ace-window)             ;; Quick window switch
      ("C-."          . other-window)           ;; Switch to the other window
      ("C-c w l"      . my/toggle-linum-lines)  ;; Toggle line numbers
      ("C-c w 2"      . my/split-below)
      ("C-c w d"      . my/toggle-window-dedication)
      ("C-c w s"      . my/save-window-layout)
      ("C-c w r"      . my/restore-window-layout)
      ("C-c d s"      . my/save-desktop-session)
      ("C-c d r"      . my/restore-desktop-session)

      ;; Text scaling
      ("C-+"          . text-scale-increase)    ;; Increase text size
      ("C--"          . text-scale-decrease)    ;; Decrease text size

      ;; Emacs control
      ("C-q"          . kill-emacs)             ;; Quit Emacs
      ("M-q"          . save-buffers-kill-emacs) ;; Save buffers and quit

      ;; Commenting
      ("C-c ;"        . comment-region)         ;; Comment selected region
      ("C-c :"        . uncomment-region)       ;; Uncomment selected region

      ;; File operations
      ("C-c o"        . find-file)              ;; Open file
      ("C-c v"        . find-file-read-only)    ;; Open file in read-only mode
      ("C-c z"        . toggle-auto-save-visited-mode) ;; Toggle auto-save-visited-mode

      ;; Buffer operations
      ("C-c k"        . kill-buffer-and-window) ;; Kill buffer and close window

      ;; Search and replace
      ("C-c r" . my/replace-string-in-buffer)   ;; Replace string in buffer
      ("C-c C-r"      . consult-ripgrep)        ;; Ripgrep search

      ;; Sidebar
      ("C-c t t"      . treemacs)

      ;; Alignment and line number toggle
      ("C-c M-a"      . align-regexp)           ;; Align using regex

      ;; Org Capture
      ("C-c a"        . org-agenda)
      ("C-c l"        . org-store-link)
      ("C-c c"        . org-capture)            ;; Capture Org entry

      ;; Scrolling
      ("C-s-<up>"     . scroll-down-command)    ;; Scroll down
      ("C-s-<down>"   . scroll-up-command)      ;; Scroll up

      ;; Frame management
      ("s-o"          . find-file-other-frame)  ;; Open file in other frame
      ("s-m"          . make-frame)             ;; Create a new frame
      ("s-w"          . delete-frame)           ;; Delete current frame
      ("s-."          . my/toggle-window-split) ;; Toggle window split
      ("s-j"          . find-file-other-window) ;; Open file in other window
      ("s-r"          . restart-emacs)          ;; Restart Emacs

      ;; Buffer navigation
      ("s-<up>"       . beginning-of-buffer)    ;; Go to the beginning of the buffer
      ("s-<down>"     . end-of-buffer)          ;; Go to the end of the buffer

      ;; Scroll other window
      ("s-<wheel-up>"   . scroll-other-window)      ;; Scroll other window up
      ("s-<wheel-down>" . scroll-other-window-down) ;; Scroll other window down

      ;; Expand region
      ("C-="          . er/expand-region)       ;; Expand selected region

      ;; Multiple cursors
      ("C-S-c C-S-c"  . mc/edit-lines)          ;; Edit multiple lines
      ("C->"          . mc/mark-next-like-this) ;; Mark next occurrence
      ("C-<"          . mc/mark-previous-like-this) ;; Mark previous occurrence
      ("C-c C-<"      . mc/mark-all-like-this)  ;; Mark all occurrences

      ;; Magit
      ("C-x g"        . magit-status)           ;; Open Magit status

      ;; Embark
      ("s-."          . embark-act)             ;; Embark action
      ("s-,"          . embark-dwim)            ;; Embark Do What I Mean
      ("C-<f2>"       . embark-bindings)        ;; Embark key bindings

      ;; Marginalia
      ("M-A"          . marginalia-cycle)       ;; Cycle annotation styles

      ;; Acewindow
      ("M-o"          . ace-window)             ;; Quick window switch

      ;; Consult for extended search
      ("C-s"          . consult-line)           ;; Search in buffer
      ("M-g g"        . consult-goto-line)      ;; Go to line
      ("M-g i"        . consult-imenu)          ;; Search functions in buffer
      ("M-g b"        . consult-buffer)         ;; Buffer switch

      ;; Miscellaneous
      ("M-x"          . execute-extended-command))) ;; Execute extended command

    ;; Keybinding redefinition
    (global-set-key (kbd "C-c r") nil)

    ;; Enable Windmove keybindings for window navigation
    (windmove-default-keybindings)

    ;; Dired Mode Custom Keybinding
    (add-hook 'dired-mode-hook
              (lambda ()
                (define-key dired-mode-map "z" 'my/dired-view-file-other-window))))
#+end_src

** Org Package  

#+begin_src emacs-lisp
  ;;; Org-mode Setup with `leaf`
  ;;; Refactored for Emacs 30+ using `leaf` with proper documentation.

  ;; -----------------------------------------------------------------------------
  ;; 1. Core Org-mode configuration
  ;; -----------------------------------------------------------------------------
  (leaf org
    :doc "Core configuration for Org-mode."
    :leaf-defer t
    :preface
    (defvar warning-suppress-types nil)

    ;; Return list of opened Org-mode buffer files
    (defun org-buffer-files ()
      "Return a list of opened Org-mode buffer files."
      (mapcar #'buffer-file-name
              (org-buffer-list 'files)))

    ;; Show Org buffer in the current window
    (defun show-org-buffer (file)
      "Show an Org-mode file in the current buffer."
      (interactive)
      (if (get-buffer file)
          (let ((buffer (get-buffer file)))
            (switch-to-buffer buffer)
            (message "%s" file))
        (find-file (concat org-directory "/" file))))

    :init
    (setq org-directory (expand-file-name "Org/" my:d:cloud)
          org-startup-indented t
          org-ellipsis " ▾"
          org-hide-leading-stars t
          org-log-done 'time
          org-startup-truncated nil
          org-startup-folded 'content
          org-use-speed-commands t
          org-enforce-todo-dependencies t)

    ;; Ensure org-directory exists
    (unless (file-exists-p org-directory)
      (make-directory org-directory))

    ;; Suppress certain warnings
    (setq warning-suppress-types (append warning-suppress-types '((org-element-cache))))

    :custom
    (org-support-shift-select . t)

    :bind
    (("C-M--" . (lambda () (interactive) (show-org-buffer "gtd.org")))
     ("C-M-^" . (lambda () (interactive) (show-org-buffer "notes.org")))
     ("C-M-~" . (lambda () (interactive) (show-org-buffer "kb.org"))))

    :config
    (setq org-agenda-files (list org-directory)
          org-default-notes-file "notes.org"
          org-todo-keywords '((sequence "TODO(t)" "SOMEDAY(s)" "WAITING(w)" "|" "DONE(d)" "CANCELED(c@)"))
          org-refile-targets '((nil :maxlevel . 3)
                               (org-buffer-files :maxlevel . 1)
                               (org-agenda-files :maxlevel . 3)))

    ;; Define capture templates
    (setq org-capture-templates
          '(("t" "Todo" entry (file+headline "gtd.org" "Inbox")
             "* TODO %?\n %i\n %a")
            ("n" "Note" entry (file+headline "notes.org" "Notes")
             "* %?\nEntered on %U\n %i\n %a")
            ("j" "Journal" entry (function org-journal-find-location)
             "* %(format-time-string org-journal-time-format)%^{Title}\n%i%?")
            ("m" "Meeting" entry (file "meetings.org")
             "* MEETING with %? :meeting:\n  %U\n  %a"))))

  ;; -----------------------------------------------------------------------------
  ;; 2. Org-mode extensions and utilities
  ;; -----------------------------------------------------------------------------

  (leaf org-bullets
    :doc "Use fancy bullets for Org headlines."
    :ensure t
    :hook (org-mode . org-bullets-mode))

  (leaf org-superstar
    :doc "Enable fancy bullets and formatting for Org-mode."
    :ensure t
    :custom (org-superstar-headline-bullets-list . '("◉" "★" "○" "▷" ""))
    :hook (org-mode-hook . org-superstar-mode))

  (leaf org-latex
    :doc "Configure LaTeX export for Org-mode."
    :after org
    :custom (org-latex-packages-alist . '(("" "graphicx" t)
                                          ("" "longtable" nil)
                                          ("" "wrapfig" nil)))
    (org-latex-pdf-process . '("pdflatex -interaction nonstopmode -output-directory %o %f"
                               "pdflatex -interaction nonstopmode -output-directory %o %f")))

  (leaf ob
    :doc "Enable Babel support for multiple languages in Org-mode."
    :after org
    :config
    (org-babel-do-load-languages
     'org-babel-load-languages
     '((emacs-lisp . t)
       (shell . t)
       (python . t)
       (R . t)
       (ditaa . t)
       (plantuml . t))))

  (leaf org-download
    :doc "Enable image downloads in Org-mode."
    :ensure t
    :after org
    :config
    (setq org-download-image-dir (concat org-directory "/pictures")))

  (leaf org-journal
    :doc "Enable journaling in Org-mode."
    :ensure t
    :after org
    :config
    (setq org-journal-dir (concat org-directory "/journal")
          org-journal-enable-agenda-integration t)
    (defun org-journal-find-location ()
      "Open today's journal and position point at the top-level heading."
      (org-journal-new-entry t)
      (goto-char (point-min))))

  ;; -----------------------------------------------------------------------------
  ;; 3. Knowledge management with Org-roam
  ;; -----------------------------------------------------------------------------
  (leaf org-roam
    :doc "Enable Org-roam for personal knowledge management."
    :ensure t
    :after org
    :bind (("C-c n l" . org-roam-buffer-toggle)
           ("C-c n f" . org-roam-node-find)
           ("C-c n g" . org-roam-graph)
           ("C-c n i" . org-roam-node-insert)
           ("C-c n c" . org-roam-capture)
           ("C-c n j" . org-roam-dailies-capture-today))
    :config
    (setq org-roam-directory (concat org-directory "/org-roam"))
    (org-roam-db-autosync-mode))

  ;; -----------------------------------------------------------------------------
  ;; 4. Export to Hugo using ox-hugo
  ;; -----------------------------------------------------------------------------
  (leaf ox-hugo
    :doc "Enable export of Org files to Hugo markdown format."
    :ensure t
    :after ox
    :custom (org-hugo-front-matter-format . "toml"))

  ;; ox-hugo-capture
  (leaf *ox-hugo--capture
    :require org-capture
    :defvar (org-capture-templates)
    :config
    (add-to-list 'org-capture-templates
                 '("b" "Create new blog post" entry
                   (file+headline my-capture-blog-file "blog")
                   "** TODO %?
  :PROPERTIES:
  :EXPORT_FILE_NAME: %(apply #'format \"%s-%s-%s\"
  (format-time-string \"%Y\")
  (let ((sha1 (sha1 (shell-command-to-string \"head -c 1024 /dev/urandom\"))))
  (cl-loop for (a b c d) on (cdr (split-string sha1 \"\")) by #'cddddr repeat 2 collect (concat a b c d))))
  :EXPORT_DATE:
  :EXPORT_HUGO_TAGS:
  :EXPORT_HUGO_CATEGORIES:
  :EXPORT_HUGO_LASTMOD:
  :EXPORT_HUGO_CUSTOM_FRONT_MATTER: :pin false
  :END:
  \n
  ")))

  (leaf markdown-mode
    :ensure t
    :mode ("\\.md\\'" . markdown-mode)))

  ;; -----------------------------------------------------------------------------
  ;; 5. Markdown mode support
  ;; -----------------------------------------------------------------------------
  (leaf markdown-mode
    :doc "Enable markdown editing mode."
    :ensure t
    :mode ("\\.md\\'" . markdown-mode))

  (leaf toc-org
    :doc "Enable table of contents generation for Org and Markdown files."
    :ensure t
    :after (org markdown-mode)
    :hook ((org-mode . toc-org-enable)
           (markdown-mode . toc-org-mode))
    :bind (:map markdown-mode-map
                ("C-c C-o" . toc-org-markdown-follow-thing-at-point)))
#+end_src

** Footer
#+begin_src emacs-lisp

  (provide 'README)
  ;;; README.el ends here
#+end_src

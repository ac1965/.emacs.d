#+title: ac1965's Emacs literate configuration =.emacs.d=
#+startup: content
#+author: YAMASHITA Takao
#+options: auto-id:t H:6
#+property: header-args:emacs-lisp :tangle README.el :results silent

[[file:demo.png]]

* Installation

This section documents the steps to build and install Emacs from source safely and effectively.

** Step 1: Clone the Configuration Repository
Run the following command to clone the configuration files from GitHub:

#+begin_src shell :eval never
  git clone --depth 1 https://github.com/ac1965/.emacs.d ~/.emacs.d
#+end_src

Make sure that the =~/.emacs.d= directory does not already exist, or back it up if necessary.

** Step 2: Build Emacs

To build Emacs, use the provided =build-emacs.sh= script. You must set the =GITHUB_REPOS= environment variable to the location of your source repositories:
[[https://github.com/ac1965/dotfiles/blob/master/.local/bin/build-emacs.sh][ build-emacs.sh]]

#+begin_src shell :eval never
  export GITHUB_REPOS=/Users/ac1965/devel/src
  build-emacs.sh --native-compilation
#+end_src

** Requirements and Troubleshooting

- *Dependencies*: Ensure you have the following installed before running the script:
  - `gcc` (Version 10 or newer)
  - `libgccjit`
  - `make`

- *Permissions*: If you encounter permission issues, try running the script with `sudo`, but only after verifying its contents.

- *Error Handling*:
  - If native compilation fails, check that `libgccjit` is installed and properly linked.
  - Verify that the `GITHUB_REPOS` directory exists and contains the necessary source files.

** System Information

Below are the system details and Emacs build configurations for two machines.

*New Machine*

#+begin_src shell :eval never
  uname -a
  Darwin pooh.local 24.4.0 Darwin Kernel Version 24.4.0: Fri Apr 11 18:32:05 PDT 2025; root:xnu-11417.101.15~117/RELEASE_ARM64_T8132 arm64
#+end_src

- GNU Emacs 31.0.50

|Commit|9659f8aa344f73164bece7408d63991531fc115d|
|Branch|master|
|System|aarch64-apple-darwin24.4.0|
|Date|2025-05-16 21:55:33 (JST)|
|Patch|without ns-inline.patch|
|Features|ACL DBUS GLIB GNUTLS LCMS2 LIBXML2 MODULES NATIVE_COMP NOTIFY KQUEUE NS PDUMPER PNG RSVG SQLITE3 THREADS TOOLKIT_SCROLL_BARS TREE_SITTER WEBP XIM XWIDGETS ZLIB|
|Options|--with-native-compilation --with-gnutls=ifavailable --with-json --with-modules --with-tree-sitter --with-xml2 --with-xwidgets --with-librsvg --with-mailutils --with-native-image-api --with-cairo CPPFLAGS=-I/opt/homebrew/opt/llvm/include 'LDFLAGS=-L/opt/homebrew/opt/llvm/lib -L/opt/homebrew/opt/llvm/lib/c++ -Wl,-rpath,/opt/homebrew/opt/llvm/lib/c++'|

*OLD Machine*

#+begin_src shell :eval never
  uname -a
  Darwin alice.local 24.3.0 Darwin Kernel Version 24.3.0: Fri Dec  9 19:45:54 PST 2024; root:xnu-11215.80.501.2~1/RELEASE_x86_64 x86_64
#+end_src

- GNU Emacs 31.0.50

|Commit|aa12cebaa684d7b3ea7e131666d33bcc71b45625|
|Branch|master|
|System|x86_64-apple-darwin24.4.0|
|Date|2025-03-23 10:35:38 (JST)|
|Patch|without ns-inline.patch|
|Features|ACL DBUS GIF GLIB GMP GNUTLS JPEG LCMS2 LIBXML2 MODULES NATIVE_COMP NOTIFY KQUEUE NS PDUMPER PNG RSVG SQLITE3 THREADS TIFF TOOLKIT_SCROLL_BARS TREE_SITTER WEBP XIM XWIDGETS ZLIB|
|Options|--with-native-compilation --with-gnutls=ifavailable --with-json --with-modules --with-tree-sitter --with-xml2 --with-xwidgets --with-librsvg CFLAGS=-I/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include CPPFLAGS=-I/usr/local/opt/llvm/include 'LDFLAGS=-L/usr/local/opt/llvm/lib -L/usr/local/opt/llvm/lib/c++ -Wl,-rpath,/usr/local/opt/llvm/lib/c++'|

* Emacs Configuration

** Header

#+begin_src emacs-lisp
  ;;; README.el --- Emacs Configuration -*- lexical-binding: t; -*-

  ;; Copyright (c) 2021-2025 YAMASHITA Takao <ac1965@ty07.net>
  ;; Licensed under the GNU General Public License version 3 or later.

  ;; $Lastupdate: 2025/05/17 12:01:44 $

  ;;; Commentary:
  ;; This file provides a structured Emacs configuration setup using `leaf`.
  ;; It includes package management, user-specific settings, and modular design.

  ;;; Code:
#+end_src

** Package Management with `leaf`

#+begin_src emacs-lisp
  (eval-and-compile
    (require 'package)
    (customize-set-variable
     'package-archives
     '(("gnu" . "https://elpa.gnu.org/packages/")
       ("melpa" . "https://melpa.org/packages/")))
    (package-initialize)

    (unless (package-installed-p 'leaf)
      (package-refresh-contents)
      (package-install 'leaf)))

  (require 'leaf)
#+end_src

** User-Specific Configuration

#+begin_src emacs-lisp
  ;; Loading user-specific settings.
  (setq user-specific-config (concat my:d user-login-name ".el"))
  (if (file-exists-p user-specific-config) (load user-specific-config))
#+end_src

** UI/Fonts/Keybind
*** UI

#+begin_src emacs-lisp
  ;; Enable fullscreen mode in graphical environments
  (when (display-graphic-p)
    (set-frame-parameter nil 'fullscreen 'fullboth))

  ;; Dynamic window resizing using golden-ratio
  (leaf golden-ratio
    :ensure t
    :hook (after-init-hook . golden-ratio-mode)
    :custom ((golden-ratio-adjust-factor . 1.1)
             (golden-ratio-auto-scale . t)
             (golden-ratio-exclude-modes . '("ediff-mode" "dired-mode"))))

  ;; Use ef-themes for consistent UI aesthetics
  (leaf ef-themes
    :ensure t
    :config
    (if (display-graphic-p)
        (load-theme 'ef-frost t)
      (load-theme 'deeper-blue t)))

  ;; Add spacious padding for better readability
  (leaf spacious-padding
    :ensure t
    :custom
    ((spacious-padding-subtle-mode-line . '( :mode-line-active default
                      :mode-line-inactive vertical-border))
     (spacious-padding-widths . '(:internal-border-width 10)))
    :config
    (spacious-padding-mode 1))

  (leaf minions
    :ensure t
    :config
    (setq minions-mode-line-lighter "âš™")
    (minions-mode 1))

  ;; Display time and battery status in the mode-line
  (setq display-time-interval 30
        display-time-day-and-date t
        display-time-24hr-format t)
  (setq battery-mode-line-format "[ðŸ”‹ %p%%]")
  (display-time-mode 1)
  (display-battery-mode 1)

  (leaf tab-bar
    :custom ((tab-bar-show . 1)
             (tab-bar-new-tab-choice . "*scratch*"))
    :config
    (tab-bar-mode 1)
    (global-tab-line-mode 1))

  (leaf treemacs
    :ensure t
    :bind (:treemacs-mode-map
           ([mouse-1] . #'treemacs-single-click-expand-action))
    :custom
    ((treemacs-no-png-images . nil)
     (treemacs-filewatch-mode . t)
     (treemacs-follow-mode . t)
     (treemacs-indentation . 2)
     (treemacs-missing-project-action . 'remove))
    :config
    (setq treemacs-width 30)
    :hook
    (treemacs-mode-hook . (lambda ()
                            (setq mode-line-format nil)
                            (display-line-numbers-mode 0))))
#+end_src

*** Fonts

#+begin_src emacs-lisp
  ;; Define a utility function to check if a font exists on the system.
  (defun font-exists-p (font-name)
    "Check if FONT-NAME is available in the system."
    (if (find-font (font-spec :family font-name))
        t
      nil))

  ;; Configure the default font and emoji font, adjusting for display or daemon mode.
  (defun font-setup (&optional frame)
    "Apply font settings to FRAME or the current frame."
    (when (font-exists-p my:font-family)
      (set-face-attribute 'default frame :family my:font-family
                          :height (* my:font-size 10))
      (set-fontset-font t 'unicode
                        (font-spec :family "Noto Color Emoji") nil 'prepend)))

  ;; Define default font fallback and scaling depending on resolution.
  (defvar my:font-family nil "Default font family for Emacs.")
  (unless my:font-family
    (setq my:font-family
          (cond
           ((eq system-type 'windows-nt) "Consolas")
           ((eq system-type 'darwin) "SF Mono") ; macOS
           (t "Monospace"))))                   ; Linux, other

  (unless (font-exists-p my:font-family)
    (setq my:font-family (face-attribute 'default :family)))

  (defvar my:font-size 16 "Default font size for Emacs.")
  (unless (boundp 'my:font-size)
    (setq my:font-size (if (> (or (display-pixel-width) 1920)) 18 16)))

  ;; Hook font setup appropriately based on GUI or daemon mode.
  (if (daemonp)
      (add-hook 'after-make-frame-functions #'font-setup)
    (font-setup))

  ;; Load Nerd Icons if graphics are supported and font is available.
  (leaf nerd-icons
    :ensure t
    :if (display-graphic-p)
    :config
    (setq nerd-icons-color-icons t)
    (unless (font-exists-p "Symbols Nerd Font Mono")
      (setq nerd-icons-color-icons nil)))

  ;; Enable Nerd Icons in Dired mode for enhanced visuals.
  (leaf nerd-icons-dired
    :ensure t
    :if (display-graphic-p)
    :hook (dired-mode . nerd-icons-dired-mode))

  ;; Enable programming ligatures such as "->" and "==>" in coding buffers.
  (leaf ligature
    :ensure t
    :config
    (ligature-set-ligatures 'prog-mode
                            '("->" "=>" "::" "===" "!=" "&&" "||" "|||"
                              ":::" "!!" "??" "-->" "<--" "->>" "<<-"))
    (global-ligature-mode 1))
#+end_src

*** Key Bindings

#+begin_src emacs-lisp
  ;; Key binding utilities
  (leaf which-key
    :ensure t
    :global-minor-mode t
    :config
    (setq which-key-idle-delay 0.5))

  (leaf undo-fu
    :ensure t
    :config
    (setq undo-fu-allow-undo-in-region t))

  (leaf hydra
    :ensure t
    :config
    ;; Text scaling hydra
    (defhydra hydra-text-scale (:hint nil :color red)
      "
  ^Text Scaling^
  ----------------------------
  [_+_] Increase   [_-_] Decrease   [_0_] Reset
  "
      ("+" text-scale-increase)
      ("-" text-scale-decrease)
      ("0" (text-scale-set 0) :color blue)
      ("q" nil "quit" :color blue)))

  ;; Common key bindings
  (leaf-keys
   ;; Function keys and help
   (("<f1>"          . help)
    ("<f8>"          . treemacs)
    ("C-?"           . help)
    ("C-h"           . backward-delete-char)

    ;; Undo/redo
    ("C-/"           . undo-fu-only-undo)
    ("C-z"           . undo-fu-only-redo)

    ;; Text scaling
    ("C-+"           . text-scale-increase)
    ("C--"           . text-scale-decrease)
    ("C-c z"         . hydra-text-scale/body)

    ;; Buffer navigation
    ("s-n"           . next-buffer)
    ("s-p"           . previous-buffer)
    ("s-<up>"        . beginning-of-buffer)
    ("s-<down>"      . end-of-buffer)
    ("C-c b"         . consult-buffer)

    ;; Window management
    ("C-."           . other-window)
    ("C-c 2"         . my/toggle-window-split)
    ("M-o"           . ace-window)
    ("s-."           . ace-swap-window)
    ("s-d"           . delete-frame)
    ("s-m"           . (lambda () (interactive)
                         (let ((frame (make-frame)))
                           (with-selected-frame frame
                             (switch-to-buffer (generate-new-buffer "untitled"))))))

    ;; File operations
    ("s-j"           . find-file-other-window)
    ("s-o"           . find-file-other-frame)
    ("C-c o"         . find-file)
    ("C-c v"         . find-file-read-only)
    ("C-c V"         . view-file-other-window)
    ("C-c k"         . kill-buffer-and-window)

    ;; Search
    ("C-s"           . consult-line)
    ("C-c r"         . consult-ripgrep)

    ;; Text manipulation
    ("C-="           . er/expand-region)
    ("C-c M-a"       . align-regexp)
    ("C-c ;"         . comment-region)
    ("C-c :"         . uncomment-region)

    ;; Org mode and Roam
    ("C-c d a"       . org-agenda)
    ("C-c d c"       . org-capture)
    ("C-c d i"       . org-roam-node-insert)
    ("C-c d f"       . org-roam-node-find)

    ;; Misc
    ("M-x"           . execute-extended-command)
    ("C-x g"         . magit-status)
    ("s-r"           . restart-emacs)))

  ;; Enable directional window navigation
  (windmove-default-keybindings)

  ;; Custom keybinding for dired view
  (add-hook 'dired-mode-hook
            (lambda ()
              (define-key dired-mode-map "z"
                          'my/dired-view-file-other-window)))
#+end_src

** Basic Configuration
*** Save and Backup

#+begin_src emacs-lisp
  ;; Insert a timestamp before saving the buffer
  (defun my/save-buffer-wrapper ()
    "Insert a timestamp at the top of the buffer before saving."
    (interactive)
    (let ((tostr (concat "$Lastupdate: " (format-time-string "%Y/%m/%d %H:%M:%S") " $")))
      (save-excursion
        (goto-char (point-min))
        (while (re-search-forward "\\$Lastupdate\\([0-9/: ]*\\)?\\$" nil t)
          (replace-match tostr t nil)))))

  (add-hook 'before-save-hook #'my/save-buffer-wrapper)

  ;; Configure auto-save and backup settings
  (leaf files
    :custom
    `((auto-save-file-name-transforms . '((".*" ,(concat no-littering-var-directory "backup") t)))
      (backup-directory-alist . '(("." . ,(concat no-littering-var-directory "backup"))))
      (delete-old-versions . t)
      (auto-save-visited-interval . 1))
    :global-minor-mode auto-save-visited-mode)
#+end_src

*** Session Management

#+begin_src emacs-lisp
  (leaf *desktop
    :config
    (setq desktop-dirname (concat no-littering-var-directory "desktop")
          desktop-save 'if-exists
          desktop-auto-save-timeout 180
          desktop-restore-eager 10)
    (desktop-save-mode 1)  ;; Enable session saving
    (winner-mode 1))       ;; Enable window configuration undo/redo
#+end_src

*** Editing Enhancements

#+begin_src emacs-lisp
  (leaf saveplace
    :init
    (save-place-mode +1))

  (leaf recentf
    :init
    (setq recentf-max-saved-items 100)
    (recentf-mode +1))

  (leaf savehist
    :custom `((savehist-file . ,(concat no-littering-var-directory "savehist")))
    :global-minor-mode t)

  (leaf autorevert
    :init
    (global-auto-revert-mode +1))

  (leaf elec-pair
    :global-minor-mode electric-pair-mode)

  (leaf paren
    :custom ((show-paren-delay . 0)
             (show-paren-style . 'expression))
    :global-minor-mode show-paren-mode)

  (leaf puni
    :ensure t
    :global-minor-mode puni-global-mode)
#+end_src

*** System Utilities

#+begin_src emacs-lisp
  (leaf gcmh
    :ensure t
    :global-minor-mode t)

  (defvar my/shell-env-vars
    '("PATH" "MANPATH" "PASSWORD_STORE_DIR" "GPG_KEY_ID" "OPENROUTER_API_KEY")
    "Environment variables to import from the shell.")

  (leaf exec-path-from-shell
    :ensure t
    :if (memq window-system '(mac ns))
    :config
    (setq exec-path-from-shell-check-startup-files nil)
    (setq exec-path-from-shell-variables my/shell-env-vars)
    (exec-path-from-shell-initialize))
#+end_src

*** Tree-Sitter

#+begin_src emacs-lisp
  (leaf tree-sitter
    :ensure t
    :global-minor-mode global-tree-sitter-mode
    :hook (tree-sitter-after-on-hook . tree-sitter-hl-mode)
    :when (featurep 'treesit)
    :config (setq treesit-font-lock-level 4))

  (leaf tree-sitter-langs
    :ensure t
    :config
    (condition-case err
        (tree-sitter-langs-install-grammars)
      (error (message "Failed to install Tree-sitter grammars: %s" err))))
#+end_src

*** Miscellaneous

#+begin_src emacs-lisp
  (leaf no-littering
    :ensure t
    :require t)

  (leaf tramp
    :pre-setq
    `((tramp-persistency-file-name . ,(concat no-littering-var-directory "tramp"))
      (tramp-auto-save-directory . ,(concat no-littering-var-directory "tramp-autosave")))
    :custom
    `((tramp-default-method . "scp")
      (tramp-verbose . 10)))

  (leaf startup
    :custom `((auto-save-list-file-prefix . ,(concat no-littering-var-directory "backup/.saves-"))))
#+end_src

** Utilities Package
*** Extra Utilities

#+begin_src emacs-lisp
  ;; Text and visual line modes
  (leaf visual-line-mode
    :hook (text-mode . visual-line-mode))

  ;; macOS clipboard integration
  (leaf pbcopy
    :if (memq window-system '(mac ns))
    :ensure t
    :config
    (turn-on-pbcopy))

  ;; Dired enhancements
  (leaf dired-filter :ensure t)
  (leaf dired-subtree :ensure t
    :after dired
    :bind (:dired-mode-map
           ("i" . dired-subtree-insert)
           ("TAB" . dired-subtree-toggle)))

  ;; Text selection and editing tools
  (leaf expand-region :ensure t)
  (leaf aggressive-indent
    :ensure t
    :global-minor-mode global-aggressive-indent-mode)
  (leaf delsel
    :global-minor-mode delete-selection-mode)

  ;; Search tools
  (setq grep-program "rg")
  (leaf rg :ensure t)

  ;; Code navigation
  (leaf dumb-jump
    :ensure t
    :hook (xref-backend-functions . dumb-jump-xref-activate)
    :custom
    `((dumb-jump-force-searcher . 'rg)
      (dumb-jump-prefer-searcher . 'rg)))

  (leaf multiple-cursors :ensure t)

  ;; Version control
  (leaf magit :ensure t)

  ;; Syntax and spell checking
  (leaf flycheck
    :ensure t
    :hook (prog-mode . flycheck-mode))

  (leaf flyspell
    :ensure t
    :hook (text-mode . flyspell-mode)
    :custom ((ispell-program-name . "aspell")))

  ;; Project management
  (leaf projectile
    :ensure t
    :global-minor-mode t)

  ;; Snippets
  (leaf yasnippet
    :ensure t
    :global-minor-mode yas-global-mode)

  (leaf yasnippet-snippets
    :ensure t
    :after yasnippet)

  ;;; Authentication Management
  (leaf *authentication
    :init
    (defvar my:d:password-store
      (or (getenv "PASSWORD_STORE_DIR")
  	(concat no-littering-var-directory "password-store/"))
      "Path to the password store.")

    ;; Check for necessary environment variables and directories
    (unless (getenv "GPG_KEY_ID")
      (warn "GPG_KEY_ID is not set. Authentication features may not work properly."))
    (unless (file-directory-p my:d:password-store)
      (warn "Password store directory does not exist: %s" my:d:password-store))

    ;; Encryption
    (leaf epa-file
      :config
      (epa-file-enable)
      (setq epa-pinentry-mode
            (if (getenv "USE_GPG_LOOPBACK") 'loopback 'default)))

    ;; Configure authentication sources
    (leaf auth-source
      :config
      (setq auth-source-gpg-encrypt-to
            (or (getenv "GPG_KEY_ID")
                (user-error "GPG_KEY_ID is not set. Authentication will not work."))))

    ;; Use password-store and auth-source-pass for password management
    (leaf password-store :ensure t)
    (leaf auth-source-pass :ensure t
      :config
      (when (executable-find "pass")
        (auth-source-pass-enable)))

    ;; Configure plstore for secure storage
    (leaf plstore
      :config
      (setq plstore-secret-keys 'silent
            plstore-encrypt-to (getenv "GPG_KEY_ID"))))
#+end_src

*** AI Configuration

#+begin_src emacs-lisp
  ;; ellama
  (leaf ellama
    :ensure t
    :after llm-ollama
    :init
    ;; Set default language to Japanese
    (setopt ellama-language "Japanese")

    ;; Define session directory for Ellama
    (setopt ellama-sessions-directory (concat no-littering-var-directory "ellama-sessions"))

    ;; Configure naming scheme for sessions
    (setopt ellama-naming-scheme 'ellama-generate-name-by-llm)

    ;; Set default provider
    (setopt ellama-provider
            (make-llm-ollama
             :chat-model "codestral:22b-v0.1-q4_K_S"
             :embedding-model "codestral:22b-v0.1-q4_K_S"))

    ;; Define translation provider
    (setopt ellama-translation-provider
            (make-llm-ollama
             :chat-model "llama3:8b-instruct-q8_0"
             :embedding-model "llama3:8b-instruct-q8_0"))

    ;; Define additional providers
    (setopt ellama-providers
            '(("codestral" . (make-llm-ollama
                              :chat-model "codestral:22b-v0.1-q4_K_S"
                              :embedding-model "codestral:22b-v0.1-q4_K_S"))
              ("gemma2" . (make-llm-ollama
                           :chat-model "gemma2:27b-instruct-q4_K_S"
                           :embedding-model "gemma2:27b-instruct-q4_K_S"))
              ("llama3.2-vision" . (make-llm-ollama
                                    :chat-model "llama3:8b-instruct-q8_0"
                                    :embedding-model "llama3:8b-instruct-q8_0"))))

    ;; Add error handling for unsupported providers
    (defun ellama-set-provider (provider-name)
      "Set the active provider for Ellama by PROVIDER-NAME."
      (interactive
       (list (completing-read "Select provider: " (mapcar #'car ellama-providers))))
      (if-let* ((provider (cdr (assoc provider-name ellama-providers))))
          (progn
            (setopt ellama-provider provider)
            (message "Ellama provider set to: %s" provider-name))
        (progn
          (message "Provider '%s' not found. Using default provider." provider-name)
          (setopt ellama-provider (cdr (assoc "codestral" ellama-providers))))))

    :config
    ;; Ensure that Ellama initializes correctly
    (unless (and ellama-provider ellama-translation-provider)
      (message "Ellama configuration is incomplete. Verify providers.")))
#+end_src

*** Programming Utilities

#+begin_src emacs-lisp
  (defvar my/use-lsp 'eglot) ;; Change to 'lsp if needed

  (when (eq my/use-lsp 'eglot)
    (leaf eglot
      :hook (prog-mode . eglot-ensure)
      :custom
      `((eglot-autoshutdown . t)
        (eglot-sync-connect . nil)
        (eglot-events-buffer-size . 200))
      :bind (:eglot-mode-map
             ("C-c h" . eglot-help-at-point)
             ("C-c r" . eglot-rename)
             ("C-c a" . eglot-code-actions)
             ("C-c d" . flymake-show-buffer-diagnostics))))

  (when (eq my/use-lsp 'lsp)
    (leaf lsp-mode
      :ensure t
      :hook ((python-mode . lsp)
             (rust-mode . lsp)
             (go-mode . lsp)
             (js-mode . lsp)
             (typescript-mode . lsp)
             (c-mode . lsp)
             (c++-mode . lsp))
      :custom
      `((lsp-enable-snippet . t)
        (lsp-idle-delay . 0.5)
        (lsp-headerline-breadcrumb-enable . t)
        (lsp-prefer-flymake . nil))
      :config
      (setq lsp-completion-provider :capf)))

  (leaf lsp-ui
    :ensure t
    :after lsp-mode
    :custom
    `((lsp-ui-doc-enable . t)
      (lsp-ui-sideline-enable . t)
      (lsp-ui-sideline-show-hover . t)
      (lsp-ui-sideline-show-code-actions . t)
      (lsp-ui-sideline-show-diagnostics . t)))
#+end_src

*** Completion Framework

#+begin_src emacs-lisp
  (leaf completion-settings
    :config
    ;; Prescient: Sort and filter candidates based on usage history
    (leaf prescient
      :ensure t
      :custom
      ((prescient-aggressive-file-save . t))  ;; Automatically save history
      :global-minor-mode prescient-persist-mode)

    ;; Vertico: Vertical completion menu
    (leaf vertico
      :ensure t
      :global-minor-mode vertico-mode
      :custom
      ((vertico-count . 15))  ;; Show up to 15 candidates in the menu
      :config
      ;; Posframe integration for cleaner UI
      (leaf vertico-posframe
        :ensure t
        :if (display-graphic-p)
        :custom
        ((vertico-posframe-border-width . 2)
         (vertico-posframe-parameters . '((left-fringe . 4)
                                          (right-fringe . 4))))
        :config
        (vertico-posframe-mode 1)))

    (leaf vertico-prescient
      :ensure t
      :after (vertico prescient)
      :global-minor-mode t)

    ;; Marginalia: Annotate candidates with additional context
    (leaf marginalia
      :ensure t
      :global-minor-mode marginalia-mode)

    ;; Consult: Enhanced search and navigation commands
    (leaf consult
      :ensure t
      :custom
      ((xref-show-xrefs-function . #'consult-xref)
       (xref-show-definitions-function . #'consult-xref)))

    ;; Embark: Context-aware actions for completion candidates
    (leaf embark
      :ensure t
      :custom
      ((prefix-help-command . #'embark-prefix-help-command)
       (embark-collect-live-update . t))
      :config
      (add-hook 'embark-collect-mode-map #'embark-collect-live-mode)
      (when (require 'all-the-icons nil t)
        (setq embark-indicators
              '(embark-minimal-indicator
                embark-highlight-indicator
                embark-isearch-highlight-indicator)))

      ;; Integrate Embark with Consult
      (leaf embark-consult
        :ensure t
        :after (embark consult)
        :hook (embark-collect-mode . consult-preview-at-point-mode)
        :custom (consult-preview-key . "M-.")))

    (defun my/setup-embark-vertico-directory ()
      "Integrate embark-act inside vertico-directory minibuffer."
      (when (and (boundp 'vertico-map) (require 'embark nil t))
        (define-key vertico-map (kbd "C-.") #'embark-act)
        (define-key vertico-map (kbd "C-;") #'embark-dwim)))

    (add-hook 'vertico-mode-hook #'my/setup-embark-vertico-directory)

    ;; Corfu: Popup-based completion for `completion-at-point`
    (leaf corfu
      :ensure t
      :init
      (global-corfu-mode)  ;; Enable Corfu globally
      :custom
      ((corfu-auto . t)          ;; Enable auto-completion
       (corfu-auto-delay . 0)    ;; No delay before showing candidates
       (corfu-auto-prefix . 2)   ;; Trigger completion after 2 characters
       (corfu-cycle . t))        ;; Cycle through candidates
      :config
      ;; Integrating cape completion sources into corfu
      (add-to-list 'completion-at-point-functions #'cape-file)
      (add-to-list 'completion-at-point-functions #'cape-dabbrev)
      (add-to-list 'completion-at-point-functions #'cape-keyword)

      ;; Add icons to completion candidates
      (leaf kind-icon
        :ensure t
        :after corfu
        :custom
        ((kind-icon-default-face . 'corfu-default))
        :config
        (add-to-list 'corfu-margin-formatters #'kind-icon-margin-formatter)))

    ;; Cape: Additional completion sources for Corfu
    (leaf cape
      :ensure t
      :init
      (mapc (lambda (fn) (add-to-list 'completion-at-point-functions fn))
            '(cape-file cape-dabbrev cape-keyword)))

    ;; Orderless: Fuzzy matching for completion
    (leaf orderless
      :ensure t
      :custom
      ((completion-styles . '(orderless basic))
       (completion-category-overrides . '((file (styles . (partial-completion))))))))
#+end_src

*** Org-kmode
**** Org-mode Core Setup

#+begin_src emacs-lisp
  (leaf org
    :leaf-defer t
    :preface
    (defvar warning-suppress-types nil)
    (unless (boundp 'my:d:cloud)
      (setq my:d:cloud (concat no-littering-var-directory "./")))

    ;; Return list of opened Org mode buffer files
    (defun org-buffer-files ()
      "Return a list of opened Org mode buffer files."
      (delq nil
            (mapcar (lambda (buf) (buffer-file-name buf))
                    (org-buffer-list 'files))))

    ;; Show Org buffer file in current window
    (defun show-org-buffer (file)
      "Show an org FILE in the current buffer."
      (interactive (list (read-file-name "Org file: " org-directory nil t)))
      (let ((filepath (expand-file-name file org-directory)))
        (if (get-file-buffer filepath)
            (switch-to-buffer (get-file-buffer filepath))
          (find-file filepath))))

    :custom ((org-support-shift-select . t))
    :init
    (setq org-directory (expand-file-name "org/" my:d:cloud))
    (my:ensure-directory-exists org-directory)
    (setq org-return-follows-link t
          org-mouse-1-follows-link t)
    (setq warning-suppress-types (append warning-suppress-types '((org-element-cache))))
    (setq org-element-use-cache nil)

    :bind
    (("C-M--" . #'(lambda () (interactive)
                    (show-org-buffer "gtd.org")))
     ("C-M-^" . #'(lambda () (interactive)
                    (show-org-buffer "notes.org")))
     ("C-M-~" . #'(lambda () (interactive)
                    (show-org-buffer "kb.org"))))

    :config
    (setq org-agenda-files (list org-directory)
          org-cycle-emulate-tab 'white-space
          org-default-notes-file "notes.org"
          org-enforce-todo-dependencies t
          org-idle-time 0.3
          org-log-done 'time
          org-startup-folded 'content
          org-startup-truncated nil
          org-use-speed-commands t)

    (setq org-link-frame-setup '((file . find-file)))

    (setq org-agenda-files
          (seq-filter (lambda (file)
                        (not (string-match-p "archives" file)))
                      (directory-files-recursively org-directory "\\.org$")))

    (setq org-todo-keywords
          '((sequence "TODO(t)" "SOMEDAY(s)" "WAITING(w)" "|" "DONE(d)" "CANCELED(c@)")))

    (setq org-refile-targets
          (quote ((nil :maxlevel . 3)
                  (org-buffer-files :maxlevel . 1)
                  (org-agenda-files :maxlevel . 3))))

    (setq org-capture-templates
          `(("t" "Todo" entry (file+headline ,(expand-file-name "gtd.org" org-directory) "Inbox")
             "* TODO %?\n %i\n %a")
            ("n" "Note" entry (file+headline ,(expand-file-name "notes.org" org-directory) "Notes")
             "* %?\nEntered on %U\n %i\n %a")
            ("j" "Journal" entry (function org-journal-find-location)
             "* %(format-time-string org-journal-time-format)%^{Title}\n%i%?")
            ("m" "Meeting" entry (file ,(expand-file-name "meetings.org" org-directory))
             "* MEETING with %? :meeting:\n  %U\n  %a"))))

  (leaf org-modern
    :config
    (setopt
     ;; Edit settings
     org-startup-indented t
     org-hide-leading-stars t
     org-auto-align-tags nil
     org-tags-column 0
     org-catch-invisible-edits 'show-and-error
     org-special-ctrl-a/e t
     org-insert-heading-respect-content t

     ;; Org styling, hide markup etc.
     org-hide-emphasis-markers t
     org-pretty-entities t

     ;; Agenda styling
     org-agenda-tags-column 0
     org-agenda-block-separator ?â”€
     org-agenda-time-grid
     '((daily today require-timed)
       (800 1000 1200 1400 1600 1800 2000)
       " â”„â”„â”„â”„â”„ " "â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„")
     org-agenda-current-time-string
     "â—€â”€â”€ now â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€")

    ;; Ellipsis styling
    (setopt org-ellipsis " â–¾")
    (set-face-attribute 'org-ellipsis nil :inherit 'default :box nil))
#+end_src

**** Org-mode Visual Enhancements

#+begin_src emacs-lisp
  (leaf org-superstar
    :after org
    :ensure t
    :custom
    ;; Customize bullets for different headline levels
    (org-superstar-headline-bullets-list . '("â—‰" "â˜…" "â—‹" "â–·"))
    ;; Hide leading stars in headlines
    (org-superstar-remove-leading-stars . nil)
    ;; Show custom bullets in Org-mode buffers
    :hook (org-mode . org-superstar-mode))
#+end_src

**** Additional Org-related packages

#+begin_src emacs-lisp
  ;; Org LaTeX export
  (leaf org-latex
    :after org
    :custom
    (org-latex-packages-alist '(("" "graphicx" t)
                                ("" "longtable" nil)
                                ("" "wrapfig" nil)))
    (setq org-latex-pdf-process
          '("pdflatex -interaction nonstopmode -output-directory %o %f"
            "bibtex %b"
            "pdflatex -interaction nonstopmode -output-directory %o %f"
            "pdflatex -interaction nonstopmode -output-directory %o %f")))

  ;; Org-journal for daily notes
  (leaf org-journal
    :ensure t
    :after org
    :config
    (setq org-journal-dir (concat org-directory "/journal")
          org-journal-enable-agenda-integration t)

    (defun org-journal-find-location ()
      "Open today's journal entry."
      (org-journal-new-entry t)))

  ;; Babel for code execution in Org files
  (leaf ob
    :after org
    :defun org-babel-do-load-languages
    :config
    (org-babel-do-load-languages
     'org-babel-load-languages
     '((emacs-lisp . t)
       (shell . t)
       (python . t)
       (R . t)
       (ditaa . t)
       (plantuml . t))))

  ;; Org-roam for networked notes
  (leaf org-roam
    :ensure t
    :after org
    :config
    (setq org-roam-directory (concat org-directory "/org-roam"))
    (unless (file-directory-p org-roam-directory)
      (make-directory org-roam-directory t))
    (org-roam-db-autosync-mode))

  ;; Download and manage images in Org files
  (leaf org-download
    :ensure t
    :after org
    :config
    (setq org-download-image-dir (expand-file-name "pictures" org-directory))
    (unless (file-directory-p org-download-image-dir)
      (make-directory org-download-image-dir t)))

  ;; Generate and navigate table of contents
  (leaf toc-org
    :ensure t
    :after org markdown-mode
    :config
    (add-hook 'org-mode-hook 'toc-org-enable)
    (add-hook 'markdown-mode-hook 'toc-org-mode))

  ;; Add clickable links from the clipboard
  (leaf org-cliplink
    :ensure t
    :after org
    :bind ("C-x p i" . org-cliplink))

  ;; Export Org files to Hugo markdown format
  (leaf ox-hugo
    :ensure t
    :require t
    :after ox
    :custom ((org-hugo-front-matter-format . "toml")))

  ;; ox-hugo-capture
  (leaf *ox-hugo--capture
    :require org-capture
    :defvar (org-capture-templates)
    :config
    (defun generate-safe-filename ()
      "Generate a unique and safe filename for Hugo export."
      (format "%s-%s" (format-time-string "%Y")
              (shell-command-to-string "uuidgen | cut -c1-8")))
    (add-to-list 'org-capture-templates
                 '("b" "Create new blog post" entry
                   (file+headline my:f:capture-blog-file "blog")
                   "** TODO %?
    :PROPERTIES:
    :EXPORT_FILE_NAME: %(generate-safe-filename)
    :EXPORT_DATE:
    :EXPORT_HUGO_TAGS:
    :EXPORT_HUGO_CATEGORIES:
    :EXPORT_HUGO_LASTMOD:
    :EXPORT_HUGO_CUSTOM_FRONT_MATTER: :pin false
    :END:
    \n
    ")))

  (leaf markdown-mode
    :ensure t
    :mode ("\\.md\\'" . markdown-mode))
#+end_src

*** Miscellaneous Helper Functions

#+begin_src emacs-lisp
  ;; `*scratch*` buffer utility
  (defun my/create-scratch-buffer ()
    "Ensure that a `*scratch*` buffer exists."
    (let ((scratch-buffer (get-buffer "*scratch*")))
      (unless scratch-buffer
        (with-current-buffer (get-buffer-create "*scratch*")
          (funcall initial-major-mode)
          (when (and initial-scratch-message
                     (not (string-empty-p initial-scratch-message)))
            (insert initial-scratch-message))
          (current-buffer)))))

  (defun my/recreate-scratch-buffer ()
    "Kill the current `*scratch*` buffer and create a new one."
    (interactive)
    (when (get-buffer "*scratch*")
      (kill-buffer "*scratch*"))
    (my/create-scratch-buffer)
    (switch-to-buffer "*scratch*"))

  (defun my/after-kill-buffer-advice (&rest _)
    "Ensure `*scratch*` buffer exists after killing it."
    (run-at-time 0.1 nil #'my/create-scratch-buffer))

  (advice-add 'kill-buffer :after #'my/after-kill-buffer-advice)

  ;; Window layout management
  (defvar my/saved-window-config nil
    "Stores the current window configuration for later restoration.")

  (defun my/save-window-layout ()
    "Save the current window configuration persistently."
    (interactive)
    (setq my/saved-window-config (window-state-get nil t))
    (message "Window configuration saved."))

  (defun my/restore-window-layout ()
    "Restore the saved window configuration."
    (interactive)
    (if my/saved-window-config
        (progn
          (window-state-put my/saved-window-config)
          (message "Window configuration restored."))
      (message "No saved window configuration found. Please save a layout first.")))

  (defun my/toggle-window-dedication ()
    "Toggle the dedicated status of the currently selected window."
    (interactive)
    (let ((window (selected-window)))
      (set-window-dedicated-p window (not (window-dedicated-p window)))
      (message "Window dedication %s"
               (if (window-dedicated-p window) "enabled" "disabled"))))

  ;; Desktop session management
  (leaf desktop
    :custom
    `((desktop-dirname . ,(concat no-littering-var-directory "desktop"))
      (desktop-save . 'if-exists)
      (desktop-auto-save-timeout . 180)
      (desktop-restore-eager . 10))
    :hook ((kill-emacs-hook . desktop-save-in-desktop-dir)
           (emacs-startup-hook . desktop-read))
    :config
    (desktop-save-mode 1))

  ;; Asynchronous task execution
  (defun my/safe-run-async (task)
    "Run TASK asynchronously and handle any errors gracefully."
    (run-at-time 0 nil
                 (lambda ()
                   (condition-case err
                       (funcall task)
                     (error (message "An error occurred during asynchronous execution: %s" err))))))

  ;; Backup file cleanup
  (defun my/delete-old-backups ()
    "Delete backup files older than 7 days asynchronously."
    (interactive)
    (my/safe-run-async
     (lambda ()
       (let ((backup-dir (concat no-littering-var-directory "backup/"))
             (threshold (- (float-time (current-time)) (* 7 24 60 60))))
         (when (file-directory-p backup-dir)
           (dolist (file (directory-files backup-dir t nil t))
             (when (and (file-regular-p file)
                        (> (float-time (file-attribute-modification-time (file-attributes file))) threshold))
               (delete-file file))))))))

  (add-hook 'emacs-startup-hook #'my/delete-old-backups)

  ;; View mode handling
  (defun my/enable-view-mode-on-read-only ()
    "Enable `view-mode` if the buffer is read-only, disable otherwise."
    (if buffer-read-only
        (view-mode 1)
      (view-mode -1)))
  (add-hook 'read-only-mode-hook #'my/enable-view-mode-on-read-only)

  ;; Toggle line number display
  (defun my/toggle-linum-lines ()
    "Toggle line number display using `display-line-numbers-mode`."
    (interactive)
    (display-line-numbers-mode 'toggle))

  ;; Toggle window split orientation
  (defun my/toggle-window-split ()
    "Toggle the window split between horizontal and vertical."
    (interactive)
    (if (= (count-windows) 2)
        (let* ((this-win-buffer (window-buffer))
               (next-win-buffer (window-buffer (next-window)))
               (splitter (if (window-combined-p)
                             'split-window-vertically
                           'split-window-horizontally)))
          (delete-other-windows)
          (let ((first-win (selected-window)))
            (funcall splitter)
            (set-window-buffer (selected-window) this-win-buffer)
            (set-window-buffer (next-window) next-win-buffer)
            (select-window first-win)))
      (message "This function only works when exactly two windows are open.")))

  ;; Find keybinding conflicts
  (defun my/find-keybinding-conflicts ()
    "Detect and display keybinding conflicts across active keymaps."
    (interactive)
    (let ((conflicts (make-hash-table :test 'equal))
          (buffer-name "*Keybinding Conflicts*"))
      (mapatoms (lambda (sym)
                  (when (and (boundp sym) (keymapp (symbol-value sym)))
                    (map-keymap
                     (lambda (key cmd)
                       (when (commandp cmd)
                         (let* ((key-desc (key-description (vector key)))
                                (existing (gethash key-desc conflicts)))
                           (puthash key-desc (delete-dups (cons cmd existing)) conflicts))))
                     (symbol-value sym)))))
      (with-current-buffer (get-buffer-create buffer-name)
        (read-only-mode -1)
        (erase-buffer)
        (insert "* Keybinding Conflicts *\n\n")
        (maphash (lambda (key cmds)
                   (when (> (length cmds) 1)
                     (insert (format "%s => %s\n"
                                     key
                                     (mapconcat #'symbol-name cmds ", ")))))
                 conflicts)
        (read-only-mode 1))
      (switch-to-buffer buffer-name)))

  ;; Dired file and directory viewing
  (defun my/dired-view-file-other-window ()
    "Open the selected file or directory in another window."
    (interactive)
    (let ((file (dired-get-file-for-visit)))
      (if (file-directory-p file)
          (or (and (cdr dired-subdir-alist)
                   (dired-goto-subdir file))
              (dired file))
        (view-file-other-window file))))

  ;; External editor integration
  (defun my/open-by-vscode ()
    "Open the current file in Visual Studio Code at the current line and column."
    (interactive)
    (when (buffer-file-name)
      (async-shell-command
       (format "code -r -g %s:%d:%d"
               (buffer-file-name)
               (line-number-at-pos)
               (current-column)))))

  ;; Displau the value of environment
  (defun my/show-env-variable (var)
    "Display the value of environment variable VAR in the minibuffer."
    (interactive "sEnvironment variable: ")
    (let ((value (getenv var)))
      (if value
          (message "%s = %s" var value)
        (message "Environment variable %s is not set." var))))

  ;; Emacs build information
  (defun my/print-build-info ()
    "Display detailed information about the current Emacs build."
    (interactive)
    (switch-to-buffer (get-buffer-create "*Build info*"))
    (let ((buffer-read-only nil))
      (erase-buffer)
      (insert
       (format "- GNU Emacs %s\n\n|Commit|%s|\n|Branch|%s|\n|System|%s|\n|Date|%s|\n"
               emacs-version
               (emacs-repository-get-version)
               (when (version< "27.0" emacs-version)
                 (emacs-repository-get-branch))
               system-configuration
               (format-time-string "%Y-%m-%d %T (%Z)" emacs-build-time)))
      (insert (format "|Patch|%s ns-inline.patch|\n"
                      (if (boundp 'mac-ime--cursor-type) "with" "without")))
      (insert
       (format "|Features|%s|\n" system-configuration-features))
      (insert
       (format "|Options|%s|\n" system-configuration-options)))
    (view-mode))

  ;; Keybinding documentation
  (defun my/parse-leaf-config (file)
    "Extract keybindings from FILE written in leaf syntax."
    (with-temp-buffer
      (insert-file-contents file)
      (goto-char (point-min))
      (let (keybinds)
        (while (re-search-forward ":bind\\s-*(?\\([^)]*\\))" nil t)
          (let ((keys (match-string 1)))
            (push (split-string keys) keybinds)))
        keybinds)))

  (defun my/generate-org-keybind-table (input-file output-file)
    "Generate an Org table from INPUT-FILE and save to OUTPUT-FILE."
    (interactive "fInput File: \nFOutput Org File: ")
    (let ((keybinds (my/parse-leaf-config input-file)))
      (with-temp-buffer
        (insert "#+TITLE: Keybindings\n\n* Keybind Table\n")
        (insert "| Key Sequence | Command |\n")
        (insert "|-------------+---------|\n")
        (dolist (keybind keybinds)
          (insert (format "| %s | %s |\n" (car keybind) (cadr keybind))))
        (write-file output-file)))
    (message "Org table saved to %s" output-file))

  ;; Auto-tangling for Org files
  (defun my/auto-tangle-init-org ()
    "Auto-tangle init.org when saving."
    (when (string= (file-name-nondirectory (buffer-file-name)) "README.org")
      (org-babel-tangle)))

  ;; Hooks for common operations
  (add-hook 'before-save-hook 'delete-trailing-whitespace)
  (add-hook 'prog-mode-hook 'goto-address-prog-mode)
  (add-hook 'text-mode-hook 'goto-address-mode)
  (add-hook 'after-save-hook #'my/auto-tangle-init-org)
#+end_src

** Footer
#+begin_src emacs-lisp
  (provide 'README)
  ;;; README.el ends here
#+end_src

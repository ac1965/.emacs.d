.# -*- mode: org; coding: utf-8-unix; indent-tabs-mode: nil -*-
#+title: ac1965's Emacs literate configuration =.emacs.d=
#+startup: content
#+author: YAMASHITA Takao
#+options: auto-id:t H:6

[[file:demo.png]]

* Installation
This section documents the setup required to build and install Emacs from source.

#+begin_src shell :eval never
  git clone https://github.com/ac1965/.emacs.d ~/.emacs.d
#+end_src

You are cloning a GitHub repository (https://github.com/ac1965/.emacs.d) into the =~/.emacs.d= directory on your local machine.

- *Build Emacs*

You build Emacs using a script (=build-emacs.sh=) and want to specify the location of your GitHub repositories.

[[https://github.com/ac1965/dotfiles/blob/master/.local/bin/build-emacs.sh][build-emacs.sh]]

The following script builds Emacs with native compilation enabled. You need to set the `GITHUB_REPOS` environment variable to point to your source repository.

#+begin_src shell :eval never
  GITHUB_REPOS=/Users/ac1965/devel/src build-emacs.sh --native-compilation
#+end_src

- *System Information*

Below are the system details and Emacs build configurations for two machines.

#+begin_src shell :eval never
  uname -a
  Darwin pooh.local 24.2.0 Darwin Kernel Version 24.2.0: Fri Dec  6 19:04:03 PST 2024; root:xnu-11215.61.5~2/RELEASE_ARM64_T8132 arm64
#+end_src

- GNU Emacs 31.0.50
|-+-|
| Commit | 8e9ad92a140e89c3e29dd7ab148534289e7769db |
| Branch | master |
| System | aarch64-apple-darwin24.2.0 |
| Date | 2025-01-11 08:24:12 (JST) |
| Patch | without ns-inline.patch |
| Features | ACL DBUS GLIB GNUTLS LCMS2 LIBXML2 MODULES NATIVE_COMP NOTIFY KQUEUE NS PDUMPER PNG RSVG SQLITE3 THREADS TOOLKIT_SCROLL_BARS TREE_SITTER WEBP XIM XWIDGETS ZLIB |
|-+-|

*OLD Machine*

#+begin_src shell :eval never
  uname -a
  Darwin alice.local 24.3.0 Darwin Kernel Version 24.3.0: Fri Dec  9 19:45:54 PST 2024; root:xnu-11215.80.501.2~1/RELEASE_x86_64 x86_64
#+end_src

- GNU Emacs 31.0.50
|-+-|
| Commit | 63cc335a524ab5b6fb8e9bc93041382baf1321db |
| Branch | master |
| System | x86_64-apple-darwin24.1.0 |
| Date | 2024-12-28 21:12:21 (JST) |
| Patch | without ns-inline.patch |
| Features | ACL DBUS GIF GLIB GMP GNUTLS JPEG LCMS2 LIBXML2 MODULES NATIVE_COMP NOTIFY KQUEUE NS PDUMPER PNG RSVG SQLITE3 THREADS TIFF TOOLKIT_SCROLL_BARS TREE_SITTER WEBP XIM ZLIB |
|-+-|

* Emacs Configuration

** Header
#+begin_src emacs-lisp
  ;;; README.el --- Emacs.d -*- lexical-binding: t; -*-

  ;; Copyright (c) 2021-2025 YAMASHITA Takao <ac1965@ty07.net>
  ;; Licensed under the GNU General Public License version 3 or later.

  ;; $Lastupdate: 2025/01/11 21:49:05 $

  ;;; Commentary:

  ;;; Code:
#+end_src
** Leaf
/This Emacs configuration sets up package management and defines essential packages using `leaf` for a more structured approach. Here's a summary/

- *Package Management*
  - Configures package archives (GNU and MELPA) and initializes the package system with `package-initialize`.

- *Leaf Setup*
  - Installs and initializes `leaf`, a package that simplifies package configuration in Emacs.
  - Adds support for additional ~leaf~ keywords using ~leaf-keywords~.


#+begin_src emacs-lisp
  ;;; Package Management with leaf

  ;; Configure package archives to include both GNU ELPA and MELPA.
  ;; These are the primary repositories for Emacs packages.
  (eval-and-compile
    (customize-set-variable
     'package-archives '(("gnu" . "https://elpa.gnu.org/packages/")
                         ("melpa" . "https://melpa.org/packages/")))
    (package-initialize)
    (use-package leaf :ensure t)

    ;; Ensure `leaf` is installed and initialized.
    ;; `leaf` is a macro-based package manager for Emacs.
    (leaf leaf-keywords
      :ensure t
      :config (leaf-keywords-init)))
#+end_src

** User define
*Use Case:*
- This is useful in multi-user environments where different users have distinct Emacs preferences.
- Each user can have their own configuration file (e.g., `john.el`, `jane.el`), and this code will automatically load the appropriate one when they start Emacs.

*Explanation:*
- **`user-login-name`**: This is a built-in variable that contains the current user's login name.
- **`my:d`**: The directory where the user-specific configuration files are stored.
- **`user-specific-config`**: A variable that concatenates the user's login name with `.el` to determine the path of their individual configuration file (e.g., `john.el` for user "john").
- **`file-exists-p`**: This function checks whether the file exists at the computed path.
- **`load`**: If the file exists, the `load` function loads the user-specific configuration file.

*Purpose:*
- This setup allows each user to have a customized Emacs configuration file while still using a common Emacs setup. It can be especially useful in shared environments or multi-user systems.

Let me know if you need further adjustments or if this integrates well with your setup!


#+begin_src emacs-lisp
  
  ;; Loading user-specific settings.

  (setq user-specific-config (concat my:d user-login-name ".el"))
  (if (file-exists-p user-specific-config) (load user-specific-config))
#+end_src

** UI/Fonts

*** UI
*UI setting*

A modern look is achieved with golden-ratio, ef-themes, and teemacs. These packages adjust window sizes, set themes, and add a sidebar for file navigation.

*Explanation:*

- **Golden Ratio:**
  - Adjusts window sizes dynamically for an ideal viewing ratio using the `golden-ratio` package.

- **Themes:**
  - Loads the `ef-themes` package with the 'ef-frost' theme.

- **Modeline Enhancements:**
  - `minions` package for a clean and minimal modeline.
  - Displays time and battery status in the modeline.

- **Spacious Padding:**
  - Adds spacious padding to improve readability with the `spacious-padding` package.

- **Treemacs:**
  - Configures the Treemacs file explorer for easy navigation.

*Purpose:*
This setup enhances the Emacs user interface with a modern theme, dynamic window management, and a visually appealing modeline. It also integrates a file navigation sidebar (Treemacs), and adds features like spacious padding and tab line mode for a more comfortable and productive experience.


#+begin_src emacs-lisp
  ;;; UI Configurations using `leaf`

  (leaf UI
    :config
    ;; Set fullscreen mode when in a graphical display environment.
    (when (display-graphic-p)
      (set-frame-parameter nil 'fullscreen 'fullboth))

    ;; Use golden-ratio mode for dynamically resizing windows.
    (leaf golden-ratio
      :ensure t
      :global-minor-mode golden-ratio-mode
      :custom ((golden-ratio-adjust-factor . 1.2)
               (golden-ratio-auto-scale . t)))

    ;; Load a visually appealing theme (ef-frost).
    (leaf ef-themes
      :ensure t
      :config
      (load-theme 'ef-frost t))

    ;; Configure modeline for better visibility.
    (leaf modeline
      :config
      (leaf minions
        :ensure t
        :config
        (minions-mode 1)
        (setq minions-mode-line-lighter "[+]"))

      ;; Enable display of time and battery status in the mode-line.
      (setq display-time-interval 30
            display-time-day-and-date t
            display-time-24hr-format t)
      (display-time-mode 1)
      (when (display-battery-mode)
        (display-battery-mode 1)))

    ;; Add subtle padding to the mode-line and toggle with F7.
    (leaf spacious-padding
      :ensure t
      :config
      (setq spacious-padding-subtle-mode-line
            '( :mode-line-active 'default
               :mode-line-inactive vertical-border))
      (setq spacious-padding-widths '( :internal-border-width 15))
      (spacious-padding-mode 1)
      (define-key global-map (kbd "<f7>") #'spacious-padding-mode))

    ;; Enable global tab line mode.
    (leaf tabmode
      :config
      (global-tab-line-mode t))

    ;; Configure Treemacs for file and project navigation.
    (leaf treemacs
      :ensure t
      :bind
      (:treemacs-mode-map
       ([mouse-1] . #'treemacs-single-click-expand-action))
      :custom
      ((treemacs-no-png-images . nil)
       (treemacs-filewatch-mode . t)
       (treemacs-follow-mode . t)
       (treemacs-tag-follow-mode . nil)
       (treemacs-tag-follow-cleanup . nil)
       (treemacs-expand-after-init . t)
       (treemacs-indentation . 2)
       (treemacs-missing-project-action . 'remove))
      :hook
      (treemacs-mode-hook . (lambda ()
                              (setq mode-line-format nil)
                              (display-line-numbers-mode 0)))))
#+end_src

*** Fonts
*Fonts setting*

nerd-icons provides icons in file listings. emojify adds emoji support in Org mode. Font settings are applied across frames.

|abcdef ghijkl|
|ABCDEF GHIJKL|
|'";:-+ =/\~`?|
|∞≤≥∏∑∫ ×±⊆⊇|
|αβγδεζ ηθικλμ|
|ΑΒΓΔΕΖ ΗΘΙΚΛΜ|
|日本語 の美観|
|あいう えおか|
|アイウ エオカ|
|ｱｲｳｴｵｶ ｷｸｹｺｻｼ|


|hoge|hogeghoge|age|
|----------------------+----------+-------------------|
| 今日もいい天気ですね | お、等幅になった 👍 |

*Explanation:*

- **Font Setup:**
  - `font-setup`: Sets up the font family and size, and also configures a Unicode font for emoji support with `Noto Color Emoji`.
  - `font-exists-p`: A utility function to check whether a given font exists in the system.
  - `conf:font-family` and `conf:font-size` are used to define the default font and size.

- **Nerd Icons:**
  - `nerd-icons`: Uses the `nerd-icons` package to display icons in file listings. A warning message appears if the Nerd Font is not installed.
  - `nerd-icons-dired`: Displays icons in `dired-mode` buffers.

- **Ligature (Ligatures):**
  - `ligature`: Defines ligatures for programming modes (e.g., `->`, `=>`, `&&`) and enables ligatures globally.

*Purpose:*
This configuration sets up attractive fonts and visual enhancements in Emacs. It supports file navigation with icons, displays emojis in Org mode, and defines ligatures to improve code readability. The overall user experience is enhanced with a clean and modern look.


#+begin_src emacs-lisp
  ;;; Font Configuration using `leaf` for improved font management and icon support.

  (leaf Fonts
    :preface
    ;; Check if a font exists on the system.
    (defun font-exists-p (font)
      "Check if FONT exists on the system."
      (member font (font-family-list)))

    ;; Set up the default font and icon fonts for a specific frame.
    (defun font-setup (&optional frame)
      "Set up the default font and icon fonts for FRAME."
      (when (font-exists-p conf:font-family)
        (set-face-attribute 'default frame :family conf:font-family
                            :height (* conf:font-size 10))
        ;; Configure Unicode fonts, such as emojis.
        (set-fontset-font t 'unicode
                          (font-spec :family "Noto Color Emoji") nil 'prepend)))

    :config
    ;; Default font family and size.
    (unless (boundp 'conf:font-family)
      (setq conf:font-family "JetBrains Mono")) ;; Default font family
    (unless (boundp 'conf:font-size)
      (setq conf:font-size 16)) ;; Default font size

    ;; Ensure fonts are loaded correctly in daemon mode or GUI startup.
    (if (daemonp)
        (add-hook 'after-make-frame-functions #'font-setup)
      (font-setup))

    ;; Configure Nerd Fonts for icons and UI enhancements.
    (leaf nerd-icons
      :if (display-graphic-p)
      :ensure t
      :config
      (unless (font-exists-p "Symbols Nerd Font Mono")
        (message "Nerd Font is not installed. Some icons may not display correctly.")))

    ;; Enable Nerd Icons in Dired mode for file management.
    (leaf nerd-icons-dired
      :if (display-graphic-p)
      :ensure t
      :hook (dired-mode-hook . nerd-icons-dired-mode))

    ;; Enable ligatures (special character combinations) for programming modes.
    (leaf ligature
      :ensure t
      :config
      (ligature-set-ligatures 'prog-mode '("->" "=>" "::" "===" "!=" "&&" "||" "|||"
                                           ":::" "!!" "??" "-->" "<--" "->>" "<<-"))
      (global-ligature-mode t)))
#+end_src

** Basic
/This configuration script includes basic settings and utilities aimed at improving the functionality and cleanliness of the Emacs environment. Here's a summary of the key components/

- *Basic*
  Editing and font settings improve readability and usability.
  We define settings for auto-saving, backup management, and basic editing features.


#+begin_src emacs-lisp
  ;;; Basic Configuration for Emacs 30+ using leaf

  ;; Insert a timestamp of the last update before saving the buffer.
  (leaf *lastupdate
    :preface
    ;; Define a function to insert a timestamp before saving the buffer.
    (defun my/save-buffer-wrapper ()
      "Insert the last update timestamp in the buffer before saving."
      (interactive)
      (let ((tostr (concat "$Lastupdate: " (format-time-string "%Y/%m/%d %H:%M:%S") " $")))
        (save-excursion
          (goto-char (point-min))
          (while (re-search-forward "\\$Lastupdate\\([0-9/: ]*\\)?\\$" nil t)
            (replace-match tostr nil t)))))
    ;; Attach the function to `before-save-hook`.
    :hook (before-save-hook . my/save-buffer-wrapper))

  ;; macOS-specific integration to fetch environment variables from the shell.
  (leaf exec-path-from-shell
    :ensure t
    :if (memq window-system '(mac ns))  ;; Load only on macOS GUI
    :commands (exec-path-from-shell-getenvs exec-path-from-shell-setenv)
    :custom ((exec-path-from-shell-check-startup-files . nil))
    :config
    (exec-path-from-shell-initialize))

  ;; Keep Emacs configuration and cache files organized.
  (leaf no-littering
    :ensure t
    :require t)

  ;; Safely load custom settings from a dedicated custom.el file.
  (leaf cus-edit
    :custom `((custom-file . ,(concat no-littering-etc-directory "custom.el")))
    :config (ignore-errors (load custom-file)))

  ;; Save and restore the desktop session and window configuration.
  (leaf *desktop
    :config
    ;; Desktop session and window configuration settings.
    (setq desktop-dirname (concat no-littering-var-directory "desktop")
          desktop-save 'if-exists
          desktop-auto-save-timeout 180
          desktop-restore-eager 10
          desktop-restore-forces-onscreen nil)
    (desktop-save-mode 1)  ;; Enable desktop save mode
    (winner-mode 1))       ;; Enable winner mode for undo/redo of window changes

  ;; Automatically revert buffers when files are changed externally.
  (leaf autorevert
    :global-minor-mode global-auto-revert-mode)

  ;; Enable automatic parenthesis pairing and highlighting.
  (leaf elec-pair
    :global-minor-mode electric-pair-mode)

  (leaf paren
    :custom ((show-paren-delay . 0)
             (show-paren-style . 'expression))
    :global-minor-mode show-paren-mode)

  (leaf puni
    :ensure t
    :global-minor-mode puni-global-mode)

  ;; Auto-save and backup settings for safer file handling.
  (leaf files
    :preface
    ;; Function to toggle `auto-save-visited-mode`.
    (defun toggle-auto-save-visited-mode ()
      "Toggle auto-save-visited-mode."
      (interactive)
      (if auto-save-visited-mode
          (progn
            (auto-save-visited-mode -1)
            (message "auto-save-visited-mode disabled"))
        (progn
          (auto-save-visited-mode 1)
          (message "auto-save-visited-mode enabled"))))

    :custom
    `((auto-save-file-name-transforms . '((".*" ,(concat no-littering-var-directory "backup") t)))
      (backup-directory-alist . '(("." . ,(concat no-littering-var-directory "backup"))))
      (delete-old-versions . t)
      (auto-save-visited-interval . 1))
    :global-minor-mode auto-save-visited-mode)

  ;; Remote file editing with Tramp (e.g., SSH, SCP).
  (leaf tramp
    :pre-setq
    `((tramp-persistency-file-name . ,(concat no-littering-var-directory "tramp"))
      (tramp-auto-save-directory . ,(concat no-littering-var-directory "tramp-autosave")))
    :setq
    ((tramp-default-method . "scp")
     (tramp-encoding-shell . "/bin/bash")
     (tramp-debug-buffer . t)
     (tramp-verbose . 10)
     (tramp-shell-prompt-pattern . "\\(?:^\\|\r\\)[^]#$%>\n]*#?[]#$%>] *\\(^[\\[[0-9;]*[a-zA-Z] *\\)*")
     (tramp-use-ssh-controlmaster-options . nil)
     (tramp-password-prompt-regexp . '(concat
                                       "^.*"
                                       (regexp-opt
                                        '("passphrase" "Passphrase"
                                          "password" "Password"
                                          "Verification code")
                                        t)
                                       ".*:\0? *"))))

  ;; Miscellaneous settings for startup and history.
  (leaf startup
    :custom `((auto-save-list-file-prefix . ,(concat no-littering-var-directory "backup/.saves-"))))

  (leaf savehist
    :custom `((savehist-file . ,(concat no-littering-var-directory "savehist")))
    :global-minor-mode t)

  ;; Display keybindings in a helpful popup.
  (leaf which-key
    :ensure t
    :global-minor-mode t)

  ;; Tree-sitter integration for advanced syntax highlighting and parsing.
  (leaf tree-sitter
    :ensure t
    :config
    (global-tree-sitter-mode)
    (add-hook 'tree-sitter-after-on-hook #'tree-sitter-hl-mode))

  (leaf tree-sitter-langs
    :ensure t
    :config
    (tree-sitter-langs-install-grammars))
#+end_src

** Utilties Package

*** Extra Utility
These include toggling line numbers, switching window layouts, and custom functions for buffer management and Dired mode.


#+begin_src emacs-lisp
  ;;; Utilities Package Configuration

  ;; Enable global visual-line-mode for better word wrapping
  (leaf visual-line-mode
    :global-minor-mode t)

  ;; macOS clipboard support using pbcopy
  (leaf pbcopy
    :if (memq window-system '(mac ns))
    :ensure t)

  ;; Utility packages for dired, expand-region, undo-fu, aggressive-indent, and delsel
  (leaf dired-filter :ensure t)
  (leaf expand-region :ensure t)
  (leaf undo-fu :ensure t)
  (leaf aggressive-indent
    :ensure t
    :global-minor-mode global-aggressive-indent-mode)
  (leaf delsel
    :global-minor-mode delete-selection-mode)
  (leaf persistent-scratch
    ;; Persist and save/restore *scratch* buffer
    (persistent-scratch-setup-default))

  ;; Search and jump utilities (Ripgrep and dumb-jump)
  (leaf rg :ensure t)
  (leaf dumb-jump
    :ensure t
    :after rg
    :hook ((xref-backend-functions . dumb-jump-xref-activate))
    :custom ((dumb-jump-force-searcher . 'rg)))

  ;; Multi-cursor editing support
  (leaf multiple-cursors :ensure t)

  ;; Version control using Magit
  (leaf magit :ensure t)

  ;; Flymake and Flycheck for on-the-fly syntax checking
  (leaf flymake :ensure t :global-minor-mode)
  (leaf flycheck :ensure t :global-minor-mode t)

  ;; Flyspell for spell checking
  (leaf flyspell
    :ensure t
    :hook (text-mode . flyspell-mode)
    :custom ((ispell-program-name . "aspell")))

  ;; Projectile for project management
  (leaf projectile :ensure t :global-minor-mode t)

  ;; Yasnippet for snippet support
  (leaf yasnippet :ensure t :global-minor-mode yas-global-mode)

  ;; EasyPG activate
  (leaf epa-file
    :require t
    :config
    (epa-file-enable)
    (custom-set-variables '(epg-gpg-program  "gpg"))
    (setq epa-pinentry-mode 'loopback))

  ;; Ellama
  (leaf ellama
    :after llm-ollama
    :ensure t
    :init
    (setopt ellama-language "Japanese")
    (setopt ellama-sessions-directory (concat no-littering-var-directory "ellama-sessions"))
    (setopt ellama-naming-scheme 'ellama-generate-name-by-llm)
    ;; default provider
    (setopt ellama-provider (make-llm-ollama
                             :chat-model "codestral:22b-v0.1-q4_K_S"
                             :embedding-model "codestral:22b-v0.1-q4_K_S"))
    ;; translation provider
    (setopt ellama-translation-provider (make-llm-ollama
                                         :chat-model "llama3:8b-instruct-q8_0"
                                         :embedding-model "llama3:8b-instruct-q8_0"))
    ;; ellama use providers
    (setopt ellama-providers
            '(("codestral" . (make-llm-ollama
                              :chat-model "codestral:22b-v0.1-q4_K_S"
                              :embedding-model "codestral:22b-v0.1-q4_K_S"))
              ("gemma2" . (make-llm-ollama
                           :chat-model "gemma2:27b-instruct-q4_K_S"
                           :embedding-model "gemma2:27b-instruct-q4_K_S"))
              ("llama3.2-vision" . (make-llm-ollama
                                    :chat-model "llama3:8b-instruct-q8_0"
                                    :embedding-model "llama3:8b-instruct-q8_0")))))

  ;; Programming and markup language support
  (leaf prog-mode
    :hook
    (prog-mode-hook . (lambda ()
                        (display-line-numbers-mode)
                        (electric-pair-mode))))

  ;; LSP configuration for various programming languages
  (leaf lsp-mode
    :ensure t
    :commands lsp
    :hook
    ((python-mode-hook go-mode-hook rust-mode-hook) . lsp)
    :config
    (setq lsp-enable-symbol-highlighting t
          lsp-signature-auto-activate nil
          lsp-disabled-clients '(copilot-ls)))

  (leaf lsp-ui
    :ensure t
    :after lsp-mode
    :config
    (setq lsp-ui-doc-enable t
          lsp-ui-doc-delay 0.2
          lsp-ui-sideline-enable t))

  (leaf parinfer-rust-mode
    :ensure t
    :hook (clojure-mode emacs-lisp-mode common-lisp-mode scheme-mode lisp-mode)
    :init
    (setq parinfer-rust-auto-download t))

  ;; Eglot configuration for language server support
  (leaf eglot
    :ensure t
    :config
    ;; Add Deno server for JavaScript/TypeScript
    (add-to-list 'eglot-server-programs '((js-mode js-ts-mode typescript-mode typescript-ts-mode) . (eglot-deno "deno" "lsp")))

    ;; Define custom class for Deno LSP server
    (defclass eglot-deno (eglot-lsp-server) () :documentation "Custom class for deno LSP.")

    ;; Provide initialization options for Deno
    (cl-defmethod eglot-initialization-options ((server eglot-deno))
      "Passes through required deno initialization options"
      (list :enable t :lint t))

    ;; Disable certain server capabilities
    (setq eglot-ignored-server-capabilities '(:documentHighlightProvider :inlayHintProvider))

    ;; Disable multiline eldoc echo area
    (setq eldoc-echo-area-use-multiline-p nil)

    ;; Hook eglot to start automatically in various modes
    :hook
    ((sh-mode
      c-mode
      c++-mode
      python-mode
      ruby-mode
      rust-mode
      html-mode
      css-mode
      js-mode) . eglot-ensure))
#+end_src

*** Org-mode


#+begin_src emacs-lisp
  ;;; Org-mode Setup
  (leaf Org-mode
    :config
    ;; Org-mode document management and editing
    (leaf org
      :leaf-defer t
      :preface
      (defvar warning-suppress-types nil)
      (unless (boundp 'my:d:cloud)
        (setq my:d:cloud (concat no-littering-var-directory "./")))

      ;; Return list of opened Org mode buffer files
      (defun org-buffer-files ()
        "Return list of opened Org mode buffer files."
        (mapcar (function buffer-file-name)
                (org-buffer-list 'files)))

      ;; Show Org buffer file in current window
      (defun show-org-buffer (file)
        "Show an org-file FILE in the current buffer."
        (interactive)
        (if (get-buffer file)
            (let ((buffer (get-buffer file)))
              (switch-to-buffer buffer)
              (message "%s" file))
          (find-file (concat org-directory "/" file))))

      :custom
      (org-support-shift-select . t)

      :init
      (setq org-directory (expand-file-name "Org/" my:d:cloud))
      (unless (file-exists-p org-directory)
        (make-directory org-directory))
      (setq org-startup-indented t
            org-ellipsis " ▾"
            org-hide-leading-stars t)
      (setq warning-suppress-types (append warning-suppress-types '((org-element-cache))))

      :bind
      (("C-M--" . #'(lambda () (interactive)
                      (show-org-buffer "gtd.org")))
       ("C-M-^" . #'(lambda () (interactive)
                      (show-org-buffer "notes.org")))
       ("C-M-~" . #'(lambda () (interactive)
                      (show-org-buffer "kb.org"))))

      :config
      (setq org-agenda-files (list org-directory)
            org-default-notes-file "notes.org"
            org-log-done 'time
            org-startup-truncated nil
            org-startup-folded 'content
            org-use-speed-commands t
            org-enforce-todo-dependencies t)

      (remove (concat org-directory "/archives") org-agenda-files)

      (setq org-todo-keywords
            '((sequence "TODO(t)" "SOMEDAY(s)" "WAITING(w)" "|" "DONE(d)" "CANCELED(c@)")))

      (setq org-refile-targets
            (quote ((nil :maxlevel . 3)
                    (org-buffer-files :maxlevel . 1)
                    (org-agenda-files :maxlevel . 3))))

      (setq org-capture-templates
            '(("t" "Todo" entry (file+headline "gtd.org" "Inbox")
               "* TODO %?\n %i\n %a")
              ("n" "Note" entry (file+headline "notes.org" "Notes")
               "* %?\nEntered on %U\n %i\n %a")
              ("j" "Journal" entry (function org-journal-find-location)
               "* %(format-time-string org-journal-time-format)%^{Title}\n%i%?")
              ("m" "Meeting" entry (file "meetings.org")
               "* MEETING with %? :meeting:\n  %U\n  %a")
              )))

    ;; Additional Org-related packages and configuration
    (leaf org-bullets
      :ensure t
      :hook (org-mode . org-bullets-mode))

    (leaf org-latex
      :after org
      :custom
      (org-latex-packages-alist '(("" "graphicx" t)
                                  ("" "longtable" nil)
                                  ("" "wrapfig" nil)))
      (org-latex-pdf-process '("pdflatex -interaction nonstopmode -output-directory %o %f"
                               "pdflatex -interaction nonstopmode -output-directory %o %f")))

    (leaf ob
      :after org
      :defun org-babel-do-load-languages
      :config
      (org-babel-do-load-languages
       'org-babel-load-languages
       '((emacs-lisp . t)
         (shell . t)
         (python . t)
         (R . t)
         (ditaa . t)
         (plantuml . t))))

    (leaf org-superstar
      :after org
      :ensure t
      :custom
      (org-superstar-headline-bullets-list . '("◉" "★" "○" "▷" "" ""))
      :hook
      (org-mode-hook (lambda () (org-superstar-mode 1))))

    (leaf org-journal
      :after org
      :ensure t
      :config
      (setq org-journal-dir (concat org-directory "/journal")
            org-journal-enable-agenda-integration t)
      (defun org-journal-find-location ()
        ;; Open today's journal and position point at the top-level heading.
        (org-journal-new-entry t)
        (goto-char (point-min))))

    ;; Other Org-related extensions and tools
    (leaf org-cliplink :after org :ensure t :bind ("C-x p i" . org-cliplink))
    (leaf org-download
      :after org
      :ensure t
      :config
      (setq-default org-download-image-dir (concat org-directory "/pictures")))
    (leaf org-web-tools :after org :ensure t)
    (leaf toc-org
      :after org markdown-mode
      :ensure t
      :config
      (add-hook 'org-mode-hook 'toc-org-enable)
      (add-hook 'markdown-mode-hook 'toc-org-mode)
      (define-key markdown-mode-map (kbd "\C-c\C-o") 'toc-org-markdown-follow-thing-at-point))

    ;; Org-roam for knowledge management
    (leaf org-roam
      :ensure t
      :after org
      :bind
      ("C-c n l" . org-roam-buffer-toggle)
      ("C-c n f" . org-roam-node-find)
      ("C-c n g" . org-roam-graph)
      ("C-c n i" . org-roam-node-insert)
      ("C-c n c" . org-roam-capture)
      ("C-c n j" . org-roam-dailies-capture-today)
      :config
      (setq org-roam-directory (concat org-directory "/org-roam"))
      (org-roam-db-autosync-mode))

    ;; Export Org files to Hugo markdown format using ox-hugo
    (leaf ox-hugo
      :ensure t
      :require t
      :after ox
      :custom ((org-hugo-front-matter-format . "toml")))
    ;; ox-hugo-capture
    (leaf *ox-hugo--capture
      :require org-capture
      :defvar (org-capture-templates)
      :config
      (add-to-list 'org-capture-templates
                   '("b" "Create new blog post" entry
                     (file+headline my-capture-blog-file "blog")
                     "** TODO %?
  :PROPERTIES:
  :EXPORT_FILE_NAME: %(apply #'format \"%s-%s-%s\"
  (format-time-string \"%Y\")
  (let ((sha1 (sha1 (shell-command-to-string \"head -c 1024 /dev/urandom\"))))
  (cl-loop for (a b c d) on (cdr (split-string sha1 \"\")) by #'cddddr repeat 2 collect (concat a b c d))))
  :EXPORT_DATE:
  :EXPORT_HUGO_TAGS:
  :EXPORT_HUGO_CATEGORIES:
  :EXPORT_HUGO_LASTMOD:
  :EXPORT_HUGO_CUSTOM_FRONT_MATTER: :pin false
  :END:
  \n
  ")))
    (leaf markdown-mode
      :ensure t
      :mode ("\\.md\\'" . markdown-mode)))
#+end_src

*** Completion Framework
/This configuration script sets up a sophisticated *completion framework* for Emacs, utilizing a combination of packages to provide fast, flexible, and user-friendly completion across various contexts. Here's an overview of the key components/


#+begin_src emacs-lisp
  ;;; Completion Framework Configuration - Optimized for minimal keystrokes

  (leaf completion-settings
    :config
    ;; Prescient: Sort and filter candidates based on usage
    (leaf prescient
      :ensure t
      :custom
      ((prescient-aggressive-file-save . t))  ;; Save history after each update
      :global-minor-mode prescient-persist-mode)  ;; Enable persistence globally

    ;; Vertico: Vertical completion menu
    (leaf vertico
      :ensure t
      :global-minor-mode vertico-mode
      :custom
      ((vertico-count . 15))  ;; Show up to 15 candidates
      :config
      ;; Enable extensions for Vertico
      (leaf vertico-directory
        :after vertico)
      ;; Integrate prescient sorting with Vertico
      (leaf vertico-prescient
        :ensure t
        :after (vertico prescient)
        :global-minor-mode t)
      ;; Use posframe for cleaner display of completion candidates
      (leaf vertico-posframe
        :ensure t
        :custom
        ((vertico-posframe-border-width . 2)  ;; Thin borders for minimalism
         (vertico-posframe-parameters . '((left-fringe . 4)
                                          (right-fringe . 4))))
        :global-minor-mode vertico-posframe-mode))

    ;; Marginalia: Annotate completion options with useful information
    (leaf marginalia
      :ensure t
      :custom
      ((marginalia-annotators . '(marginalia-annotators-heavy
                                  marginalia-annotators-light
                                  nil)))
      :global-minor-mode marginalia-mode)

    ;; Consult: Powerful search and navigation tool
    (leaf consult
      :ensure t
      :custom
      ((xref-show-xrefs-function . #'consult-xref)
       (xref-show-definitions-function . #'consult-xref)))

    ;; Embark: Context-aware actions for completions
    (leaf embark
      :ensure t
      :custom
      ((prefix-help-command . #'embark-prefix-help-command))  ;; Use Embark for prefix help
      :config
      (leaf embark-consult
        :ensure t
        :after (embark consult)
        :hook (embark-collect-mode . consult-preview-at-point-mode)))  ;; Preview in Embark

    ;; Corfu: Minimal completion UI with support for inline suggestions
    (leaf corfu
      :ensure t
      :global-minor-mode global-corfu-mode
      :custom
      ((corfu-auto . t)  ;; Enable automatic popup for completion
       (corfu-auto-delay . 0)  ;; Instant popup after typing
       (corfu-auto-prefix . 2)  ;; Show popup after typing 2 characters
       (corfu-cycle . t))  ;; Allow cycling through candidates
      :config
      (corfu-popupinfo-mode)  ;; Display detailed information in popup
      ;; Key bindings for navigation and completion
      (define-key corfu-map (kbd "TAB") 'corfu-next)
      (define-key corfu-map (kbd "<tab>") 'corfu-next)
      (define-key corfu-map (kbd "S-TAB") 'corfu-previous)
      (define-key corfu-map (kbd "<backtab>") 'corfu-previous)
      (define-key corfu-map (kbd "RET") 'corfu-complete)
      ;; Prescient integration for sorting in Corfu
      (leaf corfu-prescient
        :ensure t
        :after (corfu prescient)
        :config
        (corfu-prescient-mode 1)))  ;; Enable prescient sorting in Corfu

    ;; Kind-icon: Add icons to completion candidates for better visualization
    (leaf kind-icon
      :ensure t
      :after corfu
      :custom
      ((kind-icon-default-face . 'corfu-default))  ;; Match corfu's UI for icons
      :config
      (add-to-list 'corfu-margin-formatters #'kind-icon-margin-formatter))  ;; Display icons in the margin

    ;; Cape: Extra completions at point for various use cases
    (leaf cape
      :ensure t
      :init
      (add-to-list 'completion-at-point-functions #'cape-file)  ;; Completion for file names
      (add-to-list 'completion-at-point-functions #'cape-dabbrev)  ;; Dynamic abbreviation completion
      (add-to-list 'completion-at-point-functions #'cape-keyword))  ;; Completion for keywords

    ;; Orderless: Enable fuzzy and flexible matching for completions
    (leaf orderless
      :ensure t
      :custom
      ((completion-styles . '(orderless basic))  ;; Use fuzzy matching by default
       (completion-category-defaults . nil)
       (completion-category-overrides . '((file (styles . (partial-completion))))))))

  ;; Auxiliary features for emacs-lisp-mode to improve editing
  (add-hook 'emacs-lisp-mode-hook #'eldoc-mode)
  (add-hook 'emacs-lisp-mode-hook #'xref-etags-mode)
  (add-hook 'emacs-lisp-mode-hook #'flycheck-mode)
  (when (executable-find "parinfer-rust-server")
    (add-hook 'emacs-lisp-mode-hook #'parinfer-rust-mode))
#+end_src

*** Miscellaneous helper functions


#+begin_src emacs-lisp
  ;; Variable to store the current window configuration.
  (defvar my/saved-window-config nil
    "Stores the current window configuration for later restoration.")

  ;; Save the current window layout.
  (defun my/save-window-layout ()
    "Save the current window configuration to `my/saved-window-config`."
    (interactive)
    (setq my/saved-window-config (current-window-configuration))
    (message "Window configuration saved."))

  ;; Restore the saved window layout if available.
  (defun my/restore-window-layout ()
    "Restore the saved window configuration.
  If no configuration has been saved, notify the user."
    (interactive)
    (if my/saved-window-config
        (progn
          (set-window-configuration my/saved-window-config)
          (message "Window configuration restored."))
      (message "No saved window configuration found.")))

  ;; Reuse the currently selected window when displaying a buffer.
  (defun my/display-buffer-same-window (buffer alist)
    "Attempt to display BUFFER in the currently selected window.
  Avoids opening a new window unless necessary."
    (unless (or (cdr (assq 'inhibit-same-window alist))
                (window-minibuffer-p)
                (window-dedicated-p))
      (window--display-buffer buffer (selected-window) 'reuse alist)))

  ;; Split the window below from the root or parent window based on ARG.
  (defun my/split-below (arg)
    "Split the window below, starting from the root if ARG is non-nil.
  Otherwise, split from the parent of the current window."
    (interactive "P")
    (split-window (if arg (frame-root-window)
                    (window-parent (selected-window)))
                  nil 'below))

  ;; Toggle the dedicated status of the selected window.
  (defun my/toggle-window-dedication ()
    "Toggle the dedicated status of the currently selected window.
  A dedicated window will not display other buffers."
    (interactive)
    (let ((window (selected-window)))
      (set-window-dedicated-p window (not (window-dedicated-p window)))
      (message "Window dedication %s"
               (if (window-dedicated-p window) "enabled" "disabled"))))

  ;; Save the current desktop session.
  (defun my/save-desktop-session ()
    "Save the current desktop session using `desktop-save`."
    (interactive)
    (desktop-save desktop-dirname)
    (message "Desktop session saved."))

  ;; Restore a previously saved desktop session.
  (defun my/restore-desktop-session ()
    "Restore a desktop session using `desktop-read`."
    (interactive)
    (desktop-read)
    (message "Desktop session restored."))

  ;; Delete backup files older than 7 days.
  (defun my/delete-old-backups ()
    "Delete backup files in `no-littering-var-directory/backup/` older than 7 days."
    (let ((backup-dir (concat no-littering-var-directory "backup/")))
      (when (file-directory-p backup-dir)
        (dolist (file (directory-files backup-dir t "\\`[^.]"))
          (when (and (file-regular-p file)
                     (> (- (float-time (current-time))
                           (float-time (nth 5 (file-attributes file))))
                        (* 7 24 60 60))) ;; Files older than 7 days
            (delete-file file))))))
  (add-hook 'emacs-startup-hook #'my/delete-old-backups)

  ;; Automatically enable or disable `view-mode` based on buffer's read-only status.
  (defun my/enable-view-mode-on-read-only ()
    "Enable `view-mode` if the buffer is read-only, disable otherwise."
    (if buffer-read-only
        (view-mode 1)
      (view-mode -1)))
  (add-hook 'read-only-mode-hook #'my/enable-view-mode-on-read-only)

  ;; Toggle the display of line numbers.
  (defun my/toggle-linum-lines ()
    "Toggle line number display using `display-line-numbers-mode`."
    (interactive)
    (if display-line-numbers-mode
        (display-line-numbers-mode -1)
      (display-line-numbers-mode 1)))

  ;; Toggle the window split between horizontal and vertical.
  (defun my/toggle-window-split ()
    "Toggle the window split between horizontal and vertical.
  This function only works when exactly two windows are open."
    (interactive)
    (if (= (count-windows) 2)
        (let* ((this-win-buffer (window-buffer))
               (next-win-buffer (window-buffer (next-window)))
               (this-win-edges (window-edges (selected-window)))
               (next-win-edges (window-edges (next-window)))
               (splitter (if (= (car this-win-edges)
                                (car (window-edges (next-window))))
                             'split-window-horizontally
                           'split-window-vertically)))
          (delete-other-windows)
          (let ((first-win (selected-window)))
            (funcall splitter)
            (set-window-buffer (selected-window) this-win-buffer)
            (set-window-buffer (next-window) next-win-buffer)
            (select-window first-win)))))

  ;; Open the selected file or directory in another window in Dired mode.
  (defun my/dired-view-file-other-window ()
    "Open the selected file or directory in another window.
  If the target is a directory, navigate to it.
  If the target is a file, open it in read-only mode in another window."
    (interactive)
    (let ((file (dired-get-file-for-visit)))
      (if (file-directory-p file)
          (or (and (cdr dired-subdir-alist)
                   (dired-goto-subdir file))
              (dired file))
        (view-file-other-window file))))

  ;; Find and display keybinding conflicts in all active keymaps.
  (defun my/find-keybinding-conflicts ()
    "Detect and display keybinding conflicts across active keymaps."
    (interactive)
    (let ((conflicts (make-hash-table :test 'equal))
          (buffer-name "*Keybinding Conflicts*"))
      (mapatoms (lambda (keymap)
                  (when (and (boundp keymap) (keymapp (symbol-value keymap)))
                    (map-keymap
                     (lambda (key cmd)
                       (when (commandp cmd)
                         (let ((existing (gethash key conflicts)))
                           (if existing
                               (puthash key (cons cmd existing) conflicts)
                             (puthash key (list cmd) conflicts)))))
                     (symbol-value keymap)))))
      (with-current-buffer (get-buffer-create buffer-name)
        (read-only-mode -1)
        (erase-buffer)
        (insert "Keybinding Conflicts:\n\n")
        (maphash (lambda (key cmds)
                   (when (> (length cmds) 1)
                     (insert (format "%s => %s\n"
                                     (key-description key)
                                     (mapconcat #'symbol-name cmds ", ")))))
                 conflicts)
        (read-only-mode 1))
      (switch-to-buffer buffer-name)))

  ;; Replace all occurrences of a string in the current buffer.
  (defun my/replace-string-in-buffer ()
    "Prompt for a string to replace and its replacement, then replace all occurrences."
    (interactive)
    (let ((from (read-string "Replace: "))
          (to (read-string "With: ")))
      (save-excursion
        (goto-char (point-min))
        (while (search-forward from nil t)
          (replace-match to nil t)))))

  ;; Open the init file for quick editing.
  (defun my/open-init-file ()
    "Open the user's Emacs init file."
    (interactive)
    (find-file user-init-file))

  ;; Open the current buffer in Visual Studio Code at the current line and column.
  (defun my/open-by-vscode ()
    "Open the current file in Visual Studio Code at the current line and column."
    (interactive)
    (when (buffer-file-name)
      (shell-command
       (format "code -r -g %s:%d:%d"
               (buffer-file-name)
               (line-number-at-pos)
               (current-column)))))

  ;; Display detailed information about the current Emacs build.
  (defun my/print-build-info ()
    "Display detailed information about the current Emacs build."
    (interactive)
    (switch-to-buffer (get-buffer-create "*Build info*"))
    (let ((buffer-read-only nil))
      (erase-buffer)
      (insert
       (format "GNU Emacs %s\nCommit:\t\t%s\nBranch:\t\t%s\nSystem:\t\t%s\nDate:\t\t\t%s\n"
               emacs-version
               (emacs-repository-get-version)
               (when (version< "27.0" emacs-version)
                 (emacs-repository-get-branch))
               system-configuration
               (format-time-string "%Y-%m-%d %T (%Z)" emacs-build-time)))
      (view-mode)))

  ;; Generate a table of all keybindings sorted by key sequence and command name.
  (defun my/generate-keybinding-table ()
    "Generate a table of all keybindings sorted by key sequence and command name."
    (interactive)
    (let ((bindings '()))
      (mapatoms (lambda (sym)
                  (when (commandp sym)
                    (dolist (key (where-is-internal sym))
                      (push (list (key-description key) (symbol-name sym)) bindings)))))
      (setq bindings (sort bindings (lambda (a b) (string< (car a) (car b)))))
      (with-current-buffer (get-buffer-create "*Keybindings Table*")
        (tabulated-list-mode)
        (setq tabulated-list-format [("Key" 20 t) ("Command" 40 t)])
        (setq tabulated-list-entries
              (mapcar (lambda (x) (list (car x) (vector (car x) (cadr x))))
                      bindings))
        (tabulated-list-init-header)
        (tabulated-list-print)
        (pop-to-buffer (current-buffer)))))

  ;; Remove duplicate entries from the kill ring before adding a new one.
  (defun my/no-kill-new-duplicate (yank)
    "Remove duplicate entries from `kill-ring` before adding YANK."
    (setq kill-ring (delete yank kill-ring)))
  (advice-add 'kill-new :before #'my/no-kill-new-duplicate)

  ;; Automatically delete trailing whitespace before saving a file.
  (add-hook 'before-save-hook 'delete-trailing-whitespace)

  ;; Enable clickable URLs in programming and text modes.
  (add-hook 'prog-mode-hook 'goto-address-prog-mode)
  (add-hook 'text-mode-hook 'goto-address-mode)
#+end_src

** Keybind
/This Emacs configuration defines custom key bindings using the `leaf` package to streamline common tasks. Here's a summary of the key aspects/

- *Key Bindings*
  Custom keybindings provide shortcuts for common actions, improving efficiency by reducing the need to rely on menus or commands.
  Here we set up custom bindings for window navigation, editing, and more.


#+begin_src emacs-lisp
  (leaf KeyBinding
    :config
    (leaf-keys
     ;; Basic editing operations
     (("C-h"           . backward-delete-char)  ;; Delete character before the cursor
      ("C-?"           . help-command)          ;; Open help
      ("C-/"           . undo-fu-only-undo)     ;; Undo
      ("C-z"           . undo-fu-only-redo)     ;; Redo
      ("C-c i"         . my/open-init-file)     ;; Open init file

      ;; Window navigation
      ("M-o"          . ace-window)             ;; Quick window switch
      ("C-."          . other-window)           ;; Switch to the other window
      ("C-c w l"      . my/toggle-linum-lines)  ;; Toggle line numbers
      ("C-c w 2"      . my/split-below)
      ("C-c w d"      . my/toggle-window-dedication)
      ("C-c w s"      . my/save-window-layout)
      ("C-c w r"      . my/restore-window-layout)
      ("C-c d s"      . my/save-desktop-session)
      ("C-c d r"      . my/restore-desktop-session)

      ;; Text scaling
      ("C-+"          . text-scale-increase)    ;; Increase text size
      ("C--"          . text-scale-decrease)    ;; Decrease text size

      ;; Emacs control
      ("C-q"          . kill-emacs)             ;; Quit Emacs
      ("M-q"          . save-buffers-kill-emacs) ;; Save buffers and quit

      ;; Commenting
      ("C-c ;"        . comment-region)         ;; Comment selected region
      ("C-c :"        . uncomment-region)       ;; Uncomment selected region

      ;; File operations
      ("C-c f o"      . find-file)              ;; Open file
      ("C-c f v"      . find-file-read-only)    ;; Open file in read-only mode
      ("C-c f z"      . toggle-auto-save-visited-mode) ;; Toggle auto-save-visited-mode

      ;; Buffer operations
      ("C-c f k"      . kill-buffer-and-window) ;; Kill buffer and close window

      ;; Search and replace
      ("C-c r" . my/replace-string-in-buffer)   ;; Replace string in buffer
      ("C-c C-r"      . consult-ripgrep)        ;; Ripgrep search

      ;; Sidebar
      ("C-c t t"      . treemacs)

      ;; Alignment and line number toggle
      ("C-c M-a"      . align-regexp)           ;; Align using regex

      ;; Org Capture
      ("C-c o a"        . org-agenda)
      ("C-c o l"        . org-store-link)
      ("C-c o c"        . org-capture)            ;; Capture Org entry

      ;; Scrolling
      ("C-s-<up>"     . scroll-down-command)    ;; Scroll down
      ("C-s-<down>"   . scroll-up-command)      ;; Scroll up

      ;; Frame management
      ("s-o"        . find-file-other-frame)  ;; Open file in other frame
      ("s-m"        . make-frame)             ;; Create a new frame
      ("s-d"        . delete-frame)           ;; Delete current frame
      ("s-."          . my/toggle-window-split) ;; Toggle window split
      ("s-j"          . find-file-other-window) ;; Open file in other window
      ("s-r"          . restart-emacs)          ;; Restart Emacs

      ;; Buffer navigation
      ("s-<up>"       . beginning-of-buffer)    ;; Go to the beginning of the buffer
      ("s-<down>"     . end-of-buffer)          ;; Go to the end of the buffer

      ;; Scroll other window
      ("s-<wheel-up>"   . scroll-other-window)      ;; Scroll other window up
      ("s-<wheel-down>" . scroll-other-window-down) ;; Scroll other window down

      ;; Expand region
      ("C-="          . er/expand-region)       ;; Expand selected region

      ;; Multiple cursors
      ("C-S-c C-S-c"  . mc/edit-lines)          ;; Edit multiple lines
      ("C->"          . mc/mark-next-like-this) ;; Mark next occurrence
      ("C-<"          . mc/mark-previous-like-this) ;; Mark previous occurrence
      ("C-c C-<"      . mc/mark-all-like-this)  ;; Mark all occurrences

      ;; Magit
      ("C-x g"        . magit-status)           ;; Open Magit status

      ;; Embark
      ("s-,"          . embark-dwim)            ;; Embark Do What I Mean
      ("C-<f2>"       . embark-bindings)        ;; Embark key bindings

      ;; Marginalia
      ("M-A"          . marginalia-cycle)       ;; Cycle annotation styles

      ;; Consult for extended search
      ("C-s"          . consult-line)           ;; Search in buffer
      ("C-c c g"      . consult-goto-line)      ;; Go to line
      ("C-c c i"      . consult-imenu)          ;; Search functions in buffer
      ("C-c c b"      . consult-buffer)         ;; Buffer switch

      ;; Miscellaneous
      ("C-c v"        . my/open-by-vscode)      ;; Open the current buffer in Visual Studio Code
      ("C-c p"      . my/print-build-info)    ;; Print about the current Emacs build
      ("M-x"          . execute-extended-command))) ;; Execute extended command

    ;; Enable Windmove keybindings for window navigation
    (windmove-default-keybindings)

    ;; Dired Mode Custom Keybinding
    (add-hook 'dired-mode-hook
              (lambda ()
                (define-key dired-mode-map "z" 'my/dired-view-file-other-window))))
#+end_src

** Footer
#+begin_src emacs-lisp

  (provide 'README)
  ;;; README.el ends here
#+end_src
